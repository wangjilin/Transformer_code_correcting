void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(5==5){strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}else{strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;default:strcpy(data,"C:\\Windows\\System32\\winsrv.dll");break;}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_f){strcpy(data,"winsrv.dll");}else{strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_f()){strcpy(data,"winsrv.dll");}else{strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){strcpy(data,"C:\\Windows\\System32\\winsrv.dll");}else{strcpy(data,"winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;strcpy(data,"C:\\Windows\\System32\\winsrv.dll");*data_ptr1=data;}{char * data=*data_ptr2;{HMODULE hModule;hModule=LoadLibraryA(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;strcpy(data,"C:\\Windows\\System32\\winsrv.dll");func_ptr(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five==5){wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(0){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;while(1){wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");break;}while(0){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");{wchar_t * data_copy=data;wchar_t * data=data_copy;{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");*data_ptr1=data;}{wchar_t * data=*data_ptr2;{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void goodG2B(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");my_union.a=data;{wchar_t * data=my_union.b;{HMODULE hModule;hModule=LoadLibraryW(data);if(hModule!=NULL){FreeLibrary(hModule);printLine("Library loaded and freed successfully");}else{printLine("Unable to load library");}}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");goodG2B_sink(data);}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");func_ptr(data);}
void good1(){if(global_five!=5){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good1(){if(5!=5){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good1(){if(static_const_five!=5){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good2(){if(static_five==5){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good2(){if(global_returns_t()){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good1(){if(global_returns_t_or_f()){{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void good2(){switch(6){case 6:{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}break;default:{charvoid cv_struct;cv_struct.y=SRC_STR;printLine((char *)cv_struct.y);memmove(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1]='\0'; printLine((char *)cv_struct.x);printLine((char *)cv_struct.y);}}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_f){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_returns_t()){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_f){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_returns_t_or_f()){data=data_goodbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_const_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_const_f){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));{char * data=*data_ptr1;data=data_goodbuf;data[0]='\0'; *data_ptr1=data;}{char * data=*data_ptr2;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_returns_f()){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_const_t){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_returns_f()){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_returns_t_or_f()){data=data_goodbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}return;data=data_badbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; {char * data_copy=data;char * data=data_copy;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}}
void goodG2B(){char * data;union_type my_union;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; my_union.a=data;{char * data=my_union.b;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));while(1){data=data_goodbuf;data[0]='\0'; break;}while(0){data=data_badbuf;data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}return;data=data_badbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(1){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));switch(5){case 6:data=data_badbuf;data[0]='\0'; break;default:data=data_goodbuf;data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}
void goodG2B(){int h,i;char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));for(h=0; h < 1; h++){data=data_goodbuf;data[0]='\0';}for(i=0; i < 0; i++){data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(1){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(5==5){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_const_five==5){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(static_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));if(global_const_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(global_returns_f()){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(static_const_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];if(global_const_t){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(global_const_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; {size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);}return;data=data_badbuf;data[0]='\0'; {size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];switch(5){case 6:data=data_badbuf;data[0]='\0'; break;default:data=data_goodbuf;data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];if(static_const_five==5){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(global_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(global_five!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];switch(5){case 6:data=data_badbuf;data[0]='\0'; break;default:data=data_goodbuf;data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}}
void goodG2B(){char * data;union_type my_union;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; my_union.a=data;{char * data=my_union.b;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);}}}
void goodG2B(){char * data;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}return;data=data_badbuf;data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];if(5!=5){data=data_badbuf;data[0]='\0';}else{data=data_goodbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];if(static_t){data=data_goodbuf;data[0]='\0';}else{data=data_badbuf;data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}
void goodG2B2(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));if(5==5){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);}}}
void goodG2B2(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));if(static_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));if(global_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));if(0){data=data_badbuf;}else{data=data_goodbuf;}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B2(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));if(global_returns_t()){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){int * data;int data_badbuf[50];int data_goodbuf[100];if(static_const_f){data=data_badbuf;}else{data=data_goodbuf;}{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);}}}
void goodG2B2(){int * data;int data_badbuf[50];int data_goodbuf[100];if(static_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);}}}
void goodG2B2(){int * data;int data_badbuf[50];int data_goodbuf[100];if(static_const_t){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B2(){int * data;int data_badbuf[50];int data_goodbuf[100];if(static_t){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){int * data;int data_badbuf[50];int data_goodbuf[100];if(global_f){data=data_badbuf;}else{data=data_goodbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B2(){int * data;int data_badbuf[50];int data_goodbuf[100];if(global_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){int * data;int data_badbuf[50];int data_goodbuf[100];if(static_const_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B2(){int * data;int data_badbuf[50];int data_goodbuf[100];if(global_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);}}
void goodG2B1(){long long * data;long long * data_badbuf=(long long *)ALLOCA(50*sizeof(long long));long long * data_goodbuf=(long long *)ALLOCA(100*sizeof(long long));if(static_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);}}}
void goodG2B1(){long long * data;long long * data_badbuf=(long long *)ALLOCA(50*sizeof(long long));long long * data_goodbuf=(long long *)ALLOCA(100*sizeof(long long));if(static_returns_f()){data=data_badbuf;}else{data=data_goodbuf;}{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);}}}
void goodG2B1(){long long * data;long long * data_badbuf=(long long *)ALLOCA(50*sizeof(long long));long long * data_goodbuf=(long long *)ALLOCA(100*sizeof(long long));if(static_const_f){data=data_badbuf;}else{data=data_goodbuf;}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}
void goodG2B2(){long long * data;long long * data_badbuf=(long long *)ALLOCA(50*sizeof(long long));long long * data_goodbuf=(long long *)ALLOCA(100*sizeof(long long));if(global_five==5){data=data_goodbuf;}else{data=data_badbuf;}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}
void goodG2B2(){long long * data;long long data_badbuf[50];long long data_goodbuf[100];if(5==5){data=data_goodbuf;}else{data=data_badbuf;}{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);}}}
void goodG2B(){long long * data;union_type my_union;long long data_badbuf[50];long long data_goodbuf[100];data=data_goodbuf;my_union.a=data;{long long * data=my_union.b;{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);}}}}
void goodG2B1(){long long * data;long long data_badbuf[50];long long data_goodbuf[100];if(0){data=data_badbuf;}else{data=data_goodbuf;}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}
void goodG2B1(){long long * data;long long data_badbuf[50];long long data_goodbuf[100];if(5!=5){data=data_badbuf;}else{data=data_goodbuf;}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}
void goodG2B2(){long long * data;long long data_badbuf[50];long long data_goodbuf[100];if(global_returns_t()){data=data_goodbuf;}else{data=data_badbuf;}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}
void goodG2B(){long long * data;union_type my_union;long long data_badbuf[50];long long data_goodbuf[100];data=data_goodbuf;my_union.a=data;{long long * data=my_union.b;{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}}
void goodG2B1(){twoints * data;twoints * data_badbuf=(twoints *)ALLOCA(50*sizeof(twoints));twoints * data_goodbuf=(twoints *)ALLOCA(100*sizeof(twoints));if(static_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);}}
void goodG2B(){twoints * data;twoints * data_badbuf=(twoints *)ALLOCA(50*sizeof(twoints));twoints * data_goodbuf=(twoints *)ALLOCA(100*sizeof(twoints));data=data_goodbuf;{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twoints));printStructLine(&data[0]);}}
void goodG2B1(){twoints * data;twoints data_badbuf[50];twoints data_goodbuf[100];if(0){data=data_badbuf;}else{data=data_goodbuf;}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printStructLine(&data[0]);}}}
void goodG2B(){twoints * data;twoints data_badbuf[50];twoints data_goodbuf[100];while(1){data=data_goodbuf;break;}while(0){data=data_badbuf;break;}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printStructLine(&data[0]);}}}
void goodG2B1(){twoints * data;twoints data_badbuf[50];twoints data_goodbuf[100];if(static_f){data=data_badbuf;}else{data=data_goodbuf;}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);}}
void goodG2B1(){twoints * data;twoints data_badbuf[50];twoints data_goodbuf[100];if(static_const_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(static_returns_f()){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(global_const_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(static_const_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(static_f){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(global_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(global_const_f){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;union_type my_union;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_goodbuf;data[0]=L'\0'; my_union.a=data;{wchar_t * data=my_union.b;{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);}}}
void goodG2B(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_goodbuf;data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}return;data=data_badbuf;data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(static_const_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(static_returns_t()){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(global_const_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));switch(5){case 6:data=data_badbuf;data[0]=L'\0'; break;default:data=data_goodbuf;data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));switch(6){case 6:data=data_goodbuf;data[0]=L'\0'; break;default:data=data_badbuf;data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_goodbuf;data[0]=L'\0'; goodG2B_sink(data);}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));if(0){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_five!=5){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(global_five==5){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];switch(6){case 6:data=data_goodbuf;data[0]=L'\0'; break;default:data=data_badbuf;data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_const_five==5){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_const_f){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_five==5){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(global_const_five==5){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_const_five==5){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; {wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);}}}
void goodG2B1(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(global_returns_f()){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(global_returns_t_or_f()){data=data_goodbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];goto source;data=data_badbuf;data[0]=L'\0'; source:data=data_goodbuf;data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(1){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(static_const_t){data=data_goodbuf;data[0]=L'\0';}else{data=data_badbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];if(global_const_five!=5){data=data_badbuf;data[0]=L'\0';}else{data=data_goodbuf;data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];while(1){data=data_goodbuf;data[0]=L'\0'; break;}while(0){data=data_badbuf;data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_const_t){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_const_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(1){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(global_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;switch(5){case 6:memset(data,'A',100-1); data[100-1]='\0'; break;default:memset(data,'A',50-1); data[50-1]='\0'; break;}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_const_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(global_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; {char * data_copy=data;char * data=data_copy;{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(5!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";_snprintf(dest,strlen(data),"%s",data);printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;if(static_const_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";_snprintf(dest,strlen(data),"%s",data);printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;switch(6){case 6:memset(data,'A',50-1); data[50-1]='\0'; break;default:memset(data,'A',100-1); data[100-1]='\0'; break;}{char dest[50]="";strcat(dest,data);printLine(data);}}
void goodG2B(){int h,i;char * data;char data_buf[100];data=data_buf;for(h=0; h < 1; h++){memset(data,'A',50-1); data[50-1]='\0';}for(i=0; i < 0; i++){memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(static_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(static_const_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(global_t){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(global_returns_f()){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; func_ptr(data);}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(static_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(1){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(global_const_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);}}
void goodG2B(){char * data;union_type my_union;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; my_union.a=data;{char * data=my_union.b;{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);}}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(static_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(global_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(static_const_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(global_returns_t()){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; func_ptr(data);}
void goodG2B(){char * data;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; {char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];data=data_buf;if(global_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B(){char * data;char data_buf[100];data=data_buf;while(1){memset(data,'A',50-1); data[50-1]='\0'; break;}while(0){memset(data,'A',100-1); data[100-1]='\0'; break;}{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;switch(5){case 6:memset(data,'A',100-1); data[100-1]='\0'; break;default:memset(data,'A',50-1); data[50-1]='\0'; break;}{char dest[50]="";_snprintf(dest,strlen(data),"%s",data);printLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(1){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(static_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_const_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(static_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_const_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(data);}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(static_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; func_ptr(data);}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(global_const_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;switch(5){case 6:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;default:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;if(5!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}return;wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_returns_t_or_f()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t data_buf[100];data=data_buf;for(h=0; h < 1; h++){wmemset(data,L'A',50-1); data[50-1]=L'\0';}for(i=0; i < 0; i++){wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(static_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(static_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;goto source;wmemset(data,L'A',100-1); data[100-1]=L'\0'; source:wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(5!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(static_const_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;switch(5){case 6:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;default:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}}
void good1(){if(static_returns_f()){{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}}
void good1(){if(global_returns_t_or_f()){{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}}
void good1(){if(global_five!=5){{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}else{{charvoid cv_struct;cv_struct.y=SRC_STR;printWLine((wchar_t *)cv_struct.y);memcpy(cv_struct.x,SRC_STR,sizeof(cv_struct.x));cv_struct.x[(sizeof(cv_struct.x)/sizeof(wchar_t))-1]=L'\0'; printWLine((wchar_t *)cv_struct.x);printWLine((wchar_t *)cv_struct.y);}}}
void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){data=(char *)malloc(100*sizeof(char));data[0]='\0';}else{data=(char *)malloc(50*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);free(data);}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);free(data);}}
void goodG2B2(){char * data;data=NULL;if(global_const_t){data=(char *)malloc(100*sizeof(char));data[0]='\0';}else{data=(char *)malloc(50*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_f){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);free(data);}}
void goodG2B2(){char * data;data=NULL;if(5==5){data=(char *)malloc(100*sizeof(char));data[0]='\0';}else{data=(char *)malloc(50*sizeof(char));data[0]='\0';}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B(){int h,i;char * data;data=NULL;for(h=0; h < 1; h++){data=(char *)malloc(100*sizeof(char));data[0]='\0';}for(i=0; i < 0; i++){data=(char *)malloc(50*sizeof(char));data[0]='\0';}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; func_ptr(data);}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; goodG2B_sink(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);free(data);}}
void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);free(data);}return;data=(char *)malloc(50*sizeof(char));data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(0){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_f){data=(char *)malloc(50*sizeof(char));data[0]='\0';}else{data=(char *)malloc(100*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){data=(char *)malloc(100*sizeof(char));data[0]='\0';}else{data=(char *)malloc(50*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);free(data);}}
void goodG2B(){int h,i;char * data;data=NULL;for(h=0; h < 1; h++){data=(char *)malloc(100*sizeof(char));data[0]='\0';}for(i=0; i < 0; i++){data=(char *)malloc(50*sizeof(char));data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);free(data);}}
void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){int * data;data=NULL;if(static_five!=5){data=(int *)malloc(50*sizeof(int));}else{data=(int *)malloc(100*sizeof(int));}{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);free(data);}}}
void goodG2B(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){int * data;data=NULL;if(global_f){data=(int *)malloc(50*sizeof(int));}else{data=(int *)malloc(100*sizeof(int));}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B2(){int * data;data=NULL;if(global_const_five==5){data=(int *)malloc(100*sizeof(int));}else{data=(int *)malloc(50*sizeof(int));}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_const_t){data=(int *)malloc(100*sizeof(int));}else{data=(int *)malloc(50*sizeof(int));}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));goodG2B_data=data;goodG2B_sink();}
void goodG2B(){long long * data;data=NULL;data=(long long *)malloc(100*sizeof(long long));{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);free(data);}}return;data=(long long *)malloc(50*sizeof(long long));{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);free(data);}}}
void goodG2B2(){long long * data;data=NULL;if(5==5){data=(long long *)malloc(100*sizeof(long long));}else{data=(long long *)malloc(50*sizeof(long long));}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);free(data);}}
void goodG2B1(){long long * data;data=NULL;if(static_returns_f()){data=(long long *)malloc(50*sizeof(long long));}else{data=(long long *)malloc(100*sizeof(long long));}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);free(data);}}
void goodG2B1(){twoints * data;data=NULL;if(global_f){data=(twoints *)malloc(50*sizeof(twoints));}else{data=(twoints *)malloc(100*sizeof(twoints));}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printStructLine(&data[0]);free(data);}}}
void goodG2B(){int h,i;twoints * data;data=NULL;for(h=0; h < 1; h++){data=(twoints *)malloc(100*sizeof(twoints));}for(i=0; i < 0; i++){data=(twoints *)malloc(50*sizeof(twoints));}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}
void goodG2B(){twoints * data;data=NULL;goto source;data=(twoints *)malloc(50*sizeof(twoints));source:data=(twoints *)malloc(100*sizeof(twoints));{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}
void goodG2B1(){twoints * data;data=NULL;if(static_f){data=(twoints *)malloc(50*sizeof(twoints));}else{data=(twoints *)malloc(100*sizeof(twoints));}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}
void goodG2B2(){twoints * data;data=NULL;if(static_t){data=(twoints *)malloc(100*sizeof(twoints));}else{data=(twoints *)malloc(50*sizeof(twoints));}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}
void goodG2B2(){twoints * data;data=NULL;if(static_five==5){data=(twoints *)malloc(100*sizeof(twoints));}else{data=(twoints *)malloc(50*sizeof(twoints));}{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(5!=5){data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; goodG2B_sink(data);}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){wchar_t * data;data=NULL;if(global_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(0){data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(5==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; func_ptr(data);}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_returns_f()){data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;while(1){data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; break;}while(0){data=(wchar_t *)malloc(50*sizeof(wchar_t));data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(static_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);free(data);}}
void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));data=goodG2B_source(data);{char dest[50]="";strcpy(dest,data);printLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(static_const_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B2(){char * data;data=(char *)malloc(100*sizeof(char));if(global_returns_t()){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(global_five!=5){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));data=goodG2B_source(data);{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(static_returns_f()){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(global_const_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; {char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}return;memset(data,'A',100-1); data[100-1]='\0'; {char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){char * data;data=(char *)malloc(100*sizeof(char));if(static_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=(char *)malloc(100*sizeof(char));if(static_const_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(static_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));switch(6){case 6:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;default:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));goto source;wmemset(data,L'A',100-1); data[100-1]=L'\0'; source:wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(5==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_returns_f()){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_returns_f()){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));switch(6){case 6:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;default:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_returns_f()){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0'; func_ptr(data);}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(static_const_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(static_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(static_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));if(static_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);free(data);}}
void goodG2B(){bad_struct data;linked_list head={ &head,&head};data.list.next=head.next;data.list.prev=&head;head.next=&data.list;head.next->prev=&data.list;while(1){; break;}while(0){fgets((char*)&data,sizeof(data),stdin);break;}prev=data.list.prev;next=data.list.next;prev->next=next;next->prev=prev;}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_const_five!=5){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_five!=5){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_const_five!=5){data=data_buf-8;}else{data=data_buf;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_five==5){data=data_buf;}else{data=data_buf-8;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_returns_f()){data=data_buf-8;}else{data=data_buf;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_returns_t()){data=data_buf;}else{data=data_buf-8;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;union_type my_union;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;my_union.a=data;{char * data=my_union.b;{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_returns_f()){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_f){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_returns_t_or_f()){data=data_buf;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';switch(6){case 6:data=data_buf;break;default:data=data_buf-8;break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';while(1){data=data_buf;break;}while(0){data=data_buf-8;break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';switch(5){case 6:data=data_buf-8;break;default:data=data_buf;break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_const_five!=5){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_const_five==5){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_returns_t()){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_five!=5){data=data_buf-8;}else{data=data_buf;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_returns_f()){data=data_buf-8;}else{data=data_buf;}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;goodG2B_sink(data);}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_five==5){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(5==5){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_const_f){data=data_buf-8;}else{data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(1){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_const_t){data=data_buf;}else{data=data_buf-8;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;goodG2B_sink(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(global_five==5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B(){char * data;data=NULL;goto source;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}source:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){char * data;data=NULL;if(static_returns_t()){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(global_t){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(global_const_f){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;union_type my_union;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_union.a=data;{char * data=my_union.b;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(5!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(static_five==5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}break;default:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B(){int h,i;char * data;data=NULL;for(h=0; h < 1; h++){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}for(i=0; i < 0; i++){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_f){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_const_five!=5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_five==5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;data=NULL;while(1){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}break;}while(0){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}break;}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}return;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}func_ptr(data);}
void goodG2B(){int h,i;wchar_t * data;data=NULL;for(h=0; h < 1; h++){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}for(i=0; i < 0; i++){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(1){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;switch(5){case 6:{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}break;default:{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(1){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_returns_t_or_f()){data=data_buf;}else{data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_const_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';switch(6){case 6:data=data_buf;break;default:data=data_buf-8;break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';for(h=0; h < 1; h++){data=data_buf;}for(i=0; i < 0; i++){data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;{wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';{wchar_t * data=*data_ptr1;data=data_buf;*data_ptr1=data;}{wchar_t * data=*data_ptr2;{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(0){data=data_buf-8;}else{data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';while(1){data=data_buf;break;}while(0){data=data_buf-8;break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(0){data=data_buf-8;}else{data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_const_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_five!=5){data=data_buf-8;}else{data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_f){data=data_buf-8;}else{data=data_buf;}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(5!=5){data=data_buf-8;}else{data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_const_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';goto source;data=data_buf-8;source:data=data_buf;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(0){data=data_badbuf;}else{data=data_goodbuf;}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(global_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; {char * data=*data_ptr1;data=data_goodbuf;*data_ptr1=data;}{char * data=*data_ptr2;{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(static_t){data=data_goodbuf;}else{data=data_badbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){int h,i;char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; for(h=0; h < 1; h++){data=data_goodbuf;}for(i=0; i < 0; i++){data=data_badbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(static_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(static_returns_f()){data=data_badbuf;}else{data=data_goodbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; data=data_goodbuf;{char * data_copy=data;char * data=data_copy;{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(5==5){data=data_goodbuf;}else{data=data_badbuf;}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(static_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(global_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(5!=5){data=data_badbuf;}else{data=data_goodbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(global_const_five==5){data=data_goodbuf;}else{data=data_badbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(global_returns_f()){data=data_badbuf;}else{data=data_goodbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_badbuf[50];char data_goodbuf[100];memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; if(global_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_const_five!=5){data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_f){data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){char * data;data=NULL;switch(5){case 6:data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; break;default:data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0'; break;}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}else{data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_five==5){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}else{data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){data=(char *)malloc(50*sizeof(char));memset(data,'A',50-1); data[50-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_f){data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}return;data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_five!=5){data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{data=(wchar_t *)malloc(50*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);free(data);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; switch(5){case 6:data=data_badbuf;break;default:data=data_goodbuf;break;}{size_t i,dest_sz;wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; dest_sz=wcslen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;{wchar_t * data_copy=data;wchar_t * data=data_copy;{size_t i,dest_sz;wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; dest_sz=wcslen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(global_returns_t()){data=data_goodbuf;}else{data=data_badbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(global_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; for(h=0; h < 1; h++){data=data_goodbuf;}for(i=0; i < 0; i++){data=data_badbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;{wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B(){wchar_t * data;union_type my_union;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;my_union.a=data;{wchar_t * data=my_union.b;{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(static_f){data=data_badbuf;}else{data=data_goodbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(static_returns_f()){data=data_badbuf;}else{data=data_goodbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(global_const_five!=5){data=data_badbuf;}else{data=data_goodbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; for(h=0; h < 1; h++){data=data_goodbuf;}for(i=0; i < 0; i++){data=data_badbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(5==5){data=data_goodbuf;}else{data=data_badbuf;}{size_t i,dest_sz;wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; dest_sz=wcslen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;{wchar_t * data_copy=data;wchar_t * data=data_copy;{size_t i,dest_sz;wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; dest_sz=wcslen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; if(static_five==5){data=data_goodbuf;}else{data=data_badbuf;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; while(1){data=data_goodbuf;break;}while(0){data=data_badbuf;break;}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_five==5){data=data_buf;}else{data=data_buf-8;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_const_t){data=data_buf;}else{data=data_buf-8;}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(0){data=data_buf-8;}else{data=data_buf;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(static_returns_t()){data=data_buf;}else{data=data_buf-8;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';{char * data=*data_ptr1;data=data_buf;*data_ptr1=data;}{char * data=*data_ptr2;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}}
void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';while(1){data=data_buf;break;}while(0){data=data_buf-8;break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';while(1){data=data_buf;break;}while(0){data=data_buf-8;break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B(){int h,i;char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';for(h=0; h < 1; h++){data=data_buf;}for(i=0; i < 0; i++){data=data_buf-8;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}return;data=data_buf-8;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;func_ptr(data);}
void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';goto source;data=data_buf-8;source:data=data_buf;{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';{char * data=*data_ptr1;data=data_buf;*data_ptr1=data;}{char * data=*data_ptr2;{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_five!=5){data=data_buf-8;}else{data=data_buf;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';switch(5){case 6:data=data_buf-8;break;default:data=data_buf;break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){int h,i;char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';for(h=0; h < 1; h++){data=data_buf;}for(i=0; i < 0; i++){data=data_buf-8;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_const_f){data=data_buf-8;}else{data=data_buf;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';switch(6){case 6:data=data_buf;break;default:data=data_buf-8;break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';if(global_returns_f()){data=data_buf-8;}else{data=data_buf;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;func_ptr(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(global_const_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B1(){char * data;data=NULL;switch(5){case 6:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}break;default:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(1){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(static_f){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(global_const_five==5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}break;default:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}break;}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;union_type my_union;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_union.a=data;{char * data=my_union.b;{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}}
void goodG2B2(){char * data;data=NULL;if(global_returns_t()){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;switch(5){case 6:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}break;default:{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}return;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(5!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(static_const_f){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(global_t){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}{char * data_copy=data;char * data=data_copy;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}}
void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=NULL;{wchar_t * data=*data_ptr1;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}*data_ptr1=data;}{wchar_t * data=*data_ptr2;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_returns_f()){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}my_union.a=data;{wchar_t * data=my_union.b;{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_t){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_t){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_returns_f()){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;switch(5){case 6:{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}break;default:{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}break;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}{wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(1){data=data_buf;}else{data=data_buf-8;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_const_five==5){data=data_buf;}else{data=data_buf-8;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_returns_t_or_f()){data=data_buf;}else{data=data_buf;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;{wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}}
void goodG2B(){wchar_t * data;union_type my_union;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;my_union.a=data;{wchar_t * data=my_union.b;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_const_t){data=data_buf;}else{data=data_buf-8;}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';switch(5){case 6:data=data_buf-8;break;default:data=data_buf;break;}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}return;data=data_buf-8;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(5==5){data=data_buf;}else{data=data_buf-8;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memmove(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';goto source;data=data_buf-8;source:data=data_buf;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(static_const_f){data=data_buf-8;}else{data=data_buf;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_const_five!=5){data=data_buf-8;}else{data=data_buf;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_const_f){data=data_buf-8;}else{data=data_buf;}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_returns_t_or_f()){data=data_buf;}else{data=data_buf;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';if(global_five!=5){data=data_buf-8;}else{data=data_buf;}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
void goodB2G1(){int data;data=-1; if(5==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(5!=5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(static_t){data=7;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(static_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(static_five==5){data=7;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(static_five==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(static_returns_t()){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(static_returns_f()){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(global_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(global_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; if(global_returns_t_or_f()){data=7;}else{data=7;}if(global_returns_t_or_f()){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B1(){int data;data=-1; if(global_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(global_const_five==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G(){int h,i,j,k;int data;data=-1; for(h=0; h < 0; h++){data=7;}for(i=0; i < 1; i++){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}for(j=0; j < 0; j++){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}for(k=0; k < 1; k++){{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; data=7;{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}return;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodB2G(){int data;data=-1; {char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}goodB2G_sink(data);}
void goodG2B(){int data;data=-1; data=7;goodG2B_sink(data);}
void goodB2G2(){int data;data=-1; if(static_const_five==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(static_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B2(){int data;data=-1; if(global_const_five==5){data=7;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(global_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(global_five==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(global_five!=5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; while(1){data=7;break;}while(0){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}break;}while(1){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;}while(0){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodB2G(){int data;data=-1; {char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}{int data_copy=data;int data=data_copy;{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(1){data=7;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(1){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(static_t){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(static_t){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B1(){int data;data=-1; if(static_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(static_const_five==5){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(static_five==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(static_five!=5){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(global_const_t){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(global_const_t){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodB2G2(){int data;data=-1; if(global_t){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}if(global_t){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B(){int data;data=-1; data=7;goodG2B_data=data;goodG2B_sink();}
void goodG2B(){int data;data=-1; data=7;{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodB2G1(){int data;data=-1; if(static_const_five==5){fscanf(stdin,"%d",&data);}else{data=7;}if(static_const_five!=5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(static_returns_t()){fscanf(stdin,"%d",&data);}else{data=7;}if(static_returns_f()){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(global_five!=5){fscanf(stdin,"%d",&data);}else{data=7;}if(global_five==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G(){int h,i,j,k;int data;data=-1; for(h=0; h < 0; h++){data=7;}for(i=0; i < 1; i++){fscanf(stdin,"%d",&data);}for(j=0; j < 0; j++){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}for(k=0; k < 1; k++){{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; data=goodG2B_source(data);{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodG2B(){int data;data=-1; data=7;goodG2B_data=data;goodG2B_sink();}
void goodG2B(){int data;data=-1; data=7;{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodG2B2(){int data;data=-1; if(5==5){data=7;}else{fscanf(stdin,"%d",&data);}if(5==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(static_const_f){fscanf(stdin,"%d",&data);}else{data=7;}if(static_const_t){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(global_t){fscanf(stdin,"%d",&data);}else{data=7;}if(global_t){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodB2G1(){int data;data=-1; if(static_t){fscanf(stdin,"%d",&data);}else{data=7;}if(static_f){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(static_t){data=7;}else{fscanf(stdin,"%d",&data);}if(static_t){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(static_returns_t()){fscanf(stdin,"%d",&data);}else{data=7;}if(static_returns_t()){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B2(){int data;data=-1; if(global_const_five==5){data=7;}else{fscanf(stdin,"%d",&data);}if(global_const_five==5){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(5==5){data=10;}else{data=7;}if(5!=5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(5==5){data=7;}else{data=10;}if(5==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(global_five==5){data=10;}else{data=7;}if(global_five==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B2(){int data;data=-1; switch(6){case 6:data=7;break;default:data=10;break;}switch(7){case 7:{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;default:{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodB2G(){int data;data=-1; goto source;data=7;source:data=10;goto sink;{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}sink:{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}
void goodG2B(){int data;data=-1; goto source;data=10;source:data=7;goto sink;{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}sink:{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodB2G(){int data;data=-1; data=10;goodB2G_sink(data);}
void goodB2G2(){int data;data=-1; if(1){data=10;}else{data=7;}if(1){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B2(){int data;data=-1; if(static_t){data=7;}else{data=10;}if(static_t){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(static_const_five==5){data=10;}else{data=7;}if(static_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B1(){int data;data=-1; if(static_const_five!=5){data=10;}else{data=7;}if(static_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(global_const_five==5){data=10;}else{data=7;}if(global_const_five!=5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(global_const_five!=5){data=10;}else{data=7;}if(global_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G1(){int data;data=-1; if(global_five==5){data=10;}else{data=7;}if(global_five!=5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(global_five==5){data=7;}else{data=10;}if(global_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; while(1){data=7;break;}while(0){data=10;break;}while(1){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;}while(0){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodB2G1(){int data;data=-1; if(global_const_t){data=10;}else{data=7;}if(global_const_f){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(global_f){data=10;}else{data=7;}if(global_t){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B2(){int data;data=-1; if(global_const_five==5){data=7;}else{data=10;}if(global_const_five==5){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B(){int data;data=-1; data=goodG2B_source(data);{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
void goodG2B1(){int data;data=-1; if(static_const_f){data=RAND32();}else{data=7;}if(static_const_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(static_five==5){data=RAND32();}else{data=7;}if(static_five==5){{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B1(){int data;data=-1; if(global_const_f){data=RAND32();}else{data=7;}if(global_const_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(global_t){data=RAND32();}else{data=7;}if(global_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B2(){int data;data=-1; if(global_t){data=7;}else{data=RAND32();}if(global_t){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G(){int data;data=-1; data=RAND32();goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){int data;data=-1; if(static_f){data=RAND32();}else{data=7;}if(static_t){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodG2B1(){int data;data=-1; if(global_returns_f()){data=RAND32();}else{data=7;}if(global_returns_t()){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G2(){int data;data=-1; if(global_const_five==5){data=RAND32();}else{data=7;}if(global_const_five==5){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}else{{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodB2G1(){int data;data=-1; switch(6){case 6:data=RAND32();break;default:data=7;break;}switch(8){case 7:{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;default:{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodB2G(){int h,i,j,k;int data;data=-1; for(h=0; h < 0; h++){data=7;}for(i=0; i < 1; i++){data=RAND32();}for(j=0; j < 0; j++){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}for(k=0; k < 1; k++){{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0&&data < 10){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}}
void goodB2G(){int data;data=-1; data=RAND32();{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}
void goodG2B1(){int data;data=-1; switch(5){case 6:data=RAND32();break;default:data=7;break;}switch(7){case 7:{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;default:{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodG2B(){int data;data=-1; while(1){data=7;break;}while(0){data=RAND32();break;}while(1){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}break;}while(0){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}break;}}
void goodG2B(){int data;data=-1; data=7;{int data_copy=data;int data=data_copy;{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){data=(char *)malloc(10*sizeof(char));}else{data=(char *)malloc((10+1)*sizeof(char));}{char data_src[10+1]=SRC_STRING;strcpy(data,data_src);printLine(data);free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_returns_t()){data=(char *)malloc((10+1)*sizeof(char));}else{data=(char *)malloc(10*sizeof(char));}{char data_src[10+1]=SRC_STRING;size_t i,src_len;src_len=strlen(data_src);for(i=0; i < src_len; i++){data[i]=data_src[i];}data[strlen(data_src)]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=(char *)malloc((10+1)*sizeof(char));func_ptr(data);}
void goodG2B2(){char * data;data=NULL;if(global_const_five==5){data=(char *)malloc((10+1)*sizeof(char));}else{data=(char *)malloc(10*sizeof(char));}{char data_src[10+1]=SRC_STRING;memcpy(data,data_src,strlen(data_src)*sizeof(char));data[strlen(data_src)]='\0'; printLine(data);free(data);}}
void goodG2B(){char * data;union_type my_union;data=NULL;data=(char *)malloc((10+1)*sizeof(char));my_union.a=data;{char * data=my_union.b;{char data_src[10+1]=SRC_STRING;memcpy(data,data_src,strlen(data_src)*sizeof(char));data[strlen(data_src)]='\0'; printLine(data);free(data);}}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=(char *)malloc((10+1)*sizeof(char));func_ptr(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=(char *)malloc(10*sizeof(char));}else{data=(char *)malloc((10+1)*sizeof(char));}{char data_src[10+1]=SRC_STRING;memmove(data,data_src,strlen(data_src)*sizeof(char));data[strlen(data_src)]='\0'; printLine(data);free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_const_f){data=(char *)malloc(10*sizeof(char));}else{data=(char *)malloc((10+1)*sizeof(char));}{char data_src[10+1]=SRC_STRING;strncpy(data,data_src,strlen(data_src));data[strlen(data_src)]='\0'; printLine(data);free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_five==5){data=(int *)malloc(10*sizeof(int));}else{data=(int *)malloc(10);}{int data_src[10]={0};size_t i;for(i=0; i < 10; i++){data[i]=data_src[i];}printIntLine(data[0]);free(data);}}
void goodG2B(){int * data;data=NULL;data=(int *)malloc(10*sizeof(int));{int * data_copy=data;int * data=data_copy;{int data_src[10]={0};size_t i;for(i=0; i < 10; i++){data[i]=data_src[i];}printIntLine(data[0]);free(data);}}}
void goodG2B1(){int * data;data=NULL;if(static_const_f){data=(int *)malloc(10);}else{data=(int *)malloc(10*sizeof(int));}{int data_src[10]={0};memcpy(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_t){data=(int *)malloc(10*sizeof(int));}else{data=(int *)malloc(10);}{int data_src[10]={0};memcpy(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B1(){int * data;data=NULL;switch(5){case 6:data=(int *)malloc(10);break;default:data=(int *)malloc(10*sizeof(int));break;}{int data_src[10]={0};memcpy(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B2(){int * data;data=NULL;if(5==5){data=(int *)malloc(10*sizeof(int));}else{data=(int *)malloc(10);}{int data_src[10]={0};memmove(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B1(){int * data;data=NULL;if(global_returns_f()){data=(int *)malloc(10);}else{data=(int *)malloc(10*sizeof(int));}{int data_src[10]={0};memmove(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B1(){int * data;data=NULL;switch(5){case 6:data=(int *)malloc(10);break;default:data=(int *)malloc(10*sizeof(int));break;}{int data_src[10]={0};memmove(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));my_union.a=data;{wchar_t * data=my_union.b;{wchar_t data_src[10+1]=SRC_STRING;wcscpy(data,data_src);printWLine(data);free(data);}}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));}else{data=(wchar_t *)malloc(10*sizeof(wchar_t));}{wchar_t data_src[10+1]=SRC_STRING;size_t i,src_len;src_len=wcslen(data_src);for(i=0; i < src_len; i++){data[i]=data_src[i];}data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;goto source;data=(wchar_t *)malloc(10*sizeof(wchar_t));source:data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));{wchar_t data_src[10+1]=SRC_STRING;size_t i,src_len;src_len=wcslen(data_src);for(i=0; i < src_len; i++){data[i]=data_src[i];}data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(5!=5){data=(wchar_t *)malloc(10*sizeof(wchar_t));}else{data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));}{wchar_t data_src[10+1]=SRC_STRING;memmove(data,data_src,wcslen(data_src)*sizeof(wchar_t));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_t){data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));}else{data=(wchar_t *)malloc(10*sizeof(wchar_t));}{wchar_t data_src[10+1]=SRC_STRING;memmove(data,data_src,wcslen(data_src)*sizeof(wchar_t));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_five==5){data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));}else{data=(wchar_t *)malloc(10*sizeof(wchar_t));}{wchar_t data_src[10+1]=SRC_STRING;memmove(data,data_src,wcslen(data_src)*sizeof(wchar_t));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_five==5){data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));}else{data=(wchar_t *)malloc(10*sizeof(wchar_t));}{wchar_t data_src[10+1]=SRC_STRING;wcsncpy(data,data_src,wcslen(data_src));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodG2B(){wchar_t * data;data=NULL;while(1){data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));break;}while(0){data=(wchar_t *)malloc(10*sizeof(wchar_t));break;}{wchar_t data_src[10+1]=SRC_STRING;wcsncpy(data,data_src,wcslen(data_src));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_t()){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(static_returns_f()){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}if(global_const_t){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(global_const_five==5){fprintf(stdout,"%s\n",data);}else{fprintf(stdout,data);}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_five==5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(global_five!=5){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}goodB2G_data=data;goodB2G_sink();}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_t){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(static_const_t){printf("%s\n",data);}else{printf(data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}if(global_returns_t()){printf(data);}else{printf("%s\n",data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;strcpy(data,"fixedstringtest");*data_ptr1=data;}{char * data=*data_ptr2;printf(data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(1){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(1){{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(static_const_five!=5){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(global_const_t){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}if(global_const_t){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;default:strcpy(data,"fixedstringtest");break;}switch(7){case 7:goodB2G2_vasinkg(data,data);break;default:goodB2G2_vasinkb(data,data);break;}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(1){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(0){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(global_t){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B(){int h,i,j,k;char * data;char data_buf[100]="";data=data_buf;for(h=0; h < 1; h++){strcpy(data,"fixedstringtest");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}for(j=0; j < 1; j++){goodG2B_vasinkb(data,data);}for(k=0; k < 0; k++){goodG2B_vasinkg(data,data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_vasinkb(data,data);return;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}goodG2B_vasinkb(data,data);}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"fixedstringtest");}if(global_const_f){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodB2G(){char * data;union_type my_union;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}my_union.a=data;{char * data=my_union.b;goodB2G_vasink(data,data);}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_t){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(static_const_f){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(static_const_five==5){fprintf(stdout,"%s\n",data);}else{fprintf(stdout,data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(static_const_five==5){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(global_returns_t()){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;while(0){strcpy(data,"fixedstringtest");break;}while(1){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}break;}while(0){fprintf(stdout,data);break;}while(1){fprintf(stdout,"%s\n",data);break;}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(1){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(1){printf(data);}else{printf("%s\n",data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_f){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(static_t){printf(data);}else{printf("%s\n",data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_f){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(global_const_t){printf(data);}else{printf("%s\n",data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;strcpy(data,"fixedstringtest");*data_ptr1=data;}{char * data=*data_ptr2;printf(data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(global_const_five==5){{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}{char * data_copy=data;char * data=data_copy;{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(static_const_five==5){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B(){int h,i,j,k;char * data;char data_buf[100]="";data=data_buf;for(h=0; h < 1; h++){strcpy(data,"fixedstringtest");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}for(j=0; j < 1; j++){goodG2B_vasinkb(data,data);}for(k=0; k < 0; k++){goodG2B_vasinkg(data,data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;goto source;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}source:strcpy(data,"fixedstringtest");goto sink;goodG2B_vasinkg(data,data);sink:goodG2B_vasinkb(data,data);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");{char * data_copy=data;char * data=data_copy;goodG2B_vasink(data,data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(1){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(1){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(global_const_five==5){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_five==5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(global_five!=5){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");{char * data_copy=data;char * data=data_copy;goodG2B_vasink(data,data);}}
void goodB2G(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}*data_ptr1=data;}{char * data=*data_ptr2;goodB2G_vasink(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five!=5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"fixedstringtest");}if(static_const_five==5){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(data);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_five==5){fprintf(stdout,data);}else{fprintf(stdout,"%s\n",data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;strcpy(data,"fixedstringtest");*data_ptr1=data;}{char * data=*data_ptr2;fprintf(stdout,data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(5==5){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(5==5){printf(data);}else{printf("%s\n",data);}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_returns_t_or_f()){printf("%s\n",data);}else{printf("%s\n",data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(data);}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(static_const_t){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){strcpy(data,"fixedstringtest");}else{strcpy(data,"fixedstringtest");}if(global_returns_t_or_f()){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_const_five!=5){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_const_five==5){{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}else{{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:strcpy(data,"fixedstringtest");break;default:{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;}switch(7){case 7:{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}break;default:{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}break;}}
void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}func_ptr(data);}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_t){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(static_t){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(static_const_five==5){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_t){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){strcpy(data,"fixedstringtest");}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_returns_t()){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);goodG2B_vasink(data,data);}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_t){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(static_f){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodB2G(){char * data;void(*func_ptr)(char *,...)=goodB2G_vasink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}func_ptr(data);}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_t()){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(static_returns_f()){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_t){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"fixedstringtest");}if(global_five==5){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);goodB2G_vasink(data,data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_five==5){fwprintf(stdout,data);}else{fwprintf(stdout,L"%s\n",data);}}
void goodG2B(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 1; h++){wcscpy(data,L"fixedstringtest");}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}for(j=0; j < 1; j++){fwprintf(stdout,data);}for(k=0; k < 0; k++){fwprintf(stdout,L"%s\n",data);}}
void goodB2G(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}my_union.a=data;{wchar_t * data=my_union.b;fwprintf(stdout,L"%s\n",data);}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_five==5){wprintf(L"%s\n",data);}else{wprintf(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);wprintf(data);}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(0){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_t){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_t){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}if(global_const_t){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five==5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_five!=5){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_f()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_returns_t()){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;while(1){wcscpy(data,L"fixedstringtest");break;}while(0){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;}while(1){goodG2B_vasinkb(data,data);break;}while(0){goodG2B_vasinkg(data,data);break;}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}goodB2G_vasink(data,data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_five==5){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_const_five==5){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;while(0){wcscpy(data,L"fixedstringtest");break;}while(1){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;}while(0){goodB2G_vasinkb(data,data);break;}while(1){goodB2G_vasinkg(data,data);break;}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(0){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_t){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_const_t){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_t){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"fixedstringtest");}if(global_returns_t()){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five!=5){fwprintf(stdout,data);}else{fwprintf(stdout,L"%s\n",data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five==5){fwprintf(stdout,L"%s\n",data);}else{fwprintf(stdout,data);}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;default:wcscpy(data,L"fixedstringtest");break;}switch(8){case 7:fwprintf(stdout,data);break;default:fwprintf(stdout,L"%s\n",data);break;}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;goto source;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}source:wcscpy(data,L"fixedstringtest");goto sink;fwprintf(stdout,L"%s\n",data);sink:fwprintf(stdout,data);}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}{wchar_t * data_copy=data;wchar_t * data=data_copy;fwprintf(stdout,L"%s\n",data);}}
void goodG2B(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 1; h++){wcscpy(data,L"fixedstringtest");}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}for(j=0; j < 1; j++){wprintf(data);}for(k=0; k < 0; k++){wprintf(L"%s\n",data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(static_const_t){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_t()){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(static_returns_f()){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(static_returns_t()){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(global_t){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t_or_f()){wcscpy(data,L"fixedstringtest");}else{wcscpy(data,L"fixedstringtest");}if(global_returns_t_or_f()){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(global_const_five==5){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(0){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(1){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_f()){wcscpy(data,L"fixedstringtest");}else{wcscpy(data,L"fixedstringtest");}if(global_returns_t()){goodG2B_vasinkb(data,data);}else{goodG2B_vasinkb(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(global_five==5){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:wcscpy(data,L"fixedstringtest");break;default:{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;}switch(7){case 7:goodG2B2_vasinkb(data,data);break;default:goodG2B2_vasinkg(data,data);break;}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}goodB2G_vasinkg(data,data);return;goodB2G_vasinkb(data,data);}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}{wchar_t * data_copy=data;wchar_t * data=data_copy;goodB2G_vasink(data,data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five==5){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(5){case 6:{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;default:wcscpy(data,L"fixedstringtest");break;}switch(7){case 7:goodG2B1_vasinkb(data,data);break;default:goodG2B1_vasinkg(data,data);break;}}
void goodB2G(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 0; h++){wcscpy(data,L"fixedstringtest");}for(i=0; i < 1; i++){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}for(j=0; j < 0; j++){goodB2G_vasinkb(data,data);}for(k=0; k < 1; k++){goodB2G_vasinkg(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(5==5){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_t()){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(static_returns_t()){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}fwprintf(stdout,L"%s\n",data);}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(static_const_five==5){fwprintf(stdout,L"%s\n",data);}else{fwprintf(stdout,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_t){fwprintf(stdout,data);}else{fwprintf(stdout,L"%s\n",data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_five==5){fwprintf(stdout,L"%s\n",data);}else{fwprintf(stdout,data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");{wchar_t * data_copy=data;wchar_t * data=data_copy;fwprintf(stdout,data);}}
void goodB2G(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodB2G_sink;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}func_ptr(data);}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five==5){wprintf(L"%s\n",data);}else{wprintf(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_f()){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_returns_t()){wprintf(data);}else{wprintf(L"%s\n",data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");func_ptr(data);}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(1){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(static_const_five==5){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five!=5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five==5){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_f){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_const_t){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}else{{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,L"%s",data);printWLine(dest);}}}
void goodG2B(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");my_union.a=data;{wchar_t * data=my_union.b;{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}goodB2G_vasink(data,data);}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(0){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;wcscpy(data,L"fixedstringtest");*data_ptr1=data;}{wchar_t * data=*data_ptr2;goodG2B_vasink(data,data);}}
void goodB2G(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}*data_ptr1=data;}{wchar_t * data=*data_ptr2;goodB2G_vasink(data,data);}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodB2G_source(data);goodB2G_vasink(data,data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(static_five==5){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_t){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_const_f){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_f){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_t){goodG2B1_vasinkb(data,data);}else{goodG2B1_vasinkg(data,data);}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(global_f){goodB2G1_vasinkb(data,data);}else{goodB2G1_vasinkg(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_five==5){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 1; h++){wcscpy(data,L"fixedstringtest");}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}for(j=0; j < 1; j++){goodG2B_vasinkb(data,data);}for(k=0; k < 0; k++){goodG2B_vasinkg(data,data);}}
void goodB2G(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 0; h++){wcscpy(data,L"fixedstringtest");}for(i=0; i < 1; i++){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}for(j=0; j < 0; j++){goodB2G_vasinkb(data,data);}for(k=0; k < 1; k++){goodB2G_vasinkg(data,data);}}
void goodB2G(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}my_union.a=data;{wchar_t * data=my_union.b;goodB2G_vasink(data,data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_vasink(data,data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(1){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"fixedstringtest");}if(static_five==5){goodB2G2_vasinkg(data,data);}else{goodB2G2_vasinkb(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_t){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_const_t){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){wcscpy(data,L"fixedstringtest");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_t){goodG2B2_vasinkb(data,data);}else{goodG2B2_vasinkg(data,data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);wprintf(data);}
void goodB2G2(){void * data;data=NULL;if(static_t){data=WIDE_STRING;}else{data=CHAR_STRING;}if(static_t){{size_t data_len=wcslen((wchar_t *)data);void * data_dest=(void *)calloc(data_len+1,sizeof(wchar_t));memcpy(data_dest,data,(data_len+1)*sizeof(wchar_t));printWLine((wchar_t *)data_dest);free(data_dest);}}else{{size_t data_len=strlen((char *)data);void * data_dest=(void *)calloc(data_len+1,1);memcpy(data_dest,data,(data_len+1));printLine((char *)data_dest);free(data_dest);}}}
void goodG2B1(){void * data;data=NULL;if(static_const_five!=5){data=WIDE_STRING;}else{data=CHAR_STRING;}if(static_const_five==5){{size_t data_len=strlen((char *)data);void * data_dest=(void *)calloc(data_len+1,1);memcpy(data_dest,data,(data_len+1));printLine((char *)data_dest);free(data_dest);}}else{{size_t data_len=wcslen((wchar_t *)data);void * data_dest=(void *)calloc(data_len+1,sizeof(wchar_t));memcpy(data_dest,data,(data_len+1)*sizeof(wchar_t));printWLine((wchar_t *)data_dest);free(data_dest);}}}
void goodG2B1(){void * data;data=NULL;switch(5){case 6:data=WIDE_STRING;break;default:data=CHAR_STRING;break;}switch(7){case 7:{size_t data_len=strlen((char *)data);void * data_dest=(void *)calloc(data_len+1,1);memcpy(data_dest,data,(data_len+1));printLine((char *)data_dest);free(data_dest);}break;default:{size_t data_len=wcslen((wchar_t *)data);void * data_dest=(void *)calloc(data_len+1,sizeof(wchar_t));memcpy(data_dest,data,(data_len+1)*sizeof(wchar_t));printWLine((wchar_t *)data_dest);free(data_dest);}break;}}
void goodB2G(){void * data;void(*func_ptr)(void *)=goodB2G_sink;data=NULL;data=WIDE_STRING;func_ptr(data);}
void good1(){if(static_five!=5){{char src[150],dest[100];int i;memset(src,'A',149);src[149]='\0';for(i=0; i < 100; i++){dest[i]=src[i];}printLine(dest);}}else{{char src[150],dest[100];int i;memset(src,'A',149);src[149]='\0';for(i=0; i < 100; i++){dest[i]=src[i];}dest[99]='\0'; printLine(dest);}}}
void good2(){if(static_t){{char data[150],dest[100];memset(data,'A',149);data[149]='\0';memcpy(dest,data,100*sizeof(char));dest[99]='\0'; printLine(dest);}}else{{char data[150],dest[100];memset(data,'A',149);data[149]='\0';memcpy(dest,data,100*sizeof(char));printLine(dest);}}}
void good2(){if(1){{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);dest[99]='\0'; printLine(dest);}}else{{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);printLine(dest);}}}
void good1(){int j,k;for(j=0; j < 0; j++){{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);printLine(dest);}}for(k=0; k < 1; k++){{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);dest[99]='\0'; printLine(dest);}}}
void good1(){{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);dest[99]='\0'; printLine(dest);}return;{char data[150],dest[100];memset(data,'A',149);data[149]='\0';strncpy(dest,data,100);printLine(dest);}}
void good1(){switch(5){case 6:{wchar_t src[150],dest[100];int i;wmemset(src,L'A',149);src[149]=L'\0';for(i=0; i < 100; i++){dest[i]=src[i];}printWLine(dest);}break;default:{wchar_t src[150],dest[100];int i;wmemset(src,L'A',149);src[149]=L'\0';for(i=0; i < 100; i++){dest[i]=src[i];}dest[99]=L'\0'; printWLine(dest);}}}
void good1(){if(0){{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';memcpy(dest,data,100*sizeof(wchar_t));printWLine(dest);}}else{{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';memcpy(dest,data,100*sizeof(wchar_t));dest[99]=L'\0'; printWLine(dest);}}}
void good2(){switch(6){case 6:{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';memcpy(dest,data,100*sizeof(wchar_t));dest[99]=L'\0'; printWLine(dest);}break;default:{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';memcpy(dest,data,100*sizeof(wchar_t));printWLine(dest);}}}
void good1(){int j,k;for(j=0; j < 0; j++){{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';wcsncpy(dest,data,100);printWLine(dest);}}for(k=0; k < 1; k++){{wchar_t data[150],dest[100];wmemset(data,L'A',149);data[149]=L'\0';wcsncpy(dest,data,100);dest[99]=L'\0'; printWLine(dest);}}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:data=PASSWORD;break;default:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;}switch(7){case 7:if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");break;default:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;while(0){data=PASSWORD;break;}while(1){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;}while(0){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");break;}while(1){if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){data=PASSWORD;}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}if(global_const_t){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(global_const_five!=5){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}{char * data_copy=data;char * data=data_copy;if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(0){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(1){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five!=5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(global_const_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){data=PASSWORD;}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}if(global_const_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_five==5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(global_five!=5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(5!=5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{data=PASSWORD;}if(5==5){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){data=PASSWORD;}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(static_const_five==5){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_five==5){data=PASSWORD;}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(static_five==5){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){data=PASSWORD;}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(global_const_t){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");return;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(0){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{data=PASSWORD;}if(1){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_t){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{data=PASSWORD;}if(static_const_f){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){data=PASSWORD;}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}if(global_const_t){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{data=PASSWORD;}if(global_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(1){data=PASSWORD;}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(1){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(5==5){data=PASSWORD;}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(5==5){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_t){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(static_f){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){data=PASSWORD;}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_returns_t()){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;default:data=PASSWORD;break;}switch(7){case 7:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;default:if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;goto source;data=PASSWORD;source:{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}goto sink;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");sink:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}*data_ptr1=data;}{char * data=*data_ptr2;if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){char * data;union_type my_union;char data_buf[100]="";data=data_buf;data=PASSWORD;my_union.a=data;{char * data=my_union.b;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_t){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(static_t){if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_five==5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(global_five!=5){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){char * data;union_type my_union;char data_buf[100]="";data=data_buf;data=PASSWORD;my_union.a=data;{char * data=my_union.b;if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(5==5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(5!=5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){data=PASSWORD;}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(static_const_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_five==5){data=PASSWORD;}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(static_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(global_returns_f()){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){data=PASSWORD;}else{data=PASSWORD;}if(global_returns_t_or_f()){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(global_const_five==5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;goto source;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}source:data=PASSWORD;goto sink;if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");sink:if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_five==5){data="P";}else{data=PASSWORD;}if(static_five==5){if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){data=PASSWORD;}else{data="P";}if(global_const_five==5){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;goto source;data=PASSWORD;source:data="P";goto sink;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");sink:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");return;data="P";if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B(){char * data;union_type my_union;char data_buf[100]="";data=data_buf;data=PASSWORD;my_union.a=data;{char * data=my_union.b;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data="P";goodB2G_data=data;goodB2G_sink();}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_t){data=PASSWORD;}else{data="P";}if(static_t){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){data="P";}else{data=PASSWORD;}if(static_const_five==5){if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){data=PASSWORD;}else{data="P";}if(global_const_t){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:data="P";break;default:data=PASSWORD;break;}switch(7){case 7:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;default:if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]="";data=data_buf;{char * data=*data_ptr1;data="P";*data_ptr1=data;}{char * data=*data_ptr2;if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(0){data="P";}else{data=PASSWORD;}if(1){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(static_five==5){data="P";}else{data=PASSWORD;}if(static_five!=5){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_t()){data="P";}else{data=PASSWORD;}if(static_returns_t()){if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:data="P";break;default:data=PASSWORD;break;}switch(8){case 7:if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");break;default:if(strcmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;char data_buf[100]="";data=data_buf;data="P";func_ptr(data);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_data=data;goodG2B_sink();}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_five==5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(static_five==5){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five==5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(global_const_five==5){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){int h,i,j,k;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 1; h++){data=PASSWORD;}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}for(j=0; j < 1; j++){if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}for(k=0; k < 0; k++){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}*data_ptr1=data;}{wchar_t * data=*data_ptr2;if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(static_const_t){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_t){data=PASSWORD;}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}if(global_const_t){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(global_t){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}*data_ptr1=data;}{wchar_t * data=*data_ptr2;if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5==5){data=PASSWORD;}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}if(5==5){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five==5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{data=PASSWORD;}if(static_const_five==5){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){data=PASSWORD;}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}if(global_returns_t()){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}*data_ptr1=data;}{wchar_t * data=*data_ptr2;if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){data=PASSWORD;}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}if(static_const_t){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five!=5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{data=PASSWORD;}if(static_const_five==5){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}my_union.a=data;{wchar_t * data=my_union.b;if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{data=PASSWORD;}if(1){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(0){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{data=PASSWORD;}if(1){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_f){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{data=PASSWORD;}if(static_const_t){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{data=PASSWORD;}if(static_returns_t()){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(static_const_f){if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_t()){data=PASSWORD;}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(static_returns_t()){if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){data=PASSWORD;}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(global_returns_t()){if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){data=PASSWORD;}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}if(1){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;default:data=PASSWORD;break;}switch(7){case 7:if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;default:if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");return;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(0){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{data=PASSWORD;}if(static_t){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");return;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){data=PASSWORD;}else{data=L"P";}if(1){if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){data=L"P";}else{data=PASSWORD;}if(global_t){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){data=L"P";}else{data=PASSWORD;}if(global_returns_t()){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:data=L"P";break;default:data=PASSWORD;break;}switch(8){case 7:if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");break;default:if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");break;}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;goto source;data=PASSWORD;source:data=L"P";goto sink;if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");sink:if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){data=L"P";}else{data=PASSWORD;}if(static_const_f){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_f){data=L"P";}else{data=PASSWORD;}if(static_const_t){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_five!=5){data=L"P";}else{data=PASSWORD;}if(static_const_five==5){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){data=L"P";}else{data=PASSWORD;}if(static_f){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){data=PASSWORD;}else{data=L"P";}if(static_t){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){data=L"P";}else{data=PASSWORD;}if(global_t){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){data=L"P";}else{data=PASSWORD;}if(global_five==5){if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five==5){data=PASSWORD;}else{data=L"P";}if(global_five==5){if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}else{if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=L"P";goodB2G_data=data;goodB2G_sink();}
void good2(){if(static_five==5){{long l;l=0x10203040;l |= LONG_MIN;printIntLine(l);}}else{{union{struct{char a,b,c,d;} s;long l;} u;u.l=0x10203040;u.s.d |= 0x80; printIntLine(u.l);}}}
void good1(){if(global_const_f){{union{struct{char a,b,c,d;} s;long l;} u;u.l=0x10203040;u.s.d |= 0x80; printIntLine(u.l);}}else{{long l;l=0x10203040;l |= LONG_MIN;printIntLine(l);}}}
void goodG2B(){char data;data=' ';data=5;{char result=data+1;printHexCharLine(result);}}
void goodG2B2(){char data;data=' ';if(global_five==5){data=5;}else{data=CHAR_MAX;}if(global_five==5){{char result=data+1;printHexCharLine(result);}}else{{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';data=CHAR_MAX;{char data_copy=data;char data=data_copy;{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;void(*func_ptr)(char)=goodB2G_sink;data=' ';data=CHAR_MAX;func_ptr(data);}
void goodB2G2(){char data;data=' ';if(5==5){data=CHAR_MAX;}else{data=5;}if(5==5){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(static_t){data=CHAR_MAX;}else{data=5;}if(static_t){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(static_const_five==5){data=CHAR_MAX;}else{data=5;}if(static_const_five==5){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(static_returns_t()){data=CHAR_MAX;}else{data=5;}if(static_returns_t()){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';if(global_t){data=CHAR_MAX;}else{data=5;}if(global_f){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){char data;data=' ';if(global_returns_t_or_f()){data=5;}else{data=5;}if(global_returns_t_or_f()){{char result=data * 2;printHexCharLine(result);}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(global_const_five==5){data=CHAR_MAX;}else{data=5;}if(global_const_five==5){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';switch(6){case 6:data=CHAR_MAX;break;default:data=5;break;}switch(8){case 7:{char result=data * 2;printHexCharLine(result);}break;default:{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G2(){char data;data=' ';switch(6){case 6:data=CHAR_MAX;break;default:data=5;break;}switch(7){case 7:{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;default:{char result=data * 2;printHexCharLine(result);}break;}}
void goodG2B1(){char data;data=' ';if(5!=5){data=CHAR_MAX;}else{data=5;}if(5==5){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){char data;data=' ';if(5==5){data=5;}else{data=CHAR_MAX;}if(5==5){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(static_const_t){data=CHAR_MAX;}else{data=5;}if(static_const_t){{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * data;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(global_returns_t()){data=CHAR_MAX;}else{data=5;}if(global_returns_t()){{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * data;printHexCharLine(result);}}}
void goodG2B2(){char data;data=' ';if(global_returns_t()){data=5;}else{data=CHAR_MAX;}if(global_returns_t()){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';data=CHAR_MAX;{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}return;{char result=data * data;printHexCharLine(result);}}
void goodB2G2(){char data;data=' ';if(1){fscanf(stdin,"%c",&data);}else{data=5;}if(1){{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data+1;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';if(global_const_t){fscanf(stdin,"%c",&data);}else{data=5;}if(global_const_f){{char result=data+1;printHexCharLine(result);}}else{{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(global_const_f){fscanf(stdin,"%c",&data);}else{data=5;}if(global_const_t){{char result=data+1;printHexCharLine(result);}}else{{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';fscanf(stdin,"%c",&data);goodB2G_data=data;goodB2G_sink();}
void goodB2G2(){char data;data=' ';if(static_const_t){fscanf(stdin,"%c",&data);}else{data=5;}if(static_const_t){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';if(static_five==5){fscanf(stdin,"%c",&data);}else{data=5;}if(static_five!=5){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(global_const_t){fscanf(stdin,"%c",&data);}else{data=5;}if(global_const_f){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';switch(5){case 6:fscanf(stdin,"%c",&data);break;default:data=5;break;}switch(7){case 7:{char result=data * 2;printHexCharLine(result);}break;default:{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodG2B(){char data;data=' ';data=5;goodG2B_sink(data);}
void goodB2G(){char data;data=' ';data=goodB2G_source(data);{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void goodB2G1(){char data;data=' ';if(static_five==5){fscanf(stdin,"%c",&data);}else{data=5;}if(static_five!=5){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(global_f){fscanf(stdin,"%c",&data);}else{data=5;}if(global_t){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(global_const_five==5){fscanf(stdin,"%c",&data);}else{data=5;}if(global_const_five==5){{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * data;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';if(global_five==5){fscanf(stdin,"%c",&data);}else{data=5;}if(global_five==5){{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * data;printHexCharLine(result);}}}
void goodB2G2(){char data;data=' ';switch(6){case 6:fscanf(stdin,"%c",&data);break;default:data=5;break;}switch(7){case 7:{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;default:{char result=data * data;printHexCharLine(result);}break;}}
void goodG2B(){char data;data=' ';goto source;fscanf(stdin,"%c",&data);source:data=5;goto sink;{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}sink:{char result=data * data;printHexCharLine(result);}}
void goodG2B1(){char data;data=' ';if(static_const_five!=5){data=(char)rand();}else{data=5;}if(static_const_five==5){{char result=data+1;printHexCharLine(result);}}else{{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(global_const_t){data=(char)rand();}else{data=5;}if(global_const_t){{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data+1;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';if(global_const_five==5){data=(char)rand();}else{data=5;}if(global_const_five!=5){{char result=data+1;printHexCharLine(result);}}else{{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';while(0){data=5;break;}while(1){data=(char)rand();break;}while(0){{char result=data+1;printHexCharLine(result);}break;}while(1){{char result=-1;if(data < CHAR_MAX){result=data+1;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodG2B2(){char data;data=' ';if(1){data=5;}else{data=(char)rand();}if(1){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){char data;data=' ';if(5==5){data=5;}else{data=(char)rand();}if(5==5){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){char data;data=' ';if(static_returns_t()){data=5;}else{data=(char)rand();}if(static_returns_t()){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(global_t){data=(char)rand();}else{data=5;}if(global_t){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=data * 2;printHexCharLine(result);}}}
void goodG2B2(){char data;data=' ';if(global_t){data=5;}else{data=(char)rand();}if(global_t){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(global_returns_t()){data=(char)rand();}else{data=5;}if(global_returns_f()){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';if(global_returns_t_or_f()){data=(char)rand();}else{data=(char)rand();}if(global_returns_t_or_f()){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(global_five!=5){data=(char)rand();}else{data=5;}if(global_five==5){{char result=data * 2;printHexCharLine(result);}}else{{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){char data;data=' ';while(1){data=5;break;}while(0){data=(char)rand();break;}while(1){{char result=data * 2;printHexCharLine(result);}break;}while(0){{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G(){char data;data=' ';data=(char)rand();{char data_copy=data;char data=data_copy;{char result=-1;if(data <=(CHAR_MAX/2)){result=data * 2;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(global_returns_t()){data=(char)rand();}else{data=5;}if(global_returns_f()){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){char data;data=' ';if(global_returns_t()){data=5;}else{data=(char)rand();}if(global_returns_t()){{char result=data * data;printHexCharLine(result);}}else{{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';data=(char)rand();{char data_copy=data;char data=data_copy;{char result=-1;if(data <=(char)sqrt((char)CHAR_MAX)){result=data * data;printHexCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){char data;data=' ';data=goodG2B_source(data);{char result=data * data;printHexCharLine(result);}}
void goodG2B(){char data;void(*func_ptr)(char)=goodG2B_sink;data=' ';data=5;func_ptr(data);}
void goodB2G(){int data;data=-1;data=goodB2G_source(data);{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void goodG2B2(){int data;data=-1;if(static_const_t){data=5;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(static_const_t){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(global_const_five==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(global_const_five==5){{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data+1;printIntLine(result);}}}
void goodB2G2(){int data;data=-1;if(global_five==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(global_five==5){{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data+1;printIntLine(result);}}}
void goodG2B2(){int data;data=-1;if(global_five==5){data=5;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(global_five==5){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){int data;data=-1;data=5;{int data_copy=data;int data=data_copy;{int result=data+1;printIntLine(result);}}}
void goodB2G(){int data;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}{int data_copy=data;int data=data_copy;{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){int data;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void goodG2B1(){int data;data=-1;if(5!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(5==5){{int result=data * 2;printIntLine(result);}}else{{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;switch(5){case 6:{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}break;default:data=5;break;}switch(7){case 7:{int result=data * 2;printIntLine(result);}break;default:{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G(){int data;data=-1;while(0){data=5;break;}while(1){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}break;}while(0){{int result=data * 2;printIntLine(result);}break;}while(1){{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G2(){int data;data=-1;if(1){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(1){{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * data;printIntLine(result);}}}
void goodB2G1(){int data;data=-1;if(static_t){data=INT_MAX;}else{data=5;}if(static_f){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){int data;data=-1;if(static_returns_t()){data=5;}else{data=INT_MAX;}if(static_returns_t()){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(global_const_five==5){data=INT_MAX;}else{data=5;}if(global_const_five==5){{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data+1;printIntLine(result);}}}
void goodB2G2(){int data;data=-1;if(static_five==5){data=INT_MAX;}else{data=5;}if(static_five==5){{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * 2;printIntLine(result);}}}
void goodG2B1(){int data;data=-1;if(static_returns_f()){data=INT_MAX;}else{data=5;}if(static_returns_t()){{int result=data * 2;printIntLine(result);}}else{{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;if(global_t){data=INT_MAX;}else{data=5;}if(global_f){{int result=data * 2;printIntLine(result);}}else{{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){int data;data=-1;data=5;goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){int data;data=-1;if(1){data=5;}else{data=INT_MAX;}if(1){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(static_const_t){data=INT_MAX;}else{data=5;}if(static_const_t){{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * data;printIntLine(result);}}}
void goodB2G1(){int data;data=-1;if(static_const_five==5){data=INT_MAX;}else{data=5;}if(static_const_five!=5){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;switch(6){case 6:data=INT_MAX;break;default:data=5;break;}switch(7){case 7:{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;default:{int result=data * data;printIntLine(result);}break;}}
void goodG2B1(){int data;data=-1;if(static_f){fscanf(stdin,"%d",&data);}else{data=5;}if(static_t){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;if(static_const_five!=5){fscanf(stdin,"%d",&data);}else{data=5;}if(static_const_five==5){{int result=data+1;printIntLine(result);}}else{{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(global_returns_t()){fscanf(stdin,"%d",&data);}else{data=5;}if(global_returns_t()){{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * 2;printIntLine(result);}}}
void goodG2B(){int data;data=-1;if(global_returns_t_or_f()){data=5;}else{data=5;}if(global_returns_t_or_f()){{int result=data * 2;printIntLine(result);}}else{{int result=data * 2;printIntLine(result);}}}
void goodB2G2(){int data;data=-1;if(global_const_five==5){fscanf(stdin,"%d",&data);}else{data=5;}if(global_const_five==5){{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * 2;printIntLine(result);}}}
void goodG2B(){int data;data=-1;data=5;{int data_copy=data;int data=data_copy;{int result=data * 2;printIntLine(result);}}}
void goodG2B(){int data;union_type my_union;data=-1;data=5;my_union.a=data;{int data=my_union.b;{int result=data * 2;printIntLine(result);}}}
void goodB2G2(){int data;data=-1;if(1){fscanf(stdin,"%d",&data);}else{data=5;}if(1){{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * data;printIntLine(result);}}}
void goodB2G1(){int data;data=-1;if(static_const_t){fscanf(stdin,"%d",&data);}else{data=5;}if(static_const_f){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;if(global_f){fscanf(stdin,"%d",&data);}else{data=5;}if(global_t){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){int data;data=-1;if(global_const_five==5){data=5;}else{fscanf(stdin,"%d",&data);}if(global_const_five==5){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;switch(6){case 6:fscanf(stdin,"%d",&data);break;default:data=5;break;}switch(7){case 7:{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;default:{int result=data * data;printIntLine(result);}break;}}
void goodG2B(){int data;data=-1;data=goodG2B_source(data);{int result=data * data;printIntLine(result);}}
void goodG2B(){int h,i,j,k;int data;data=-1;for(h=0; h < 1; h++){data=5;}for(i=0; i < 0; i++){data=RAND32();}for(j=0; j < 1; j++){{int result=data+1;printIntLine(result);}}for(k=0; k < 0; k++){{int result=-1;if(data < INT_MAX){result=data+1;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){int data;data=-1;if(5==5){data=5;}else{data=RAND32();}if(5==5){{int result=data * 2;printIntLine(result);}}else{{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;if(global_returns_t()){data=RAND32();}else{data=5;}if(global_returns_f()){{int result=data * 2;printIntLine(result);}}else{{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;switch(6){case 6:data=RAND32();break;default:data=5;break;}switch(8){case 7:{int result=data * 2;printIntLine(result);}break;default:{int result=-1;if(data <=(INT_MAX/2)){result=data * 2;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G1(){int data;data=-1;if(1){data=RAND32();}else{data=5;}if(0){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(1){data=RAND32();}else{data=5;}if(1){{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * data;printIntLine(result);}}}
void goodB2G1(){int data;data=-1;if(global_const_five==5){data=RAND32();}else{data=5;}if(global_const_five!=5){{int result=data * data;printIntLine(result);}}else{{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){int data;data=-1;if(global_const_five==5){data=RAND32();}else{data=5;}if(global_const_five==5){{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{int result=data * data;printIntLine(result);}}}
void goodG2B2(){int data;data=-1;switch(6){case 6:data=5;break;default:data=RAND32();break;}switch(7){case 7:{int result=data * data;printIntLine(result);}break;default:{int result=-1;if(data <=(int)sqrt((int)INT_MAX)){result=data * data;printIntLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G(){int data;data=-1;data=RAND32();goodB2G_data=data;goodB2G_sink();}
void goodB2G1(){unsigned char data;data=' ';if(5==5){data=UCHAR_MAX;}else{data=5;}if(5!=5){{unsigned char result=data+1;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned char data;data=' ';if(static_returns_t()){data=5;}else{data=UCHAR_MAX;}if(static_returns_t()){{unsigned char result=data+1;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned char data;data=' ';if(global_const_t){data=UCHAR_MAX;}else{data=5;}if(global_const_t){{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data+1;printHexUnsignedCharLine(result);}}}
void goodG2B2(){unsigned char data;data=' ';if(1){data=5;}else{data=UCHAR_MAX;}if(1){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned char data;data=' ';if(global_const_t){data=UCHAR_MAX;}else{data=5;}if(global_const_t){{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}}
void goodG2B2(){unsigned char data;data=' ';if(global_const_t){data=5;}else{data=UCHAR_MAX;}if(global_const_t){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned char data;data=' ';switch(5){case 6:data=UCHAR_MAX;break;default:data=5;break;}switch(7){case 7:{unsigned char result=data * 2;printHexUnsignedCharLine(result);}break;default:{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodB2G2(){unsigned char data;data=' ';if(1){data=UCHAR_MAX;}else{data=5;}if(1){{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data * data;printHexUnsignedCharLine(result);}}}
void goodG2B2(){unsigned char data;data=' ';if(5==5){data=5;}else{data=UCHAR_MAX;}if(5==5){{unsigned char result=data * data;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){unsigned char data;data=' ';data=UCHAR_MAX;{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}return;{unsigned char result=data * data;printHexUnsignedCharLine(result);}}
void goodG2B1(){unsigned char data;data=' ';if(static_f){fscanf(stdin,"%hc",&data);}else{data=5;}if(static_t){{unsigned char result=data+1;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned char data;data=' ';if(static_const_five==5){fscanf(stdin,"%hc",&data);}else{data=5;}if(static_const_five==5){{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data+1;printHexUnsignedCharLine(result);}}}
void goodB2G2(){unsigned char data;data=' ';if(global_const_t){fscanf(stdin,"%hc",&data);}else{data=5;}if(global_const_t){{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data+1;printHexUnsignedCharLine(result);}}}
void goodG2B1(){unsigned char data;data=' ';if(global_const_f){fscanf(stdin,"%hc",&data);}else{data=5;}if(global_const_t){{unsigned char result=data+1;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned char data;data=' ';if(global_const_five!=5){fscanf(stdin,"%hc",&data);}else{data=5;}if(global_const_five==5){{unsigned char result=data+1;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){unsigned char data;data=' ';data=5;goodG2B_sink(data);}
void goodB2G2(){unsigned char data;data=' ';if(1){fscanf(stdin,"%hc",&data);}else{data=5;}if(1){{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}}
void goodG2B1(){unsigned char data;data=' ';if(static_const_five!=5){fscanf(stdin,"%hc",&data);}else{data=5;}if(static_const_five==5){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned char data;data=' ';if(static_returns_t()){fscanf(stdin,"%hc",&data);}else{data=5;}if(static_returns_f()){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned char data;data=' ';if(1){fscanf(stdin,"%hc",&data);}else{data=5;}if(1){{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data * data;printHexUnsignedCharLine(result);}}}
void goodG2B1(){unsigned char data;data=' ';if(5!=5){fscanf(stdin,"%hc",&data);}else{data=5;}if(5==5){{unsigned char result=data * data;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned char data;data=' ';if(global_const_t){fscanf(stdin,"%hc",&data);}else{data=5;}if(global_const_f){{unsigned char result=data * data;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned char data;data=' ';if(global_t){data=5;}else{fscanf(stdin,"%hc",&data);}if(global_t){{unsigned char result=data * data;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned char data;data=' ';if(static_const_t){data=(unsigned char)rand();}else{data=5;}if(static_const_t){{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned char result=data+1;printHexUnsignedCharLine(result);}}}
void goodB2G(){unsigned char data;data=' ';data=(unsigned char)rand();{unsigned char data_copy=data;unsigned char data=data_copy;{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){unsigned char data;data=' ';data=goodG2B_source(data);{unsigned char result=data+1;printHexUnsignedCharLine(result);}}
void goodG2B1(){unsigned char data;data=' ';if(global_f){data=(unsigned char)rand();}else{data=5;}if(global_t){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}else{{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned char data;data=' ';switch(6){case 6:data=(unsigned char)rand();break;default:data=5;break;}switch(8){case 7:{unsigned char result=data * 2;printHexUnsignedCharLine(result);}break;default:{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodG2B(){unsigned char data;void(*func_ptr)(unsigned char)=goodG2B_sink;data=' ';data=5;func_ptr(data);}
void goodB2G(){unsigned char data;unsigned char *data_ptr1=&data;unsigned char *data_ptr2=&data;data=' ';{unsigned char data=*data_ptr1;data=(unsigned char)rand();*data_ptr1=data;}{unsigned char data=*data_ptr2;{unsigned char result=-1;if(data <=(unsigned char)sqrt((unsigned char)UCHAR_MAX)){result=data * data;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(static_t){data=UINT_MAX;}else{data=5;}if(static_f){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(static_const_five==5){data=5;}else{data=UINT_MAX;}if(static_const_five==5){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned int data;data=0;if(static_five==5){data=UINT_MAX;}else{data=5;}if(static_five==5){{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data+1;printUnsignedLine(result);}}}
void goodG2B1(){unsigned int data;data=0;if(global_const_f){data=UINT_MAX;}else{data=5;}if(global_const_t){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(global_t){data=UINT_MAX;}else{data=5;}if(global_f){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(global_const_five==5){data=5;}else{data=UINT_MAX;}if(global_const_five==5){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){unsigned int data;data=0;data=UINT_MAX;goodB2G_sink(data);}
void goodG2B(){unsigned int data;data=0;data=goodG2B_source(data);{unsigned int result=data+1;printUnsignedLine(result);}}
void goodG2B(){unsigned int data;data=0;data=5;{unsigned int result=data * 2;printUnsignedLine(result);}}
void goodB2G1(){unsigned int data;data=0;if(5==5){data=UINT_MAX;}else{data=5;}if(5!=5){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(global_t){data=5;}else{data=UINT_MAX;}if(global_t){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(global_five==5){data=5;}else{data=UINT_MAX;}if(global_five==5){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(static_returns_t()){data=UINT_MAX;}else{data=5;}if(static_returns_f()){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(static_returns_f()){data=UINT_MAX;}else{data=5;}if(static_returns_t()){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){unsigned int data;data=0;data=UINT_MAX;goodB2G_sink(data);}
void goodB2G(){unsigned int data;data=0;data=UINT_MAX;goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){unsigned int data;data=0;switch(5){case 6:fscanf(stdin,"%u",&data);break;default:data=5;break;}switch(7){case 7:{unsigned int result=data+1;printUnsignedLine(result);}break;default:{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;}}
void goodG2B(){unsigned int data;data=0;data=5;{unsigned int result=data * 2;printUnsignedLine(result);}}
void goodG2B1(){unsigned int data;data=0;if(static_const_f){fscanf(stdin,"%u",&data);}else{data=5;}if(static_const_t){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(static_const_five!=5){fscanf(stdin,"%u",&data);}else{data=5;}if(static_const_five==5){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(static_const_five==5){data=5;}else{fscanf(stdin,"%u",&data);}if(static_const_five==5){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(global_t){fscanf(stdin,"%u",&data);}else{data=5;}if(global_f){{unsigned int result=data * 2;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){int h,i,j,k;unsigned int data;data=0;for(h=0; h < 0; h++){data=5;}for(i=0; i < 1; i++){fscanf(stdin,"%u",&data);}for(j=0; j < 0; j++){{unsigned int result=data * 2;printUnsignedLine(result);}}for(k=0; k < 1; k++){{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B(){unsigned int data;data=0;data=5;{unsigned int result=data * 2;printUnsignedLine(result);}return;fscanf(stdin,"%u",&data);{unsigned int result=data * 2;printUnsignedLine(result);}}
void goodG2B2(){unsigned int data;data=0;if(5==5){data=5;}else{fscanf(stdin,"%u",&data);}if(5==5){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(static_const_f){fscanf(stdin,"%u",&data);}else{data=5;}if(static_const_t){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(static_t){fscanf(stdin,"%u",&data);}else{data=5;}if(static_f){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(static_const_five!=5){fscanf(stdin,"%u",&data);}else{data=5;}if(static_const_five==5){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned int data;data=0;if(static_five==5){data=(unsigned int)RAND32();}else{data=5;}if(static_five==5){{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data+1;printUnsignedLine(result);}}}
void goodG2B2(){unsigned int data;data=0;if(static_five==5){data=5;}else{data=(unsigned int)RAND32();}if(static_five==5){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodG2B2(){unsigned int data;data=0;if(global_const_t){data=5;}else{data=(unsigned int)RAND32();}if(global_const_t){{unsigned int result=data+1;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G(){unsigned int data;data=0;goto source;data=5;source:data=(unsigned int)RAND32();goto sink;{unsigned int result=data+1;printUnsignedLine(result);}sink:{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void goodG2B(){unsigned int data;data=0;goto source;data=(unsigned int)RAND32();source:data=5;goto sink;{unsigned int result=-1;if(data < UINT_MAX){result=data+1;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}sink:{unsigned int result=data+1;printUnsignedLine(result);}}
void goodG2B(){unsigned int data;union_type my_union;data=0;data=5;my_union.a=data;{unsigned int data=my_union.b;{unsigned int result=data+1;printUnsignedLine(result);}}}
void goodB2G2(){unsigned int data;data=0;if(static_five==5){data=(unsigned int)RAND32();}else{data=5;}if(static_five==5){{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data * 2;printUnsignedLine(result);}}}
void goodB2G2(){unsigned int data;data=0;if(global_t){data=(unsigned int)RAND32();}else{data=5;}if(global_t){{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data * 2;printUnsignedLine(result);}}}
void goodB2G2(){unsigned int data;data=0;if(static_const_t){data=(unsigned int)RAND32();}else{data=5;}if(static_const_t){{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data * data;printUnsignedLine(result);}}}
void goodB2G2(){unsigned int data;data=0;if(global_const_t){data=(unsigned int)RAND32();}else{data=5;}if(global_const_t){{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}else{{unsigned int result=data * data;printUnsignedLine(result);}}}
void goodG2B1(){unsigned int data;data=0;if(global_const_five!=5){data=(unsigned int)RAND32();}else{data=5;}if(global_const_five==5){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(global_five==5){data=(unsigned int)RAND32();}else{data=5;}if(global_five!=5){{unsigned int result=data * data;printUnsignedLine(result);}}else{{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned int data;data=0;switch(6){case 6:data=(unsigned int)RAND32();break;default:data=5;break;}switch(7){case 7:{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}break;default:{unsigned int result=data * data;printUnsignedLine(result);}break;}}
void goodB2G(){unsigned int data;data=0;data=goodB2G_source(data);{unsigned int result=-1;if(data <=(unsigned int)sqrt((unsigned int)UINT_MAX)){result=data * data;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void goodB2G(){char data;data=' ';data=CHAR_MIN;{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void goodB2G2(){char data;data=' ';if(1){data=CHAR_MIN;}else{data=5;}if(1){{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{char result=data-1;printHexCharLine(result);}}}
void goodG2B2(){char data;data=' ';if(static_const_t){data=5;}else{data=CHAR_MIN;}if(static_const_t){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(static_t){data=CHAR_MIN;}else{data=5;}if(static_f){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(global_t){data=CHAR_MIN;}else{data=5;}if(global_f){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){char data;data=' ';if(global_const_five==5){data=CHAR_MIN;}else{data=5;}if(global_const_five!=5){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(global_const_five!=5){data=CHAR_MIN;}else{data=5;}if(global_const_five==5){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B(){char data;union_type my_union;data=' ';data=5;my_union.a=data;{char data=my_union.b;{char result=data-1;printHexCharLine(result);}}}
void goodG2B2(){char data;data=' ';if(1){data=5;}else{fscanf(stdin,"%c",&data);}if(1){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(static_five==5){fscanf(stdin,"%c",&data);}else{data=5;}if(static_five==5){{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{char result=data-1;printHexCharLine(result);}}}
void goodB2G1(){char data;data=' ';if(global_const_t){fscanf(stdin,"%c",&data);}else{data=5;}if(global_const_f){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G2(){char data;data=' ';if(global_t){fscanf(stdin,"%c",&data);}else{data=5;}if(global_t){{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{char result=data-1;printHexCharLine(result);}}}
void goodG2B(){char data;data=' ';goto source;fscanf(stdin,"%c",&data);source:data=5;goto sink;{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}sink:{char result=data-1;printHexCharLine(result);}}
void goodB2G(){char data;void(*func_ptr)(char)=goodB2G_sink;data=' ';fscanf(stdin,"%c",&data);func_ptr(data);}
void goodB2G1(){char data;data=' ';if(static_const_five==5){data=(char)rand();}else{data=5;}if(static_const_five!=5){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(static_five!=5){data=(char)rand();}else{data=5;}if(static_five==5){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){char data;data=' ';if(global_const_five!=5){data=(char)rand();}else{data=5;}if(global_const_five==5){{char result=data-1;printHexCharLine(result);}}else{{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G(){char data;data=' ';data=(char)rand();{char result=0;if(data > CHAR_MIN){result=data-1;printHexCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}return;{char result=data-1;printHexCharLine(result);}}
void goodB2G1(){int data;data=-1;if(1){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(0){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;if(static_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(static_const_five==5){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;if(global_const_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=5;}if(global_const_t){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B2(){int data;data=-1;if(global_t){data=5;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(global_t){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G(){int data;data=-1;if(global_returns_t_or_f()){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(global_returns_t_or_f()){{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B2(){int data;data=-1;if(global_five==5){data=5;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}if(global_five==5){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B(){int data;data=-1;data=goodG2B_source(data);{int result=data-1;printIntLine(result);}}
void goodB2G1(){int data;data=-1;if(global_const_t){data=INT_MIN;}else{data=5;}if(global_const_f){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;switch(5){case 6:data=INT_MIN;break;default:data=5;break;}switch(7){case 7:{int result=data-1;printIntLine(result);}break;default:{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}break;}}
void goodG2B(){int data;data=-1;goto source;data=INT_MIN;source:data=5;goto sink;{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}sink:{int result=data-1;printIntLine(result);}}
void goodG2B2(){int data;data=-1;if(global_t){data=5;}else{fscanf(stdin,"%d",&data);}if(global_t){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;switch(5){case 6:fscanf(stdin,"%d",&data);break;default:data=5;break;}switch(7){case 7:{int result=data-1;printIntLine(result);}break;default:{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}break;}}
void goodB2G(){int data;union_type my_union;data=-1;fscanf(stdin,"%d",&data);my_union.a=data;{int data=my_union.b;{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;if(1){data=RAND32();}else{data=5;}if(0){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;if(global_const_t){data=RAND32();}else{data=5;}if(global_const_f){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){int data;data=-1;if(global_returns_t()){data=RAND32();}else{data=5;}if(global_returns_f()){{int result=data-1;printIntLine(result);}}else{{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){int data;data=-1;switch(5){case 6:data=RAND32();break;default:data=5;break;}switch(7){case 7:{int result=data-1;printIntLine(result);}break;default:{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}break;}}
void goodB2G(){int data;data=-1;data=goodB2G_source(data);{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void goodG2B1(){unsigned char data;data=' ';if(global_f){data=0;}else{data=5;}if(global_t){{unsigned char result=data-1;printHexUnsignedCharLine(result);}}else{{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G(){unsigned char data;data=' ';data=goodB2G_source(data);{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void goodG2B(){unsigned char data;data=' ';data=5;{unsigned char result=data-1;printHexUnsignedCharLine(result);}}
void goodG2B(){unsigned char data;data=' ';data=5;{unsigned char data_copy=data;unsigned char data=data_copy;{unsigned char result=data-1;printHexUnsignedCharLine(result);}}}
void goodB2G1(){unsigned char data;data=' ';if(static_returns_t()){data=(unsigned char)rand();}else{data=5;}if(static_returns_f()){{unsigned char result=data-1;printHexUnsignedCharLine(result);}}else{{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned char data;data=' ';if(global_f){data=(unsigned char)rand();}else{data=5;}if(global_t){{unsigned char result=data-1;printHexUnsignedCharLine(result);}}else{{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G(){unsigned char data;data=' ';goto source;data=5;source:data=(unsigned char)rand();goto sink;{unsigned char result=data-1;printHexUnsignedCharLine(result);}sink:{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void goodG2B2(){unsigned int data;data=0;if(1){data=5;}else{data=0;}if(1){{unsigned int result=data-1;printUnsignedLine(result);}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(global_f){data=0;}else{data=5;}if(global_t){{unsigned int result=data-1;printUnsignedLine(result);}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned int data;data=0;if(1){fscanf(stdin,"%u",&data);}else{data=5;}if(1){{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{unsigned int result=data-1;printUnsignedLine(result);}}}
void goodG2B2(){unsigned int data;data=0;if(static_const_five==5){data=5;}else{fscanf(stdin,"%u",&data);}if(static_const_five==5){{unsigned int result=data-1;printUnsignedLine(result);}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G1(){unsigned int data;data=0;if(static_returns_t()){fscanf(stdin,"%u",&data);}else{data=5;}if(static_returns_f()){{unsigned int result=data-1;printUnsignedLine(result);}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G(){unsigned int data;data=0;if(global_returns_t_or_f()){fscanf(stdin,"%u",&data);}else{fscanf(stdin,"%u",&data);}if(global_returns_t_or_f()){{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodG2B1(){unsigned int data;data=0;if(static_five!=5){data=(unsigned int)RAND32();}else{data=5;}if(static_five==5){{unsigned int result=data-1;printUnsignedLine(result);}}else{{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}}
void goodB2G2(){unsigned int data;data=0;if(global_returns_t()){data=(unsigned int)RAND32();}else{data=5;}if(global_returns_t()){{unsigned int result=0;if(data > 0){result=data-1;printUnsignedLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}else{{unsigned int result=data-1;printUnsignedLine(result);}}}
void good1(){if(0){{size_t i;char dst[DST_SZ];const char *src=COPY_STR;for(i=0; i <= DST_SZ; i++){dst[i]=src[i];}dst[DST_SZ-1]='\0'; printLine(dst);}}else{{size_t i;char dst[DST_SZ];const char *src=COPY_STR;for(i=0; i < DST_SZ; i++){dst[i]=src[i];}dst[DST_SZ-1]='\0'; printLine(dst);}}}
void good1(){if(5!=5){{char dst[DST_SZ];memcpy(dst,COPY_STR,DST_SZ*sizeof(char));printLine(dst);}}else{{char dst[DST_SZ];memcpy(dst,COPY_STR,(DST_SZ-1)*sizeof(char));dst[DST_SZ-1]='\0';printLine(dst);}}}
void good2(){if(global_const_t){{char dst[DST_SZ];memcpy(dst,COPY_STR,(DST_SZ-1)*sizeof(char));dst[DST_SZ-1]='\0';printLine(dst);}}else{{char dst[DST_SZ];memcpy(dst,COPY_STR,DST_SZ*sizeof(char));printLine(dst);}}}
void good2(){switch(6){case 6:{char dst[DST_SZ];memcpy(dst,COPY_STR,(DST_SZ-1)*sizeof(char));dst[DST_SZ-1]='\0';printLine(dst);}break;default:{char dst[DST_SZ];memcpy(dst,COPY_STR,DST_SZ*sizeof(char));printLine(dst);}}}
void good1(){{wchar_t dst[DST_SZ];memmove(dst,COPY_STR,(DST_SZ-1)*sizeof(wchar_t));dst[DST_SZ-1]=L'\0';printWLine(dst);}}
void good2(){if(global_five==5){{wchar_t dst[DST_SZ];memmove(dst,COPY_STR,(DST_SZ-1)*sizeof(wchar_t));dst[DST_SZ-1]=L'\0';printWLine(dst);}}else{{wchar_t dst[DST_SZ];memmove(dst,COPY_STR,DST_SZ*sizeof(wchar_t));printWLine(dst);}}}
void good1(){goto sink;{wchar_t dst[DST_SZ];memmove(dst,COPY_STR,DST_SZ*sizeof(wchar_t));printWLine(dst);}sink:{wchar_t dst[DST_SZ];memmove(dst,COPY_STR,(DST_SZ-1)*sizeof(wchar_t));dst[DST_SZ-1]=L'\0';printWLine(dst);}}
void good1(){if(0){{wchar_t dst[DST_SZ];wcsncpy(dst,COPY_STR,DST_SZ);printWLine(dst);}}else{{wchar_t dst[DST_SZ];wcsncpy(dst,COPY_STR,DST_SZ-1);dst[DST_SZ-1]=L'\0';printWLine(dst);}}}
void goodG2B(){short data;data=0;data=goodG2B_source(data);{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(static_const_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=100-1;}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B1(){short data;data=0;if(static_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=100-1;}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;if(global_five==5){data=100-1;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;switch(6){case 6:data=100-1;break;default:{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}break;}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B1(){short data;data=0;if(static_const_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(global_returns_t()){data=100-1;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){short data;data=0;data=100-1;goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){short data;data=0;if(5!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(global_const_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){short data;data=0;data=100-1;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}return;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(static_five==5){data=100-1;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){short data;union_type my_union;data=0;data=100-1;my_union.a=data;{short data=my_union.b;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}}
void goodG2B(){short data;void(*func_ptr)(short)=goodG2B_sink;data=0;data=100-1;func_ptr(data);}
void goodG2B2(){short data;data=0;if(1){data=100-1;}else{fscanf(stdin,"%hd",&data);}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;if(global_returns_t()){data=100-1;}else{fscanf(stdin,"%hd",&data);}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;if(global_five==5){data=100-1;}else{fscanf(stdin,"%hd",&data);}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B(){short data;union_type my_union;data=0;data=100-1;my_union.a=data;{short data=my_union.b;{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}}
void goodG2B2(){short data;data=0;if(1){data=100-1;}else{fscanf(stdin,"%hd",&data);}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;switch(6){case 6:data=100-1;break;default:fscanf(stdin,"%hd",&data);break;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(static_const_five!=5){fscanf(stdin,"%hd",&data);}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(static_f){data=-1;}else{data=100-1;}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B1(){short data;data=0;if(static_const_five!=5){data=-1;}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(global_const_five!=5){data=-1;}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(static_five==5){data=100-1;}else{data=-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(global_const_t){data=100-1;}else{data=-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(static_const_t){data=100-1;}else{data=(short)RAND32();}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;if(global_five==5){data=100-1;}else{data=(short)RAND32();}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){short data;data=0;if(global_const_five==5){data=100-1;}else{data=(short)RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(global_five!=5){data=(short)RAND32();}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(static_five!=5){data=(short)RAND32();}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){short data;data=0;if(static_returns_t()){data=100-1;}else{data=(short)RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){short data;data=0;if(5!=5){data=(short)RAND32();}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int h,i;short data;data=0;for(h=0; h < 1; h++){data=100-1;}for(i=0; i < 0; i++){data=(short)RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){short data;data=0;data=100-1;{short data_copy=data;short data=data_copy;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}}
void goodG2B(){short data;short *data_ptr1=&data;short *data_ptr2=&data;data=0;{short data=*data_ptr1;data=100-1;*data_ptr1=data;}{short data=*data_ptr2;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}}
void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=100-1;func_ptr(data);}
void goodG2B1(){int data;data=-1;if(5!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){int data;data=-1;if(static_const_five==5){data=100-1;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){int data;data=-1;if(global_const_five==5){data=100-1;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){int data;data=-1;if(static_const_t){data=100-1;}else{fscanf(stdin,"%d",&data);}{if(data < 100){char * data_buf=(char *)malloc(data);memset(data_buf,'A',data-1);data_buf[data-1]='\0';printLine(data_buf);free(data_buf);}}}
void goodG2B2(){int data;data=-1;if(static_returns_t()){data=100-1;}else{fscanf(stdin,"%d",&data);}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){int data;data=-1;if(global_const_f){fscanf(stdin,"%d",&data);}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){int data;data=-1;if(global_f){fscanf(stdin,"%d",&data);}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){int data;data=-1;switch(5){case 6:fscanf(stdin,"%d",&data);break;default:data=100-1;break;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){int data;data=-1;if(static_const_f){fscanf(stdin,"%d",&data);}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int data;union_type my_union;data=-1;data=100-1;my_union.a=data;{int data=my_union.b;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}}
void goodG2B2(){int data;data=-1;if(static_const_five==5){data=100-1;}else{data=-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int h,i;int data;data=-1;for(h=0; h < 1; h++){data=100-1;}for(i=0; i < 0; i++){data=-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int data;data=-1;data=100-1;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}return;data=-1;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int data;union_type my_union;data=-1;data=100-1;my_union.a=data;{int data=my_union.b;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}}
void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=100-1;func_ptr(data);}
void goodG2B2(){int data;data=-1;if(static_const_five==5){data=100-1;}else{data=RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){int data;data=-1;if(static_returns_t()){data=100-1;}else{data=RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B2(){int data;data=-1;if(global_returns_t()){data=100-1;}else{data=RAND32();}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B1(){int data;data=-1;if(global_five!=5){data=RAND32();}else{data=100-1;}{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void goodG2B(){int data;data=-1;data=goodG2B_source(data);{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
void good2(){if(global_t){{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}}else{{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}}}
void good1(){if(global_returns_f()){{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}}else{{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}}}
void good2(){if(global_returns_t()){{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}}else{{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}}}
void good1(){switch(5){case 6:{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}break;default:{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}}}
void good2(){switch(6){case 6:{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}break;default:{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}}}
void good1(){goto sink;{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}i=u;printIntLine(i);}sink:{unsigned u;int i;u=rand();if(rand() % 2==0){u=UINT_MAX-u;}if(u > INT_MAX) exit(1);i=u;printIntLine(i);}}
void goodG2B1(){int data;data=-1;if(static_returns_f()){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){int data;data=-1;if(global_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){int data;data=-1;data=CHAR_MAX-5;{char c=(char)data;printHexCharLine(c);}return;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){int data;data=-1;if(static_const_t){data=CHAR_MAX-5;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B1(){int data;data=-1;if(static_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=CHAR_MAX-5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B1(){int data;data=-1;if(global_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=CHAR_MAX-5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B2(){int data;data=-1;if(5==5){data=CHAR_MAX-5;}else{fscanf(stdin,"%d",&data);}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){int data;data=-1;if(global_f){fscanf(stdin,"%d",&data);}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){fscanf(stdin,"%d",&data);}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){int data;data=-1;data=CHAR_MAX-5;{int data_copy=data;int data=data_copy;{char c=(char)data;printHexCharLine(c);}}}
void goodG2B(){int data;data=-1;data=CHAR_MAX-5;goodG2B_sink(data);}
void goodG2B2(){int data;data=-1;if(1){data=CHAR_MAX-5;}else{fscanf(stdin,"%d",&data);}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B1(){int data;data=-1;if(static_const_f){fscanf(stdin,"%d",&data);}else{data=CHAR_MAX-5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B2(){int data;data=-1;if(global_const_five==5){data=CHAR_MAX-5;}else{fscanf(stdin,"%d",&data);}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B(){int data;data=-1;if(global_returns_t_or_f()){data=CHAR_MAX-5;}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){data=SHRT_MAX+5;}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){int data;data=-1;if(5==5){data=CHAR_MAX-5;}else{data=SHRT_MAX+5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B1(){int data;data=-1;if(static_const_f){data=SHRT_MAX+5;}else{data=CHAR_MAX-5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B1(){int data;data=-1;if(static_const_f){data=RAND32();}else{data=CHAR_MAX-5;}{short s=(short)data;printf("%hd\n",s);}}
void goodG2B(){int data;data=-1;data=CHAR_MAX-5;goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){short data;data=-1;if(static_const_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){short data;data=-1;switch(6){case 6:data=CHAR_MAX-5;break;default:{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}break;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){short data;data=-1;data=CHAR_MAX-5;{char c=(char)data;printHexCharLine(c);}return;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(short)atoi(input_buf);}{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){short data;data=-1;if(static_returns_t()){data=CHAR_MAX-5;}else{fscanf(stdin,"%hd",&data);}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){short data;data=-1;if(global_const_f){fscanf(stdin,"%hd",&data);}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B1(){short data;data=-1;if(global_returns_f()){fscanf(stdin,"%hd",&data);}else{data=CHAR_MAX-5;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){short data;data=-1;if(global_five==5){data=CHAR_MAX-5;}else{fscanf(stdin,"%hd",&data);}{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){short data;data=-1;data=CHAR_MAX-5;{char c=(char)data;printHexCharLine(c);}return;fscanf(stdin,"%hd",&data);{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){short data;data=-1;data=CHAR_MAX-5;goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){short data;data=-1;if(static_five==5){data=CHAR_MAX-5;}else{data=CHAR_MAX+1;}{char c=(char)data;printHexCharLine(c);}}
void goodG2B(){short data;data=-1;goto source;data=CHAR_MAX+1;source:data=CHAR_MAX-5;{char c=(char)data;printHexCharLine(c);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_returns_t()){strcat(data,"file.txt");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;switch(6){case 6:strcat(data,"file.txt");break;default:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;switch(6){case 6:strcat(data,"file.txt");break;default:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_const_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"file.txt");}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");goodG2B_data=data;goodG2B_sink();}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);if(FILENAME_MAX-data_len > 1){fgets(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}break;default:strcat(data,"file.txt");break;}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){int h,i;char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;for(h=0; h < 1; h++){strcat(data,"file.txt");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);if(FILENAME_MAX-data_len > 1){fgets(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(1){strcat(data,"file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_t){strcat(data,"file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_returns_f()){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"file.txt");}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_t){strcat(data,"file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");func_ptr(data);}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_const_f){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"file.txt");}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_f){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"file.txt");}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;goto source;{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}source:strcat(data,"file.txt");{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");func_ptr(data);}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(5!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"file.txt");}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_const_five==5){wcscat(data,L"file.txt");}else{{size_t data_len=wcslen(data);if(FILENAME_MAX-data_len > 1){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_five==5){wcscat(data,L"file.txt");}else{{size_t data_len=wcslen(data);if(FILENAME_MAX-data_len > 1){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(0){{size_t data_len=wcslen(data);if(FILENAME_MAX-data_len > 1){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscat(data,L"file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");func_ptr(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;goto source;{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}source:wcscat(data,L"file.txt");{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;{wchar_t * data=*data_ptr1;wcscat(data,L"file.txt");*data_ptr1=data;}{wchar_t * data=*data_ptr2;{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_const_t){wcscat(data,L"file.txt");}else{{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(static_const_five==5){wcscat(data,L"file.txt");}else{{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"file.txt");}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");goodG2B_sink(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;data=goodG2B_source(data);{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void good2(){if(static_returns_t()){{char dst[DST_SZ];char *result;result=fgets(dst,DST_SZ,stdin);if( NULL==result){printLine("Error Condition: alter control flow to indicate action taken");exit(1);}dst[DST_SZ-1]='\0';printLine(dst);}}else{{char dst[DST_SZ];char *result;result=gets(dst);if( NULL==result){printLine("Error Condition: alter control flow to indicate action taken");exit(1);}dst[DST_SZ-1]='\0';printLine(dst);}}}
void good2(){if(static_returns_t()){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");fgets(data,100,stdin);printLine(data);}}}
void good1(){if(global_returns_f()){{fputc((int)'A',stdout);}}else{{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}}}
void good1(){if(global_returns_t_or_f()){{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}}else{{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}}}
void good1(){if(global_returns_t_or_f()){{if(fputs("string",stdout)==EOF){printLine("fputs failed!");}}}else{{if(fputs("string",stdout)==EOF){printLine("fputs failed!");}}}}
void good2(){if(5==5){{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}else{{char data_buf[100]="";char * data=data_buf;fread((char *)data,sizeof(char),(size_t)(100-1),stdin);}}}
void good2(){if(global_const_t){{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}else{{char data_buf[100]="";char * data=data_buf;fread((char *)data,sizeof(char),(size_t)(100-1),stdin);}}}
void good1(){if(global_returns_f()){{char data_buf[100]="";char * data=data_buf;fscanf(stdin,"%99s\0",data);}}else{{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){printLine("fscanf failed!");}}}}
void good1(){if(global_returns_t_or_f()){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");}}}else{{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");}}}}
void good2(){if(global_five==5){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");}}}else{{fwrite((char *)"string",sizeof(char),strlen("string"),stdout);}}}
void good2(){if(static_const_t){{if(putchar((int)'A')==EOF){printLine("putchar failed!");}}}else{{putchar((int)'A');}}}
void good1(){while(0){{putchar((int)'A');}break;}while(1){{if(putchar((int)'A')==EOF){printLine("putchar failed!");}}break;}}
void good2(){switch(6){case 6:{if(puts("string")==EOF){printLine("puts failed!");}}break;default:{puts("string");}}}
void good1(){{if(REMOVE("removemebad.txt")!=0){printLine("remove failed!");}}}
void good1(){if(global_const_five!=5){{RENAME(OLD_BAD_FILE_NAME,"newbadfilename.txt");}}else{{if(RENAME(OLD_GOOD_FILE_NAME,"newgoodfilename.txt")!=0){printLine("rename failed!");}}}}
void good1(){if(0){{char data_buf[100]="";char * data=data_buf;scanf("%99s\0",data);}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");}}}}
void good1(){if(global_const_five!=5){{char data_buf[100]="";char * data=data_buf;scanf("%99s\0",data);}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");}}}}
void good2(){if(global_const_five==5){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;scanf("%99s\0",data);}}}
void good1(){if(static_const_five!=5){{char data_buf[100]="";char * data=data_buf;_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC);}}else{{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC) < 0){printLine("snprintf failed!");}}}}
void good1(){if(global_const_five!=5){{char data_buf[100]="";char * data=data_buf;_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC);}}else{{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC) < 0){printLine("snprintf failed!");}}}}
void good1(){{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC) < 0){printLine("snprintf failed!");}}return;{char data_buf[100]="";char * data=data_buf;_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC);}}
void good2(){if(5==5){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;sscanf(SRC,"%99s\0",data);}}}
void good2(){if(global_five==5){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;sscanf(SRC,"%99s\0",data);}}}
void good2(){if(static_t){{HANDLE hMutex=NULL;hMutex=CreateMutexA(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexA(NULL,FALSE,NULL);CloseHandle(hMutex);}}}
void good1(){{HANDLE hMutex=NULL;hMutex=CreateMutexA(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}return;{HANDLE hMutex=NULL;hMutex=CreateMutexA(NULL,FALSE,NULL);CloseHandle(hMutex);}}
void good1(){if(static_returns_f()){{RpcImpersonateClient(0);}}else{{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}}
void good1(){if(global_const_five!=5){{RpcImpersonateClient(0);}}else{{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}}
void good1(){if(static_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");fgetws(data,100,stdin);printWLine(data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){printLine("fgetws failed!");exit(1);}printWLine(data);}}}
void good2(){if(1){{if(fwprintf(stdout,L"%s\n",L"string") < 0){printLine("fwprintf failed!");}}}else{{fwprintf(stdout,L"%s\n",L"string");}}}
void good2(){if(static_five==5){{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}else{{fputwc((wchar_t)L'A',stdout);}}}
void good2(){if(global_const_five==5){{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}else{{fputwc((wchar_t)L'A',stdout);}}}
void good1(){goto sink;{fputwc((wchar_t)L'A',stdout);}sink:{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}
void good1(){if(static_const_f){{fputws(L"string",stdout);}}else{{if(fputws(L"string",stdout)==WEOF){printLine("fputws failed!");}}}}
void good1(){if(global_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}}
void good1(){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}return;{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin);}}
void good1(){if(static_const_f){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;fwscanf(stdin,L"%99s\0",data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){printLine("fwscanf failed!");}}}}
void good1(){if(static_const_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;fwscanf(stdin,L"%99s\0",data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){printLine("fwscanf failed!");}}}}
void good1(){if(static_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;fwscanf(stdin,L"%99s\0",data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){printLine("fwscanf failed!");}}}}
void good1(){if(static_f){{fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout);}}else{{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");}}}}
void good1(){while(0){{fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout);}break;}while(1){{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");}}break;}}
void good2(){if(global_returns_t()){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");}}}else{{putwc((wchar_t)L'A',stdout);}}}
void good2(){switch(6){case 6:{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");}}break;default:{putwchar((wchar_t)L'A');}}}
void good2(){if(global_returns_t()){{if(_putws(L"string")==WEOF){printLine("puts failed!");}}}else{{_putws(L"string");}}}
void good1(){while(0){{_putws(L"string");}break;}while(1){{if(_putws(L"string")==WEOF){printLine("puts failed!");}}break;}}
void good1(){{if(REMOVE(L"removemebad.txt")!=0){printLine("wremove failed!");}}}
void good1(){if(static_const_five!=5){{REMOVE(L"removemebad.txt");}}else{{if(REMOVE(L"removemebad.txt")!=0){printLine("wremove failed!");}}}}
void good1(){switch(5){case 6:{REMOVE(L"removemebad.txt");}break;default:{if(REMOVE(L"removemebad.txt")!=0){printLine("wremove failed!");}}}}
void good2(){if(global_t){{if(RENAME(OLD_GOOD_FILE_NAME,L"newgoodfilename.txt")!=0){printLine("wrename failed!");}}}else{{RENAME(OLD_BAD_FILE_NAME,L"newbadfilename.txt");}}}
void good2(){if(static_const_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wscanf(L"%99s\0",data);}}}
void good1(){if(global_const_f){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wscanf(L"%99s\0",data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");}}}}
void good2(){switch(6){case 6:{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");}}break;default:{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wscanf(L"%99s\0",data);}}}
void good2(){if(1){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){printLine("snwprintf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC);}}}
void good2(){if(static_returns_t()){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){printLine("snwprintf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC);}}}
void good2(){if(static_const_t){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(swscanf(SRC,L"%99s\0",data)==EOF){printLine("swscanf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;swscanf(SRC,L"%99s\0",data);}}}
void good1(){if(static_const_f){{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}}
void good1(){if(static_returns_f()){{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}}
void good2(){if(global_returns_t()){{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);CloseHandle(hMutex);}}}
void good1(){if(global_const_five!=5){{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}}
void good2(){if(global_t){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin) < 0){printLine("fgets failed!");exit(1);}printLine(data);}}}
void good1(){if(static_returns_f()){{if(fputc((int)'A',stdout)==0){printLine("fputc failed!");}}}else{{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}}}
void good1(){if(global_const_f){{if(fputc((int)'A',stdout)==0){printLine("fputc failed!");}}}else{{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}}}
void good1(){while(0){{if(fputc((int)'A',stdout)==0){printLine("fputc failed!");}}break;}while(1){{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");}}break;}}
void good2(){if(static_returns_t()){{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin) < 0){printLine("fread failed!");}}}}
void good1(){goto sink;{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin) < 0){printLine("fread failed!");}}sink:{char data_buf[100]="";char * data=data_buf;if(fread((char *)data,sizeof(char),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}
void good1(){while(0){{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==0){printLine("fscanf failed!");}}break;}while(1){{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){printLine("fscanf failed!");}}break;}}
void good1(){while(0){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout) < 0){printLine("fwrite failed!");}}break;}while(1){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");}}break;}}
void good2(){if(static_five==5){{if(putc((int)'A',stdout)==EOF){printLine("putc failed!");}}}else{{if(putc((int)'A',stdout)==0){printLine("putc failed!");}}}}
void good1(){switch(5){case 6:{if(putc((int)'A',stdout)==0){printLine("putc failed!");}}break;default:{if(putc((int)'A',stdout)==EOF){printLine("putc failed!");}}}}
void good2(){if(static_returns_t()){{if(putchar((int)'A')==EOF){printLine("putchar failed!");}}}else{{if(putchar((int)'A')==0){printLine("putchar failed!");}}}}
void good1(){goto sink;{if(putchar((int)'A')==0){printLine("putchar failed!");}}sink:{if(putchar((int)'A')==EOF){printLine("putchar failed!");}}}
void good1(){if(static_const_f){{if(puts("string")==0){printLine("puts failed!");}}}else{{if(puts("string")==EOF){printLine("puts failed!");}}}}
void good1(){while(0){{if(puts("string")==0){printLine("puts failed!");}}break;}while(1){{if(puts("string")==EOF){printLine("puts failed!");}}break;}}
void good1(){if(static_const_five!=5){{if(RENAME(OLD_BAD_FILE_NAME,"newbadfilename.txt")==0){printLine("rename failed!");}}}else{{if(RENAME(OLD_GOOD_FILE_NAME,"newgoodfilename.txt")!=0){printLine("rename failed!");}}}}
void good2(){if(1){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==0){printLine("scanf failed!");}}}}
void good2(){if(static_t){{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC) < 0){printLine("snprintf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC)==0){printLine("snprintf failed!");}}}}
void good1(){if(static_five!=5){{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC)==0){printLine("snprintf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(_snprintf(data,100-strlen(SRC)-1,"%s\n",SRC) < 0){printLine("snprintf failed!");}}}}
void good1(){if(0){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==0){printLine("sscanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");}}}}
void good1(){if(static_five!=5){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==0){printLine("sscanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");}}}}
void good2(){if(static_returns_t()){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");}}}else{{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==0){printLine("sscanf failed!");}}}}
void good2(){if(static_t){{if(!ImpersonateSelf(SecurityImpersonation)){exit(1);}}}else{{if(ImpersonateSelf(SecurityImpersonation) > 0){exit(1);}}}}
void good2(){if(1){{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}else{{RpcImpersonateClient(0);if(RpcImpersonateClient(0)==RPC_S_OK){exit(1);}}}}
void good1(){if(static_const_f){{RpcImpersonateClient(0);if(RpcImpersonateClient(0)==RPC_S_OK){exit(1);}}}else{{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}}
void good2(){if(static_five==5){{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}else{{RpcImpersonateClient(0);if(RpcImpersonateClient(0)==RPC_S_OK){exit(1);}}}}
void good2(){if(static_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){printLine("fgetws failed!");exit(1);}printWLine(data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin) < 0){printLine("fgetws failed!");exit(1);}printWLine(data);}}}
void good2(){if(global_const_t){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){printLine("fgetws failed!");exit(1);}printWLine(data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin) < 0){printLine("fgetws failed!");exit(1);}printWLine(data);}}}
void good2(){if(global_const_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){printLine("fgetws failed!");exit(1);}printWLine(data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin) < 0){printLine("fgetws failed!");exit(1);}printWLine(data);}}}
void good2(){switch(6){case 6:{if(fwprintf(stdout,L"%s\n",L"string") < 0){printLine("fwprintf failed!");}}break;default:{if(fwprintf(stdout,L"%s\n",L"string")==0){printLine("fwprintf failed!");}}}}
void good1(){if(static_const_f){{if(fputwc((wchar_t)L'A',stdout)==0){printLine("fputwc failed!");}}}else{{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}}
void good2(){if(global_const_t){{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}else{{if(fputwc((wchar_t)L'A',stdout)==0){printLine("fputwc failed!");}}}}
void good1(){if(global_returns_f()){{if(fputwc((wchar_t)L'A',stdout)==0){printLine("fputwc failed!");}}}else{{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");}}}}
void good1(){if(static_const_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin) < 0){printLine("fread failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}}
void good1(){if(global_const_f){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin) < 0){printLine("fread failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");}}}}
void good1(){if(global_five!=5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==0){printLine("fwscanf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){printLine("fwscanf failed!");}}}}
void good1(){if(static_f){{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout) < 0){printLine("fwrite failed!");}}}else{{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");}}}}
void good1(){if(static_const_five!=5){{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout) < 0){printLine("fwrite failed!");}}}else{{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");}}}}
void good1(){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");}}}
void good2(){if(static_const_t){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");}}}else{{if(putwc((wchar_t)L'A',stdout)==0){printLine("putwc failed!");}}}}
void good2(){if(static_t){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");}}}else{{if(putwc((wchar_t)L'A',stdout)==0){printLine("putwc failed!");}}}}
void good1(){if(0){{if(putwchar((wchar_t)L'A')==0){printLine("putwchar failed!");}}}else{{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");}}}}
void good1(){if(5!=5){{if(putwchar((wchar_t)L'A')==0){printLine("putwchar failed!");}}}else{{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");}}}}
void good2(){if(global_t){{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");}}}else{{if(putwchar((wchar_t)L'A')==0){printLine("putwchar failed!");}}}}
void good1(){goto sink;{if(_putws(L"string")==0){printLine("puts failed!");}}sink:{if(_putws(L"string")==WEOF){printLine("puts failed!");}}}
void good2(){if(5==5){{if(RENAME(OLD_GOOD_FILE_NAME,L"newgoodfilename.txt")!=0){printLine("wrename failed!");}}}else{{if(RENAME(OLD_BAD_FILE_NAME,L"newbadfilename.txt")==0){printLine("wrename failed!");}}}}
void good2(){if(static_const_five==5){{if(RENAME(OLD_GOOD_FILE_NAME,L"newgoodfilename.txt")!=0){printLine("wrename failed!");}}}else{{if(RENAME(OLD_BAD_FILE_NAME,L"newbadfilename.txt")==0){printLine("wrename failed!");}}}}
void good1(){if(global_five!=5){{if(RENAME(OLD_BAD_FILE_NAME,L"newbadfilename.txt")==0){printLine("wrename failed!");}}}else{{if(RENAME(OLD_GOOD_FILE_NAME,L"newgoodfilename.txt")!=0){printLine("wrename failed!");}}}}
void good2(){if(static_const_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==0){printLine("wscanf failed!");}}}}
void good1(){if(global_returns_f()){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==0){printLine("wscanf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");}}}}
void good1(){if(0){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC)==0){printLine("snwprintf failed!");}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){printLine("snwprintf failed!");}}}}
void good1(){switch(5){case 6:{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC)==0){printLine("snwprintf failed!");}}break;default:{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){printLine("snwprintf failed!");}}}}
void good2(){if(static_five==5){{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==NULL){exit(1);}if(GetLastError()==ERROR_ALREADY_EXISTS){exit(1);}CloseHandle(hMutex);}}else{{HANDLE hMutex=NULL;hMutex=CreateMutexW(NULL,FALSE,NULL);if(hMutex==INVALID_HANDLE_VALUE){exit(1);}if(GetLastError()==-1){exit(1);}CloseHandle(hMutex);}}}
void goodG2B2(){wchar_t * password;wchar_t password_buf[100]=L"";password=password_buf;if(static_t){{size_t password_len=0;fgetws(password,100,stdin);password_len=wcslen(password);if(password_len > 0){password[password_len-1]=L'\0';}}}else{wcscpy(password,PASSWORD);}{HANDLE pHandle;wchar_t * username=L"User";wchar_t * domain=L"Domain";if(LogonUserW(username,domain,password,LOGON32_LOGON_NETWORK,LOGON32_PROVIDER_DEFAULT,&pHandle)!=0){printLine("User logged in successfully.");CloseHandle(pHandle);}else{printLine("Unable to login.");}}}
void goodG2B(){wchar_t * password;wchar_t password_buf[100]=L"";password=password_buf;goto source;wcscpy(password,PASSWORD);source:{size_t password_len=0;fgetws(password,100,stdin);password_len=wcslen(password);if(password_len > 0){password[password_len-1]=L'\0';}}{HANDLE pHandle;wchar_t * username=L"User";wchar_t * domain=L"Domain";if(LogonUserW(username,domain,password,LOGON32_LOGON_NETWORK,LOGON32_PROVIDER_DEFAULT,&pHandle)!=0){printLine("User logged in successfully.");CloseHandle(pHandle);}else{printLine("Unable to login.");}}}
void goodG2B(){wchar_t * password;union_type my_union;wchar_t password_buf[100]=L"";password=password_buf;{size_t password_len=0;fgetws(password,100,stdin);password_len=wcslen(password);if(password_len > 0){password[password_len-1]=L'\0';}}my_union.a=password;{wchar_t * password=my_union.b;{HANDLE pHandle;wchar_t * username=L"User";wchar_t * domain=L"Domain";if(LogonUserW(username,domain,password,LOGON32_LOGON_NETWORK,LOGON32_PROVIDER_DEFAULT,&pHandle)!=0){printLine("User logged in successfully.");CloseHandle(pHandle);}else{printLine("Unable to login.");}}}}
void good1(){if(static_const_five!=5){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyA(HKEY_LOCAL_MACHINE,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyA(HKEY_CURRENT_USER,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(global_returns_f()){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_LOCAL_MACHINE,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(global_const_five!=5){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_LOCAL_MACHINE,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){int j,k;for(j=0; j < 0; j++){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_LOCAL_MACHINE,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}for(k=0; k < 1; k++){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(5!=5){{char * key="TEST\\TestKey";HKEY hKey;if(RegOpenKeyExA(HKEY_LOCAL_MACHINE,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{char * key="TEST\\TestKey";HKEY hKey;if(RegOpenKeyExA(HKEY_CURRENT_USER,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good1(){if(global_returns_t_or_f()){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}else{{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){while(0){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}break;}while(1){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}break;}}
void good1(){int j,k;for(j=0; j < 0; j++){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}for(k=0; k < 1; k++){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyA(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(5!=5){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;HUSKEY outKey;if(SHRegOpenUSKeyA(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;HUSKEY outKey;if(SHRegOpenUSKeyA(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good1(){if(static_five!=5){{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;HUSKEY outKey;if(SHRegOpenUSKeyA(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{char * key="TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;HUSKEY outKey;if(SHRegOpenUSKeyA(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good1(){if(global_const_f){{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyW(HKEY_LOCAL_MACHINE,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyW(HKEY_CURRENT_USER,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){goto sink;{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyW(HKEY_LOCAL_MACHINE,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}sink:{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyW(HKEY_CURRENT_USER,key,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}
void good2(){if(static_const_five==5){{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegOpenKeyExW(HKEY_CURRENT_USER,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegOpenKeyExW(HKEY_LOCAL_MACHINE,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}}
void good1(){if(static_returns_f()){{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegOpenKeyExW(HKEY_LOCAL_MACHINE,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegOpenKeyExW(HKEY_CURRENT_USER,key,0,KEY_WRITE,&hKey)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good2(){if(static_const_five==5){{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyW(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;if(SHRegCreateUSKeyW(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}}
void good1(){if(static_five!=5){{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;if(SHRegCreateUSKeyW(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;if(SHRegCreateUSKeyW(key,KEY_WRITE,NULL,&hKey,SHREGSET_HKCU)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(static_returns_f()){{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good1(){if(global_const_five!=5){{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else {printLine("Registry key opened successfully");}}}}
void good1(){goto sink;{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_LOCAL_MACHINE;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}sink:{wchar_t * key=L"TEST\\TestKey";HUSKEY hKey=HKEY_CURRENT_USER;HUSKEY outKey;if(SHRegOpenUSKeyW(key,KEY_WRITE,&hKey,&outKey,0)!=ERROR_SUCCESS){printLine("Registry key could not be opened");}else{printLine("Registry key opened successfully");}}}
void good2(){switch(6){case 6:{HDESK hDesk;char * dtName="DesktopExample";hDesk=CreateDesktopA(dtName,NULL,NULL,0,GENERIC_READ,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}break;default:{HDESK hDesk;char * dtName="DesktopExample";hDesk=CreateDesktopA(dtName,NULL,NULL,0,GENERIC_ALL,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}}}
void good1(){if(0){{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{char * key="TEST\\TestKey";HKEY hKey;if(RegCreateKeyExA(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void good1(){if(global_const_f){{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_ALL,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}}else{{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_READ,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else {printLine("Desktop created successfully");CloseDesktop(hDesk);}}}}
void good2(){if(global_five==5){{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_READ,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else {printLine("Desktop created successfully");CloseDesktop(hDesk);}}}else{{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_ALL,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}}}
void good1(){goto sink;{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_ALL,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}sink:{HDESK hDesk;wchar_t * dtName=L"DesktopExample";hDesk=CreateDesktopW(dtName,NULL,NULL,0,GENERIC_READ,NULL);if(hDesk==NULL){printLine("Desktop could not be created");}else{printLine("Desktop created successfully");CloseDesktop(hDesk);}}}
void good1(){if(static_five!=5){{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyExW(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else{printLine("Registry key created successfully");}}}else{{wchar_t * key=L"TEST\\TestKey";HKEY hKey;if(RegCreateKeyExW(HKEY_CURRENT_USER,key,0,NULL,REG_OPTION_NON_VOLATILE,KEY_WRITE,NULL,&hKey,NULL)!=ERROR_SUCCESS){printLine("Registry key could not be created");}else {printLine("Registry key created successfully");}}}}
void goodG2B(){wchar_t * cryptokey;wchar_t cryptokey_buf[100]=L"";cryptokey=cryptokey_buf;{size_t cryptokey_len=wcslen(cryptokey);if(100-cryptokey_len > 1){fgetws(cryptokey+cryptokey_len,(int)(100-cryptokey_len),stdin);cryptokey_len=wcslen(cryptokey);if(cryptokey_len > 0){cryptokey[cryptokey_len-1]=L'\0';}}}goodG2B_data=cryptokey;goodG2B_sink();}
void good2(){if(static_t){{HCRYPTPROV hCryptProv;BYTE pbData[4];int data;if(!CryptAcquireContextW(&hCryptProv,0,0,PROV_RSA_FULL,0)) exit(1);if(!CryptGenRandom(hCryptProv,4,pbData)){CryptReleaseContext(hCryptProv,0);exit(1);}CryptReleaseContext(hCryptProv,0);data=(int)*pbData;printIntLine(data);}}else{{int data=rand();printIntLine(data);}}}
void good1(){if(global_returns_t_or_f()){{time_t time_val=time(NULL);switch(time_val % 4){case 0:printLine("0");break;case 1:printLine("1");break;default:printLine("default");break;}}}else{{time_t time_val=time(NULL);switch(time_val % 4){case 0:printLine("0");break;case 1:printLine("1");break;default:printLine("default");break;}}}}
void good1(){if(static_const_f){{char filename[100]="";struct STAT statbuf;int fd=-1;fgets(filename,100,stdin);filename[strlen(filename)-1]='\0'; if(STAT(filename,&statbuf)==-1) exit(1);fd =OPEN(filename,O_CREAT | O_RDWR,S_IREAD|S_IWRITE);if(fd==-1) exit(1);if(WRITE(fd,"Bad Sink...",25)==-1) exit(1);if(fd!=-1) CLOSE(fd);}}else{{char filename[100]="";int fd=-1;fgets(filename,100,stdin);filename[strlen(filename)-1]='\0'; fd =OPEN(filename,O_CREAT | O_RDWR,S_IREAD|S_IWRITE);if(fd==-1) exit(1);if(WRITE(fd,"Good Sink...",25)==-1) exit(1);if(fd!=-1) CLOSE(fd);}}}
void goodG2B1(){float data;data=0.0F;if(static_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE];fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=(float)atof(input_buf);}}else{data=7.0F;}printDoubleLine((double)(100.0/data));}
void goodG2B1(){float data;data=0.0F;if(5!=5){fscanf(stdin,"%f",&data);}else{data=7.0F;}printDoubleLine((double)(100.0/data));}
void goodG2B(){float data;data=0.0F;goto source;fscanf(stdin,"%f",&data);source:data=7.0F;printDoubleLine((double)(100.0/data));}
void goodG2B(){float data;union_type my_union;data=0.0F;data=7.0F;my_union.a=data;{float data=my_union.b;printDoubleLine((double)(100.0/data));}}
void goodG2B2(){float data;data=0.0F;if(static_returns_t()){data=7.0F;}else{data=(float)RAND32();}printDoubleLine((double)(100.0/data));}
void goodG2B1(){float data;data=0.0F;if(global_f){data=0.0F;}else{data=7.0F;}printDoubleLine((double)(100.0/data));}
void goodG2B(){int h,i;float data;data=0.0F;for(h=0; h < 1; h++){data=7.0F;}for(i=0; i < 0; i++){data=0.0F;}printDoubleLine((double)(100.0/data));}
void goodG2B(){float data;data=0.0F;data=7.0F;goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){int data;data=-1;if(global_f){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}printIntLine(100/data);}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=7;}printIntLine(100/data);}
void goodG2B(){int data;data=-1;while(1){data=7;break;}while(0){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}break;}printIntLine(100/data);}
void goodG2B(){int data;data=-1;data=7;goodG2B_sink(data);}
void goodG2B(){int data;data=-1;goto source;fscanf(stdin,"%d",&data);source:data=7;printIntLine(100/data);}
void goodG2B(){int data;data=-1;data=7;{int data_copy=data;int data=data_copy;printIntLine(100/data);}}
void goodG2B2(){int data;data=-1;if(static_t){data=7;}else{fscanf(stdin,"%d",&data);}printIntLine(100 % data);}
void goodG2B1(){int data;data=-1;if(global_f){fscanf(stdin,"%d",&data);}else{data=7;}printIntLine(100 % data);}
void goodG2B(){int h,i;int data;data=-1;for(h=0; h < 1; h++){data=7;}for(i=0; i < 0; i++){fscanf(stdin,"%d",&data);}printIntLine(100 % data);}
void goodG2B(){int data;data=-1;goto source;fscanf(stdin,"%d",&data);source:data=7;printIntLine(100 % data);}
void goodG2B(){int data;data=-1;data=7;{int data_copy=data;int data=data_copy;printIntLine(100 % data);}}
void goodG2B(){int data;data=-1;data=goodG2B_source(data);printIntLine(100/data);}
void goodG2B1(){int data;data=-1;if(static_const_f){data=RAND32();}else{data=7;}printIntLine(100/data);}
void goodG2B2(){int data;data=-1;if(global_t){data=7;}else{data=RAND32();}printIntLine(100/data);}
void goodG2B2(){int data;data=-1;if(global_returns_t()){data=7;}else{data=RAND32();}printIntLine(100/data);}
void goodG2B2(){int data;data=-1;switch(6){case 6:data=7;break;default:data=RAND32();break;}printIntLine(100/data);}
void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=7;func_ptr(data);}
void goodG2B1(){int data;data=-1;if(static_const_five!=5){data=RAND32();}else{data=7;}printIntLine(100 % data);}
void goodG2B1(){int data;data=-1;if(global_returns_f()){data=RAND32();}else{data=7;}printIntLine(100 % data);}
void goodG2B(){int h,i;int data;data=-1;for(h=0; h < 1; h++){data=7;}for(i=0; i < 0; i++){data=0;}printIntLine(100/data);}
void goodG2B2(){int data;data=-1;if(static_five==5){data=7;}else{data=0;}printIntLine(100 % data);}
void goodG2B2(){int data;data=-1;if(global_const_t){data=7;}else{data=0;}printIntLine(100 % data);}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){data=0;}else{data=7;}printIntLine(100 % data);}
void goodG2B2(){int data;data=-1;switch(6){case 6:data=7;break;default:data=0;break;}printIntLine(100 % data);}
void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=7;func_ptr(data);}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;switch(6){case 6:strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");break;default:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(0){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(5!=5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(static_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_five==5){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");goodG2B_sink(data);}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_five==5){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(static_five!=5){{size_t data_len=strlen(data);if(FILENAME_MAX-data_len > 1){fgets(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_const_five==5){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);if(FILENAME_MAX-data_len > 1){fgets(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");goodG2B_sink(data);}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(1){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(5==5){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}
void goodG2B2(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_const_t){strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}else{{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");}{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[FILENAME_MAX]="";data=data_buf;{char * data=*data_ptr1;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");*data_ptr1=data;}{char * data=*data_ptr2;{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}}
void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;data=goodG2B_source(data);{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(static_five==5){wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(static_five!=5){{size_t data_len=wcslen(data);if(FILENAME_MAX-data_len > 1){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(5==5){wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}else{{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(5!=5){{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;if(static_t){wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");}else{{size_t data_len=wcslen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}}{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void good1(){if(static_five!=5){{char * filename;char * template="fnXXXXXX";FILE * tmp;filename=mktemp(template);printLine(filename);tmp=fopen(filename,"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}}}else{{char * filename;char * template="fnXXXXXX";int fd;filename=mktemp(template);printLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}}}}
void good1(){if(5!=5){{char * filename;FILE * tmp;filename=tempnam(NULL,NULL);printLine(filename);tmp=fopen(filename,"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}if(filename!=NULL){free(filename);}}}else{{char * filename;int fd;filename=tempnam(NULL,NULL);printLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}if(filename!=NULL){free(filename);}}}}
void good1(){if(global_f){{char * filename;FILE * tmp;filename=tempnam(NULL,NULL);printLine(filename);tmp=fopen(filename,"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}if(filename!=NULL){free(filename);}}}else{{char * filename;int fd;filename=tempnam(NULL,NULL);printLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}if(filename!=NULL){free(filename);}}}}
void good1(){if(global_five!=5){{char * filename;FILE * tmp;filename=tmpnam(NULL);printLine(filename);tmp=fopen(filename,"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}if(filename!=NULL){free(filename);}}}else{{char * filename;int fd;filename=tmpnam(NULL);printLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}if(filename!=NULL){free(filename);}}}}
void good2(){if(static_five==5){{wchar_t * filename;wchar_t * template=L"fnXXXXXX";int fd;filename=_wmktemp(template);printWLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}}}else{{wchar_t * filename;wchar_t * template=L"fnXXXXXX";FILE * tmp;filename=_wmktemp(template);printWLine(filename);tmp=_wfopen(filename,L"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}}}}
void good1(){{wchar_t * filename;int fd;filename=_wtempnam(NULL,NULL);printWLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file was opened...now closing file");CLOSE(fd);}if(filename!=NULL){free(filename);}}return;{wchar_t * filename;FILE * tmp;filename=_wtempnam(NULL,NULL);printWLine(filename);tmp=_wfopen(filename,L"wb+");if(tmp!=NULL){printLine("Temporary file was opened...now closing file");fclose(tmp);}if(filename!=NULL){free(filename);}}}
void good1(){while(0){{wchar_t filename[MAX_PATH]=L"";FILE * tmp;if(GetTempFileNameW(L".",NULL,0,filename)==0){exit(1);}printWLine(filename);tmp=_wfopen(filename,L"wb+");if(tmp!=NULL) fclose(tmp);}break;}while(1){{wchar_t filename[MAX_PATH]=L"";int fd;if(GetTempFileNameW(L".",NULL,0,filename)==0){exit(1);}printWLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file opened successfully");CLOSE(fd);}}break;}}
void good1(){goto sink;{wchar_t filename[MAX_PATH]=L"";FILE * tmp;if(GetTempFileNameW(L".",NULL,0,filename)==0){exit(1);}printWLine(filename);tmp=_wfopen(filename,L"wb+");if(tmp!=NULL) fclose(tmp);}sink:{wchar_t filename[MAX_PATH]=L"";int fd;if(GetTempFileNameW(L".",NULL,0,filename)==0){exit(1);}printWLine(filename);fd=OPEN(filename,O_CREAT|O_EXCL,S_IREAD|S_IWRITE);if(fd!=-1){printLine("Temporary file opened successfully");CLOSE(fd);}}}
void good1(){if(static_f){{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}else{{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){printLine("calloc() failed");exit(1);}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}}
void good1(){if(static_const_five!=5){{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}else{{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){printLine("calloc() failed");exit(1);}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}}
void good1(){{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){printLine("calloc() failed");exit(1);}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}return;{char * data=(char *)calloc(100,sizeof(char));if(data==NULL){}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}
void good2(){if(static_const_five==5){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){}printLine(data);}}}
void good2(){if(static_five==5){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){}printLine(data);}}}
void good2(){if(global_t){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){}printLine(data);}}}
void good1(){if(global_returns_t_or_f()){{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;printLine("Please enter a string: ");if(fgets(data,100,stdin)==NULL){printLine("fgets failed!");exit(1);}printLine(data);}}}
void good1(){if(global_five!=5){{FILE * file_ptr=fopen("file.txt","w+");if(file_ptr==NULL){}if(fputs("Write something to the file",stdout)==EOF){printLine("fputs failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}else{{FILE * file_ptr=fopen("file.txt","w+");if(file_ptr==NULL){printLine("The file failed to open");exit(1);}if(fputs("Write something to the file",stdout)==EOF){printLine("fputs failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}}
void good2(){if(global_returns_t()){{if(fputc((int)'A',stdout)==EOF){printLine("fputc failed!");exit(1);}}}else{{if(fputc((int)'A',stdout)==EOF){}}}}
void good2(){if(static_returns_t()){{if(fputs("string",stdout)==EOF){printLine("fputs failed!");exit(1);}}}else{{if(fputs("string",stdout)==EOF){}}}}
void good2(){if(global_const_five==5){{if(fputs("string",stdout)==EOF){printLine("fputs failed!");exit(1);}}}else{{if(fputs("string",stdout)==EOF){}}}}
void good1(){switch(5){case 6:{if(fputs("string",stdout)==EOF){}}break;default:{if(fputs("string",stdout)==EOF){printLine("fputs failed!");exit(1);}}}}
void good1(){{if(fputs("string",stdout)==EOF){printLine("fputs failed!");exit(1);}}return;{if(fputs("string",stdout)==EOF){}}}
void good2(){if(static_t){{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){printLine("fscanf failed!");exit(1);}}}else{{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){}}}}
void good2(){if(global_five==5){{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){printLine("fscanf failed!");exit(1);}}}else{{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){}}}}
void good1(){switch(5){case 6:{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){}}break;default:{char data_buf[100]="";char * data=data_buf;if(fscanf(stdin,"%99s\0",data)==EOF){printLine("fscanf failed!");exit(1);}}}}
void good1(){if(global_returns_f()){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){}}}else{{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");exit(1);}}}}
void good2(){switch(6){case 6:{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");exit(1);}}break;default:{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){}}}}
void good1(){while(0){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){}}break;}while(1){{if(fwrite((char *)"string",sizeof(char),strlen("string"),stdout)!=strlen("string")){printLine("fwrite failed!");exit(1);}}break;}}
void good2(){if(global_const_five==5){{if(putc((int)'A',stdout)==EOF){printLine("putc failed!");exit(1);}}}else{{if(putc((int)'A',stdout)==EOF){}}}}
void good1(){if(static_const_five!=5){{if(puts("string")==EOF){}}}else{{if(puts("string")==EOF){printLine("puts failed!");exit(1);}}}}
void good1(){{if(puts("string")==EOF){printLine("puts failed!");exit(1);}}return;{if(puts("string")==EOF){}}}
void good2(){if(5==5){{if(REMOVE("removemebad.txt")!=0){printLine("remove failed!");exit(1);}}}else{{if(REMOVE("removemebad.txt")!=0){}}}}
void good2(){if(static_five==5){{if(REMOVE("removemebad.txt")!=0){printLine("remove failed!");exit(1);}}}else{{if(REMOVE("removemebad.txt")!=0){}}}}
void good2(){if(static_returns_t()){{if(REMOVE("removemebad.txt")!=0){printLine("remove failed!");exit(1);}}}else{{if(REMOVE("removemebad.txt")!=0){}}}}
void good1(){if(static_f){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}}}
void good2(){if(static_t){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}}
void good2(){if(static_five==5){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}}
void good1(){if(static_returns_f()){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}}}
void good2(){if(global_returns_t()){{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}}else{{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}}
void good2(){switch(6){case 6:{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){printLine("scanf failed!");exit(1);}}break;default:{char data_buf[100]="";char * data=data_buf;if(scanf("%99s\0",data)==EOF){}}}}
void good1(){if(0){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){}}}else{{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");exit(1);}}}}
void good1(){if(global_const_five!=5){{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){}}}else{{char data_buf[100]="";char * data=data_buf;if(sscanf(SRC,"%99s\0",data)==EOF){printLine("sscanf failed!");exit(1);}}}}
void good1(){if(global_const_five!=5){{char * data=NULL;data=(char *)realloc(data,100);if(data==NULL){}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}else{{char * data=NULL;data=(char *)realloc(data,100);if(data==NULL){printLine("realloc() failed");exit(1);}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}}
void good1(){if(global_five!=5){{char * data=NULL;data=(char *)realloc(data,100);if(data==NULL){}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}else{{char * data=NULL;data=(char *)realloc(data,100);if(data==NULL){printLine("realloc() failed");exit(1);}strcpy(data,"BadSinkBody");printLine(data);if(data!=NULL){free(data);}}}}
void good2(){if(5==5){{errno_t err_code=-1;double d=(double)sqrt((double)-1);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EDOM){printLine("sqrt() failed");exit(1);}printDoubleLine(d);}}else{{errno_t err_code=-1;double d=(double)sqrt((double)-1);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EDOM){}printDoubleLine(d);}}}
void good1(){if(global_const_f){{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){}printf("%li\n",l);}}else{{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}}}
void good1(){if(global_returns_t_or_f()){{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}else{{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}}
void good1(){goto sink;{if(RpcImpersonateClient(0)!=RPC_S_OK){}}sink:{if(RpcImpersonateClient(0)!=RPC_S_OK){exit(1);}}}
void good1(){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){printLine("fgetws failed!");exit(1);}printWLine(data);}return;{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;printLine("Please enter a string: ");if(fgetws(data,100,stdin)==NULL){}printWLine(data);}}
void good2(){if(static_const_five==5){{FILE * file_ptr=_wfopen(L"file.txt",L"w+");if(file_ptr==NULL){printLine("The file failed to open");exit(1);}if(fputws(L"Write something to the file",stdout)==WEOF){printLine("fputws failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}else{{FILE * file_ptr=_wfopen(L"file.txt",L"w+");if(file_ptr==NULL){}if(fputws(L"Write something to the file",stdout)==WEOF){printLine("fputws failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}}
void good2(){if(global_five==5){{FILE * file_ptr=_wfopen(L"file.txt",L"w+");if(file_ptr==NULL){printLine("The file failed to open");exit(1);}if(fputws(L"Write something to the file",stdout)==WEOF){printLine("fputws failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}else{{FILE * file_ptr=_wfopen(L"file.txt",L"w+");if(file_ptr==NULL){}if(fputws(L"Write something to the file",stdout)==WEOF){printLine("fputws failed!");exit(1);}if(file_ptr!=NULL){fclose(file_ptr);}}}}
void good2(){if(static_const_t){{if(fwprintf(stdout,L"%s\n",L"string") < 0){printLine("fwprintf failed!");exit(1);}}}else{{if(fwprintf(stdout,L"%s\n",L"string") < 0){}}}}
void good2(){if(global_returns_t()){{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");exit(1);}}}else{{if(fputwc((wchar_t)L'A',stdout)==WEOF){}}}}
void good1(){switch(5){case 6:{if(fputwc((wchar_t)L'A',stdout)==WEOF){}}break;default:{if(fputwc((wchar_t)L'A',stdout)==WEOF){printLine("fputwc failed!");exit(1);}}}}
void good2(){if(static_const_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){printLine("fread failed!");exit(1);}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fread((wchar_t *)data,sizeof(wchar_t),(size_t)(100-1),stdin)!=100-1){}}}}
void good1(){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){printLine("fwscanf failed!");exit(1);}}return;{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(fwscanf(stdin,L"%99s\0",data)==EOF){}}}
void good1(){if(5!=5){{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){}}}else{{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");exit(1);}}}}
void good2(){if(global_t){{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){printLine("fwrite failed!");exit(1);}}}else{{if(fwrite((wchar_t *)L"string",sizeof(wchar_t),wcslen(L"string"),stdout)!=wcslen(L"string")){}}}}
void good1(){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");exit(1);}}}
void good1(){if(0){{if(putwc((wchar_t)L'A',stdout)==WEOF){}}}else{{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");exit(1);}}}}
void good2(){if(static_const_five==5){{if(putwc((wchar_t)L'A',stdout)==WEOF){printLine("putwc failed!");exit(1);}}}else{{if(putwc((wchar_t)L'A',stdout)==WEOF){}}}}
void good1(){if(global_const_f){{if(putwchar((wchar_t)L'A')==WEOF){}}}else{{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");exit(1);}}}}
void good1(){while(0){{if(putwchar((wchar_t)L'A')==WEOF){}}break;}while(1){{if(putwchar((wchar_t)L'A')==WEOF){printLine("putwchar failed!");exit(1);}}break;}}
void good1(){if(global_returns_f()){{if(REMOVE(L"removemebad.txt")!=0){}}}else{{if(REMOVE(L"removemebad.txt")!=0){printLine("wremove failed!");exit(1);}}}}
void good2(){if(static_const_five==5){{if(RENAME(OLD_GOOD_FILE_NAME,L"newgoodfilename.txt")!=0){printLine("wrename failed!");exit(1);}}}else{{if(RENAME(OLD_BAD_FILE_NAME,L"newbadfilename.txt")!=0){}}}}
void good1(){if(static_returns_f()){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");exit(1);}}}}
void good2(){if(global_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){printLine("wscanf failed!");exit(1);}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(wscanf(L"%99s\0",data)==EOF){}}}}
void good2(){if(global_t){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){printLine("snwprintf failed!");exit(1);}}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(_snwprintf(data,100-wcslen(SRC)-1,L"%s\n",SRC) < 0){}}}}
void good1(){while(0){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(swscanf(SRC,L"%99s\0",data)==EOF){}}break;}while(1){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;if(swscanf(SRC,L"%99s\0",data)==EOF){printLine("swscanf failed!");exit(1);}}break;}}
void good2(){if(static_five==5){{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){printLine("wcstombs() failed");exit(1);}printUnsignedLine(st);printLine(str);}}else{{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){}printUnsignedLine(st);printLine(str);}}}
void good2(){switch(6){case 6:{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){printLine("wcstombs() failed");exit(1);}printUnsignedLine(st);printLine(str);}break;default:{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){}printUnsignedLine(st);printLine(str);}}}
void good2(){if(5==5){{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}}else{{long l=strtol("0xfffffffff",NULL,0);printf("%li\n",l);}}}
void good2(){if(static_five==5){{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}}else{{long l=strtol("0xfffffffff",NULL,0);printf("%li\n",l);}}}
void good1(){if(global_returns_t_or_f()){{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}}else{{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}}}
void good1(){while(0){{long l=strtol("0xfffffffff",NULL,0);printf("%li\n",l);}break;}while(1){{errno_t err_code=-1;long l=strtol("0xfffffffff",NULL,0);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==ERANGE){printLine("strtol() failed");exit(1);}printf("%li\n",l);}break;}}
void good1(){{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){printLine("wcstombs() failed");exit(1);}printUnsignedLine(st);printLine(str);}}
void good1(){if(0){{size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);printUnsignedLine(st);printLine(str);}}else{{errno_t err_code=-1;size_t st=0;char str[100];str[0]='\0';st=wcstombs((char *)&str,L"\xffff",100);if(_get_errno(&err_code)){printLine("_get_errno failed");exit(1);}if(err_code==EILSEQ){printLine("wcstombs() failed");exit(1);}printUnsignedLine(st);printLine(str);}}}
static int helper_good(){FILE *file;file=fopen("myfile.txt","r+");if(file==NULL) return 0;fclose(file);return 1;}void good1(){if(global_const_f){if(helper_bad()){printLine("Success");}else{printLine("Failure");}}else{if(helper_good()){printLine("Success");}else{printLine("Failure");}}}
static int helper_good(){FILE *file;file=fopen("myfile.txt","r+");if(file==NULL) return 0;fclose(file);return 1;}void good1(){if(global_five!=5){if(helper_bad()){printLine("Success");}else{printLine("Failure");}}else{if(helper_good()){printLine("Success");}else{printLine("Failure");}}}
void goodG2B2(){int count;count=-1;if(1){count=20;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);count=atoi(input_buf);}}if(1){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}else{{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}}
void goodB2G2(){int count;count=-1;if(5==5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);count=atoi(input_buf);}}else{count=20;}if(5==5){{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}else{{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodB2G1(){int count;count=-1;if(static_returns_t()){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);count=atoi(input_buf);}}else{count=20;}if(static_returns_f()){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}else{{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}}
void goodB2G2(){int count;count=-1;if(global_const_t){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);count=atoi(input_buf);}}else{count=20;}if(global_const_t){{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}else{{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodG2B(){int count;count=-1;count=20;goodG2B_sink(count);}
void goodB2G2(){int count;count=-1;if(1){fscanf(stdin,"%d",&count);}else{count=20;}if(1){{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}else{{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodG2B1(){int count;count=-1;if(5!=5){fscanf(stdin,"%d",&count);}else{count=20;}if(5==5){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}else{{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}}
void goodB2G1(){int count;count=-1;if(global_t){fscanf(stdin,"%d",&count);}else{count=20;}if(global_f){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}else{{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}}
void goodB2G(){int count;count=-1;goto source;count=20;source:fscanf(stdin,"%d",&count);goto sink;{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}sink:{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodG2B(){int count;count=-1;count=20;{int count_copy=count;int count=count_copy;{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodB2G(){int count;void(*func_ptr)(int)=goodB2G_sink;count=-1;fscanf(stdin,"%d",&count);func_ptr(count);}
void goodG2B(){int count;count=-1;count=20;{int count_copy=count;int count=count_copy;{size_t i=0;FILE *file=NULL;const char *filename="output_bad.txt";file=fopen(filename,"w+");if(file==NULL) exit(1);for(i=0; i <(size_t)count; i++){if(strlen(SENTENCE)!=fwrite(SENTENCE,sizeof(char),strlen(SENTENCE),file)) exit(1);}if(file){fclose(file);}}}}
void goodB2G(){int count;count=-1;fscanf(stdin,"%d",&count);goodB2G_data=count;goodB2G_sink();}
void goodB2G2(){int count;count=-1;if(static_const_t){count=RAND32();}else{count=20;}if(static_const_t){{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}else{{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}
void goodG2B1(){int count;count=-1;if(static_f){count=RAND32();}else{count=20;}if(static_t){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}else{{size_t i=0;if(count > 0&&count <= 20){for(i=0; i <(size_t)count; i++){printLine("Hello");}}}}}
void goodB2G2(){char * data;data=NULL;if(static_const_five==5){data=(char *)calloc(100,sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(static_const_five==5){free(data);}else{;}}
void goodB2G2(){char * data;data=NULL;if(global_returns_t()){data=(char *)calloc(100,sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(global_returns_t()){free(data);}else{;}}
void goodB2G2(){char * data;data=NULL;if(global_const_t){data=(char *)malloc(100*sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(global_const_t){free(data);}else{;}}
void goodG2B(){char * data;union_type my_union;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}my_union.a=data;{char * data=my_union.b;;}}
void goodB2G(){char * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(static_const_five==5){;}else{free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(static_five==5){;}else{free(data);}}
void goodB2G1(){char * data;data=NULL;if(global_five==5){data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(global_five!=5){;}else{free(data);}}
void goodG2B(){char * data;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}; return;data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);;}
void goodB2G(){char * data;data=NULL;data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);goodB2G_sink(data);}
void goodG2B2(){int * data;data=NULL;if(global_const_t){{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}else{data=(int *)calloc(100,sizeof(int));data[0]=5;printIntLine(data[0]);}if(global_const_t){;}else{free(data);}}
void goodB2G1(){int * data;data=NULL;if(global_t){data=(int *)calloc(100,sizeof(int));data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_f){;}else{free(data);}}
void goodG2B2(){int * data;data=NULL;if(global_const_t){{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}else{data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);}if(global_const_t){;}else{free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_const_t){{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}else{data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);}if(static_const_t){;}else{free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_t){{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}else{data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);}if(static_t){;}else{free(data);}}
void goodB2G1(){int * data;data=NULL;if(global_const_t){data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_const_f){;}else{free(data);}}
void goodB2G2(){int * data;data=NULL;if(global_t){data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_t){free(data);}else{;}}
void goodB2G2(){int * data;data=NULL;if(global_returns_t()){data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_returns_t()){free(data);}else{;}}
void goodG2B2(){long long * data;data=NULL;if(global_const_t){{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}else{data=(long long *)calloc(100,sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}if(global_const_t){;}else{free(data);}}
void goodB2G1(){long long * data;data=NULL;if(global_five==5){data=(long long *)calloc(100,sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(global_five!=5){;}else{free(data);}}
void goodB2G1(){long long * data;data=NULL;switch(6){case 6:data=(long long *)calloc(100,sizeof(long long));data[0]=5L;printLongLongLine(data[0]);break;default:{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}break;}switch(8){case 7:; break;default:free(data);break;}}
void goodB2G1(){long long * data;data=NULL;if(5==5){data=(long long *)malloc(100*sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(5!=5){;}else{free(data);}}
void goodG2B1(){long long * data;data=NULL;if(global_const_five!=5){data=(long long *)malloc(100*sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(global_const_five==5){;}else{free(data);}}
void goodG2B2(){long long * data;data=NULL;if(global_five==5){{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}else{data=(long long *)malloc(100*sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}if(global_five==5){;}else{free(data);}}
void goodG2B(){int h,i,j,k;long long * data;data=NULL;for(h=0; h < 1; h++){{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}for(i=0; i < 0; i++){data=(long long *)malloc(100*sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}for(j=0; j < 1; j++){;}for(k=0; k < 0; k++){free(data);}}
void goodB2G1(){long long * data;data=NULL;if(global_returns_t()){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(global_returns_f()){;}else{free(data);}}
void good1(){switch(5){case 6:{char * data=(char *)malloc(100*sizeof(char));strcpy(data,"A String");printLine(data);data=(char *)realloc(data,(130000)*sizeof(char));if(data!=NULL){strcpy(data,"New String");printLine(data);free(data);}}break;default:{char * data=(char *)malloc(100*sizeof(char));char * tmp;strcpy(data,"A String");printLine(data);tmp=(char *)realloc(data,(130000)*sizeof(char));if(tmp!=NULL){data=tmp;strcpy(data,"New String");printLine(data);}free(data);}}}
void good1(){if(static_f){{int * data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);data=(int *)realloc(data,(130000)*sizeof(int));if(data!=NULL){data[0]=10;printIntLine(data[0]);free(data);}}}else{{int * data=(int *)malloc(100*sizeof(int));int * tmp;data[0]=5;printIntLine(data[0]);tmp=(int *)realloc(data,(130000)*sizeof(int));if(tmp!=NULL){data=tmp;data[0]=10;printIntLine(data[0]);}free(data);}}}
void good1(){if(static_const_five!=5){{int * data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);data=(int *)realloc(data,(130000)*sizeof(int));if(data!=NULL){data[0]=10;printIntLine(data[0]);free(data);}}}else{{int * data=(int *)malloc(100*sizeof(int));int * tmp;data[0]=5;printIntLine(data[0]);tmp=(int *)realloc(data,(130000)*sizeof(int));if(tmp!=NULL){data=tmp;data[0]=10;printIntLine(data[0]);}free(data);}}}
void good2(){if(global_const_five==5){{int * data=(int *)malloc(100*sizeof(int));int * tmp;data[0]=5;printIntLine(data[0]);tmp=(int *)realloc(data,(130000)*sizeof(int));if(tmp!=NULL){data=tmp;data[0]=10;printIntLine(data[0]);}free(data);}}else{{int * data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);data=(int *)realloc(data,(130000)*sizeof(int));if(data!=NULL){data[0]=10;printIntLine(data[0]);free(data);}}}}
void good1(){{struct _twoints * data=(struct _twoints *)malloc(100*sizeof(struct _twoints));struct _twoints * tmp;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);tmp=(struct _twoints *)realloc(data,(130000)*sizeof(struct _twoints));if(tmp!=NULL){data=tmp;data[0].a=1;data[0].b=1;printStructLine((twoints *)&data[0]);}free(data);}}
void good2(){if(static_const_t){{twoints * data=(twoints *)malloc(100*sizeof(twoints));twoints * tmp;data[0].a=0;data[0].b=0;printStructLine(&data[0]);tmp=(twoints *)realloc(data,(130000)*sizeof(twoints));if(tmp!=NULL){data=tmp;data[0].a=1;data[0].b=1;printStructLine(&data[0]);}free(data);}}else{{twoints * data=(twoints *)malloc(100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);data=(twoints *)realloc(data,(130000)*sizeof(twoints));if(data!=NULL){data[0].a=1;data[0].b=1;printStructLine(&data[0]);free(data);}}}}
void good2(){if(static_returns_t()){{twoints * data=(twoints *)malloc(100*sizeof(twoints));twoints * tmp;data[0].a=0;data[0].b=0;printStructLine(&data[0]);tmp=(twoints *)realloc(data,(130000)*sizeof(twoints));if(tmp!=NULL){data=tmp;data[0].a=1;data[0].b=1;printStructLine(&data[0]);}free(data);}}else{{twoints * data=(twoints *)malloc(100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);data=(twoints *)realloc(data,(130000)*sizeof(twoints));if(data!=NULL){data[0].a=1;data[0].b=1;printStructLine(&data[0]);free(data);}}}}
void good2(){if(global_const_t){{twoints * data=(twoints *)malloc(100*sizeof(twoints));twoints * tmp;data[0].a=0;data[0].b=0;printStructLine(&data[0]);tmp=(twoints *)realloc(data,(130000)*sizeof(twoints));if(tmp!=NULL){data=tmp;data[0].a=1;data[0].b=1;printStructLine(&data[0]);}free(data);}}else{{twoints * data=(twoints *)malloc(100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);data=(twoints *)realloc(data,(130000)*sizeof(twoints));if(data!=NULL){data[0].a=1;data[0].b=1;printStructLine(&data[0]);free(data);}}}}
void good1(){if(static_const_five!=5){{wchar_t * data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);data=(wchar_t *)realloc(data,(130000)*sizeof(wchar_t));if(data!=NULL){wcscpy(data,L"New String");printWLine(data);free(data);}}}else{{wchar_t * data=(wchar_t *)malloc(100*sizeof(wchar_t));wchar_t * tmp;wcscpy(data,L"A String");printWLine(data);tmp=(wchar_t *)realloc(data,(130000)*sizeof(wchar_t));if(tmp!=NULL){data=tmp;wcscpy(data,L"New String");printWLine(data);}free(data);}}}
void good2(){if(global_five==5){{wchar_t * data=(wchar_t *)malloc(100*sizeof(wchar_t));wchar_t * tmp;wcscpy(data,L"A String");printWLine(data);tmp=(wchar_t *)realloc(data,(130000)*sizeof(wchar_t));if(tmp!=NULL){data=tmp;wcscpy(data,L"New String");printWLine(data);}free(data);}}else{{wchar_t * data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);data=(wchar_t *)realloc(data,(130000)*sizeof(wchar_t));if(data!=NULL){wcscpy(data,L"New String");printWLine(data);free(data);}}}}
void goodB2G2(){char * data;data=NULL;if(1){{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}if(1){free(data);}else{;}}
void goodG2B1(){char * data;data=NULL;if(0){{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}if(1){;}else{free(data);}}
void goodB2G2(){char * data;data=NULL;if(5==5){{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}if(5==5){free(data);}else{;}}
void goodG2B2(){char * data;data=NULL;if(global_const_t){{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}else{{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}if(global_const_t){;}else{free(data);}}
void goodG2B2(){char * data;data=NULL;if(global_t){{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}else{{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}if(global_t){;}else{free(data);}}
void goodG2B(){char * data;data=NULL;while(1){{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}break;}while(0){{char mystring[]="mystring";data=strdup(mystring);printLine(data);}break;}while(1){; break;}while(0){free(data);break;}}
void goodG2B(){int h,i,j,k;char * data;data=NULL;for(h=0; h < 1; h++){{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}}for(i=0; i < 0; i++){{char mystring[]="mystring";data=strdup(mystring);printLine(data);}}for(j=0; j < 1; j++){;}for(k=0; k < 0; k++){free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(5==5){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);printWLine(data);}}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}}if(5==5){free(data);}else{;}}
void goodG2B1(){wchar_t * data;data=NULL;if(5!=5){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);printWLine(data);}}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}}if(5==5){;}else{free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);printWLine(data);}}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}}if(static_five==5){;}else{free(data);}}
void goodG2B(){wchar_t * data;data=NULL;if(global_returns_t_or_f()){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}}if(global_returns_t_or_f()){;}else{;}}
void goodG2B1(){struct _twoints * data;data=NULL;if(0){data=(struct _twoints *)calloc(100,sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(1){;}else{free(data);}}
void goodB2G2(){struct _twoints * data;data=NULL;if(global_returns_t()){data=(struct _twoints *)calloc(100,sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(global_returns_t()){free(data);}else{;}}
void goodG2B(){struct _twoints * data;data=NULL;if(global_returns_t_or_f()){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(global_returns_t_or_f()){;}else{;}}
void goodG2B2(){struct _twoints * data;data=NULL;switch(6){case 6:{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}break;default:data=(struct _twoints *)calloc(100,sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);break;}switch(7){case 7:; break;default:free(data);break;}}
void goodB2G(){struct _twoints * data;data=NULL;data=(struct _twoints *)calloc(100,sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);{struct _twoints * data_copy=data;struct _twoints * data=data_copy;free(data);}}
void goodB2G(){struct _twoints * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodG2B2(){struct _twoints * data;data=NULL;if(1){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{data=(struct _twoints *)malloc(100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}if(1){;}else{free(data);}}
void goodB2G2(){struct _twoints * data;data=NULL;if(static_five==5){data=(struct _twoints *)malloc(100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(static_five==5){free(data);}else{;}}
void goodG2B2(){struct _twoints * data;data=NULL;if(global_returns_t()){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{data=(struct _twoints *)malloc(100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}if(global_returns_t()){;}else{free(data);}}
void goodG2B(){struct _twoints * data;data=NULL;{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);};}
void goodB2G1(){struct _twoints * data;data=NULL;if(static_five==5){data=NULL;data=(struct _twoints *)realloc(data,100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(static_five!=5){;}else{free(data);}}
void goodG2B2(){struct _twoints * data;data=NULL;if(global_const_t){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{data=NULL;data=(struct _twoints *)realloc(data,100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}if(global_const_t){;}else{free(data);}}
void goodG2B(){struct _twoints * data;data=NULL;{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}{struct _twoints * data_copy=data;struct _twoints * data=data_copy;;}}
void goodB2G(){struct _twoints * data;struct _twoints * *data_ptr1=&data;struct _twoints * *data_ptr2=&data;data=NULL;{struct _twoints * data=*data_ptr1;data=NULL;data=(struct _twoints *)realloc(data,100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);*data_ptr1=data;}{struct _twoints * data=*data_ptr2;free(data);}}
void goodB2G(){struct _twoints * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodG2B1(){twoints * data;data=NULL;if(static_f){data=(twoints *)calloc(100,sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(static_t){;}else{free(data);}}
void goodG2B1(){twoints * data;data=NULL;if(static_returns_f()){data=(twoints *)calloc(100,sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(static_returns_t()){;}else{free(data);}}
void goodG2B1(){twoints * data;data=NULL;if(global_five!=5){data=(twoints *)calloc(100,sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(global_five==5){;}else{free(data);}}
void goodG2B(){twoints * data;twoints * *data_ptr1=&data;twoints * *data_ptr2=&data;data=NULL;{twoints * data=*data_ptr1;{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}*data_ptr1=data;}{twoints * data=*data_ptr2;;}}
void goodG2B(){twoints * data;union_type my_union;data=NULL;{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}my_union.a=data;{twoints * data=my_union.b;;}}
void goodG2B1(){twoints * data;data=NULL;if(static_const_f){data=(twoints *)malloc(100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(static_const_t){;}else{free(data);}}
void goodG2B(){twoints * data;data=NULL;if(global_returns_t_or_f()){{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(global_returns_t_or_f()){;}else{;}}
void goodB2G2(){twoints * data;data=NULL;if(static_returns_t()){data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(static_returns_t()){free(data);}else{;}}
void goodG2B2(){twoints * data;data=NULL;if(static_returns_t()){{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}else{data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);}if(static_returns_t()){;}else{free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(1){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);}if(1){;}else{free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_f){data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_t){;}else{free(data);}}
void goodG2B(){int h,i,j,k;wchar_t * data;data=NULL;for(h=0; h < 1; h++){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}for(i=0; i < 0; i++){data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);}for(j=0; j < 1; j++){;}for(k=0; k < 0; k++){free(data);}}
void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);goodB2G_data=data;goodB2G_sink();}
void goodB2G2(){wchar_t * data;data=NULL;if(static_const_t){data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_const_t){free(data);}else{;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}else{data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);}if(static_const_five==5){;}else{free(data);}}
void goodB2G2(){FILE * data;data=NULL;data=fopen("BadSource_fopen.txt","w+");if(static_const_t){if(data!=NULL){fclose(data);}}else{if(data!=NULL){CloseHandle((HANDLE)data);}}}
void goodB2G1(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);if(static_returns_f()){if(data!=NULL){CLOSE((int)data);}}else{if(data!=NULL){fclose(data);}}}
void goodB2G1(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);if(static_five!=5){if(data!=NULL){CloseHandle((HANDLE)data);}}else{if(data!=NULL){fclose(data);}}}
void goodB2G1(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);if(global_five!=5){if(data!=NULL){CloseHandle((HANDLE)data);}}else{if(data!=NULL){fclose(data);}}}
void goodB2G2(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(static_returns_t()){if(data!=-1){CLOSE(data);}}else{if(data!=-1){fclose((FILE *)data);}}}
void goodB2G2(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(global_const_t){if(data!=-1){CLOSE(data);}}else{if(data!=-1){CloseHandle((HANDLE)data);}}}
void goodB2G(){int data;void(*func_ptr)(int)=goodB2G_sink;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);func_ptr(data);}
void goodB2G1(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(global_returns_f()){if(data!=INVALID_HANDLE_VALUE){CLOSE((int)data);}}else{if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}}
void goodB2G1(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(global_five!=5){if(data!=INVALID_HANDLE_VALUE){CLOSE((int)data);}}else{if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}}
void goodB2G2(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(global_returns_t()){if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}else{if(data!=INVALID_HANDLE_VALUE){fclose((FILE *)data);}}}
void goodB2G2(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(global_const_five==5){if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}else{if(data!=INVALID_HANDLE_VALUE){fclose((FILE *)data);}}}
void goodG2B1(){char * data;data=NULL;if(static_f){data=(char *)malloc(100*sizeof(char));free(data);}else{data=(char *)malloc(100*sizeof(char));}if(static_t){free(data);}else{;}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){data=(char *)malloc(100*sizeof(char));free(data);}else{data=(char *)malloc(100*sizeof(char));}if(static_returns_t()){free(data);}else{;}}
void goodB2G(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));free(data);goodB2G_data=data;goodB2G_sink();}
void goodG2B(){int * data;data=NULL;if(global_returns_t_or_f()){data=(int *)malloc(100*sizeof(int));}else{data=(int *)malloc(100*sizeof(int));}if(global_returns_t_or_f()){free(data);}else{free(data);}}
void goodB2G1(){int * data;data=NULL;if(global_five==5){data=(int *)malloc(100*sizeof(int));free(data);}else{data=(int *)malloc(100*sizeof(int));}if(global_five!=5){free(data);}else{;}}
void goodG2B1(){int * data;data=NULL;switch(5){case 6:data=(int *)malloc(100*sizeof(int));free(data);break;default:data=(int *)malloc(100*sizeof(int));break;}switch(7){case 7:free(data);break;default:; break;}}
void goodB2G(){int h,i,j,k;int * data;data=NULL;for(h=0; h < 0; h++){data=(int *)malloc(100*sizeof(int));}for(i=0; i < 1; i++){data=(int *)malloc(100*sizeof(int));free(data);}for(j=0; j < 0; j++){free(data);}for(k=0; k < 1; k++){;}}
void goodG2B2(){long long * data;data=NULL;if(1){data=(long long *)malloc(100*sizeof(long long));}else{data=(long long *)malloc(100*sizeof(long long));free(data);}if(1){free(data);}else{;}}
void goodG2B1(){long long * data;data=NULL;if(static_f){data=(long long *)malloc(100*sizeof(long long));free(data);}else{data=(long long *)malloc(100*sizeof(long long));}if(static_t){free(data);}else{;}}
void goodG2B2(){long long * data;data=NULL;if(static_five==5){data=(long long *)malloc(100*sizeof(long long));}else{data=(long long *)malloc(100*sizeof(long long));free(data);}if(static_five==5){free(data);}else{;}}
void goodB2G2(){long long * data;data=NULL;if(global_const_five==5){data=(long long *)malloc(100*sizeof(long long));free(data);}else{data=(long long *)malloc(100*sizeof(long long));}if(global_const_five==5){;}else{free(data);}}
void goodG2B(){long long * data;long long * *data_ptr1=&data;long long * *data_ptr2=&data;data=NULL;{long long * data=*data_ptr1;data=(long long *)malloc(100*sizeof(long long));*data_ptr1=data;}{long long * data=*data_ptr2;free(data);}}
void goodB2G1(){twoints * data;data=NULL;if(static_t){data=(twoints *)malloc(100*sizeof(twoints));free(data);}else{data=(twoints *)malloc(100*sizeof(twoints));}if(static_f){free(data);}else{;}}
void goodG2B1(){twoints * data;data=NULL;if(static_returns_f()){data=(twoints *)malloc(100*sizeof(twoints));free(data);}else{data=(twoints *)malloc(100*sizeof(twoints));}if(static_returns_t()){free(data);}else{;}}
void goodB2G1(){twoints * data;data=NULL;if(global_returns_t()){data=(twoints *)malloc(100*sizeof(twoints));free(data);}else{data=(twoints *)malloc(100*sizeof(twoints));}if(global_returns_f()){free(data);}else{;}}
void goodB2G(){wchar_t * data;data=NULL;if(global_returns_t_or_f()){data=(wchar_t *)malloc(100*sizeof(wchar_t));free(data);}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));free(data);}if(global_returns_t_or_f()){;}else{;}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_const_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));free(data);}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(global_const_five==5){;}else{free(data);}}
void goodB2G(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodB2G_sink;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));free(data);func_ptr(data);}
void goodB2G2(){char * data;data=NULL;if(static_five==5){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';}if(static_five==5){;}else{printLine(data);}}
void goodB2G1(){char * data;data=NULL;if(static_returns_t()){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';}if(static_returns_f()){printLine(data);}else{;}}
void goodG2B2(){char * data;data=NULL;if(global_t){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);}if(global_t){printLine(data);}else{;}}
void goodG2B2(){char * data;data=NULL;if(global_five==5){data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';}else{data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);}if(global_five==5){printLine(data);}else{;}}
void goodG2B1(){char * data;data=NULL;switch(5){case 6:data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);break;default:data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';break;}switch(7){case 7:printLine(data);break;default:; break;}}
void goodB2G(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';free(data);goodB2G_data=data;goodB2G_sink();}
void goodB2G1(){int * data;data=NULL;if(static_t){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(static_f){printIntLine(data[0]);}else{;}}
void goodB2G2(){int * data;data=NULL;if(static_const_five==5){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(static_const_five==5){;}else{printIntLine(data[0]);}}
void goodB2G1(){int * data;data=NULL;if(static_returns_t()){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(static_returns_f()){printIntLine(data[0]);}else{;}}
void goodG2B2(){int * data;data=NULL;if(global_const_t){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}if(global_const_t){printIntLine(data[0]);}else{;}}
void goodG2B1(){int * data;data=NULL;if(global_returns_f()){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(global_returns_t()){printIntLine(data[0]);}else{;}}
void goodG2B2(){int * data;data=NULL;if(global_const_five==5){data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}else{data=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data[i]=5;}}free(data);}if(global_const_five==5){printIntLine(data[0]);}else{;}}
void goodB2G2(){long long * data;data=NULL;if(static_const_five==5){data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}free(data);}else{data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}}if(static_const_five==5){;}else{printLongLongLine(data[0]);}}
void goodB2G1(){long long * data;data=NULL;switch(6){case 6:data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}free(data);break;default:data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}break;}switch(8){case 7:printLongLongLine(data[0]);break;default:; break;}}
void goodG2B(){long long * data;union_type my_union;data=NULL;data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}my_union.a=data;{long long * data=my_union.b;printLongLongLine(data[0]);}}
void goodG2B2(){twoints * data;data=NULL;if(5==5){data=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}}else{data=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}free(data);}if(5==5){printStructLine(&data[0]);}else{;}}
void goodG2B2(){twoints * data;data=NULL;if(global_five==5){data=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}}else{data=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}free(data);}if(global_five==5){printStructLine(&data[0]);}else{;}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';free(data);}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';}if(static_five==5){printWLine(data);}else{;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';free(data);}if(global_const_t){printWLine(data);}else{;}}
void goodG2B(){wchar_t * data;data=NULL;while(1){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';break;}while(0){data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';free(data);break;}while(1){printWLine(data);break;}while(0){; break;}}
void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',100-1);data[100-1]=L'\0';free(data);{wchar_t * data_copy=data;wchar_t * data=data_copy;;}}
static char * helper_good(char * aString){size_t i=0;size_t j;char * revString=NULL;if(aString!=NULL){i=strlen(aString);revString=(char *) malloc(i+1);for(j=0; j < i; j++){revString[j]=aString[i-j-1];}revString[i]='\0';return revString;}else{return NULL;}}void good1(){if(global_const_f){{char * reversedString=helper_bad("BadSink");printLine(reversedString);}}else{{char * reversedString=helper_good("GoodSink");printLine(reversedString);}}}
static char * helper_good(char * aString){size_t i=0;size_t j;char * revString=NULL;if(aString!=NULL){i=strlen(aString);revString=(char *) malloc(i+1);for(j=0; j < i; j++){revString[j]=aString[i-j-1];}revString[i]='\0';return revString;}else{return NULL;}}void good2(){if(global_t){{char * reversedString=helper_good("GoodSink");printLine(reversedString);}}else{{char * reversedString=helper_bad("BadSink");printLine(reversedString);}}}
static char * helper_good(char * aString){size_t i=0;size_t j;char * revString=NULL;if(aString!=NULL){i=strlen(aString);revString=(char *) malloc(i+1);for(j=0; j < i; j++){revString[j]=aString[i-j-1];}revString[i]='\0';return revString;}else{return NULL;}}void good1(){if(global_returns_f()){{char * reversedString=helper_bad("BadSink");printLine(reversedString);}}else{{char * reversedString=helper_good("GoodSink");printLine(reversedString);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_t){strcpy(data,GOOD_OS_COMMAND);}else{strcpy(data,BAD_OS_COMMAND);}{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,GOOD_OS_COMMAND);{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}return;strcpy(data,BAD_OS_COMMAND);{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(0){strcpy(data,BAD_OS_COMMAND);}else{strcpy(data,GOOD_OS_COMMAND);}system(data);}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){strcpy(data,GOOD_OS_COMMAND);}else{strcpy(data,BAD_OS_COMMAND);}system(data);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_f()){strcpy(data,BAD_OS_COMMAND);}else{strcpy(data,GOOD_OS_COMMAND);}system(data);}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:strcpy(data,GOOD_OS_COMMAND);break;default:strcpy(data,BAD_OS_COMMAND);break;}system(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_f()){wcscpy(data,BAD_OS_COMMAND);}else{wcscpy(data,GOOD_OS_COMMAND);}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,GOOD_OS_COMMAND);goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){char * data;char data_buf[250]="PATH=";data=data_buf;if(0){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,NEW_PATH);}PUTENV(data);}
void goodG2B1(){char * data;char data_buf[250]="PATH=";data=data_buf;if(static_const_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,NEW_PATH);}PUTENV(data);}
void goodG2B2(){char * data;char data_buf[250]="PATH=";data=data_buf;if(5==5){strcat(data,NEW_PATH);}else{{size_t data_len=strlen(data);if(250-data_len > 1){fgets(data+data_len,(int)(250-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}PUTENV(data);}
void goodG2B2(){char * data;char data_buf[250]="PATH=";data=data_buf;if(static_const_five==5){strcat(data,NEW_PATH);}else{{size_t data_len=strlen(data);if(250-data_len > 1){fgets(data+data_len,(int)(250-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}PUTENV(data);}
void goodG2B1(){char * data;char data_buf[250]="PATH=";data=data_buf;if(global_const_f){{size_t data_len=strlen(data);if(250-data_len > 1){fgets(data+data_len,(int)(250-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcat(data,NEW_PATH);}PUTENV(data);}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[250]="PATH=";data=data_buf;strcat(data,NEW_PATH);func_ptr(data);}
void goodG2B1(){char * data;char data_buf[250]="PATH=";data=data_buf;if(global_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(250-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(250-data_len),pFile);fclose(pFile);}}}}else{strcat(data,NEW_PATH);}PUTENV(data);}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[250]="PATH=";data=data_buf;strcat(data,NEW_PATH);func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[250]=L"PATH=";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,NEW_PATH);}PUTENV(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[250]=L"PATH=";data=data_buf;switch(5){case 6:{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;default:wcscat(data,NEW_PATH);break;}PUTENV(data);}
void goodG2B(){int h,i;wchar_t * data;wchar_t data_buf[250]=L"PATH=";data=data_buf;for(h=0; h < 1; h++){wcscat(data,NEW_PATH);}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}PUTENV(data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[250]=L"PATH=";data=data_buf;if(global_five==5){wcscat(data,NEW_PATH);}else{{size_t data_len=wcslen(data);if(250-data_len > 1){fgetws(data+data_len,(int)(250-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}PUTENV(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[250]=L"PATH=";data=data_buf;if(global_five!=5){{size_t data_len=wcslen(data);FILE * pFile;if(250-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(250-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,NEW_PATH);}PUTENV(data);}
void goodB2G(){char * data;if(global_returns_t_or_f()){;}else{;}if(global_returns_t_or_f()){data="string";printLine(data);}else{data="string";printLine(data);}}
void goodG2B1(){double data;if(0){;}else{data=5.0;}if(1){printDoubleLine(data);}else{data=5.0;printDoubleLine(data);}}
void goodB2G2(){double data;if(5==5){;}else{data=5.0;}if(5==5){data=5.0;printDoubleLine(data);}else{printDoubleLine(data);}}
void goodG2B1(){double data;if(static_five!=5){;}else{data=5.0;}if(static_five==5){printDoubleLine(data);}else{data=5.0;printDoubleLine(data);}}
void goodB2G2(){double data;if(global_const_t){;}else{data=5.0;}if(global_const_t){data=5.0;printDoubleLine(data);}else{printDoubleLine(data);}}
void goodB2G1(){double * data;data=(double *)ALLOCA(10*sizeof(double));if(5==5){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(5!=5){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G(){double * data;data=(double *)ALLOCA(10*sizeof(double));goto source;{int i;for(i=0; i<10; i++){data[i]=(double)i;}}source:; goto sink;{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}sink:{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}
void goodG2B1(){double * data;data=(double *)ALLOCA(10*sizeof(double));if(global_returns_f()){{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(global_returns_t()){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G1(){double * data;double data_uninit_array[10];data=data_uninit_array;if(static_const_t){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(static_const_f){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G(){double * data;double data_uninit_array[10];data=data_uninit_array;if(global_returns_t_or_f()){;}else{;}if(global_returns_t_or_f()){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodG2B1(){double * data;double data_uninit_array[10];data=data_uninit_array;if(global_const_five!=5){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(global_const_five==5){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G(){double * data;double data_uninit_array[10];data=data_uninit_array;{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}
void goodB2G2(){double * data;double data_uninit_array[10];data=data_uninit_array;if(1){{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(1){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G2(){double * data;double data_uninit_array[10];data=data_uninit_array;if(static_const_five==5){{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(static_const_five==5){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodG2B1(){double * data;data=(double *)malloc(10*sizeof(double));if(static_const_f){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(static_const_t){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodG2B2(){double * data;data=(double *)malloc(10*sizeof(double));if(static_t){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}else{;}if(static_t){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodG2B2(){double * data;data=(double *)malloc(10*sizeof(double));if(global_five==5){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}else{;}if(global_five==5){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodG2B2(){double * data;data=(double *)malloc(10*sizeof(double));if(global_returns_t()){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}if(global_returns_t()){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}}}
void goodB2G2(){int data;switch(6){case 6:; break;default:data=5;break;}switch(7){case 7:data=5;printIntLine(data);break;default:printIntLine(data);break;}}
void goodG2B1(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(0){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(1){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G2(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(5==5){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(5==5){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G1(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(static_const_t){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(static_const_f){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodG2B2(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(static_returns_t()){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{;}if(static_returns_t()){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodG2B2(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(global_returns_t()){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{;}if(global_returns_t()){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G2(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(global_const_five==5){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_const_five==5){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodG2B(){int * data;data=(int *)ALLOCA(10*sizeof(int));while(1){{int i;for(i=0; i<10; i++){data[i]=i;}}break;}while(0){; break;}while(1){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}while(0){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}}
void goodG2B2(){int * data;data=(int *)ALLOCA(10*sizeof(int));if(static_const_t){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}if(static_const_t){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G(){int * data;data=(int *)ALLOCA(10*sizeof(int));goto source;{int i;for(i=0; i<10; i++){data[i]=i;}}source:{int i;for(i=0; i<(10/2); i++){data[i]=i;}}goto sink;{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}sink:{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}
void goodG2B1(){int * data;int data_uninit_array[10];data=data_uninit_array;if(0){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(1){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G1(){int * data;int data_uninit_array[10];data=data_uninit_array;switch(6){case 6:{int i;for(i=0; i<(10/2); i++){data[i]=i;}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}break;}switch(8){case 7:{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}}
void goodB2G2(){int * data;int data_uninit_array[10];data=data_uninit_array;switch(6){case 6:{int i;for(i=0; i<(10/2); i++){data[i]=i;}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}break;}switch(7){case 7:{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;default:{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}}
void goodG2B1(){int * data;data=(int *)malloc(10*sizeof(int));if(0){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(1){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G2(){int * data;data=(int *)malloc(10*sizeof(int));if(static_const_t){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(static_const_t){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G1(){int * data;data=(int *)malloc(10*sizeof(int));if(global_const_five==5){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_const_five!=5){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G2(){int * data;data=(int *)malloc(10*sizeof(int));if(global_const_five==5){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_const_five==5){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodG2B1(){int * data;data=(int *)malloc(10*sizeof(int));switch(5){case 6:; break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}break;}switch(7){case 7:{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}}
void goodB2G(){int h,i,j,k;int * data;data=(int *)malloc(10*sizeof(int));for(h=0; h < 0; h++){{int i;for(i=0; i<10; i++){data[i]=i;}}}for(i=0; i < 1; i++){;}for(j=0; j < 0; j++){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}for(k=0; k < 1; k++){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G(){int * data;data=(int *)malloc(10*sizeof(int));if(global_returns_t_or_f()){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}if(global_returns_t_or_f()){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}}}
void goodB2G1(){int * data;data=(int *)malloc(10*sizeof(int));switch(6){case 6:{int i;for(i=0; i<(10/2); i++){data[i]=i;}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}break;}switch(8){case 7:{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;default:{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}break;}}
void goodG2B1(){int * data;if(0){;}else{data=(int *)malloc(sizeof(int));*data=5;}if(1){printIntLine(*data);}else{data=(int *)malloc(sizeof(int));*data=5;printIntLine(*data);}}
void goodG2B1(){int * data;if(global_const_f){;}else{data=(int *)malloc(sizeof(int));*data=5;}if(global_const_t){printIntLine(*data);}else{data=(int *)malloc(sizeof(int));*data=5;printIntLine(*data);}}
void goodB2G1(){int * data;if(global_t){;}else{data=(int *)malloc(sizeof(int));*data=5;}if(global_f){printIntLine(*data);}else{data=(int *)malloc(sizeof(int));*data=5;printIntLine(*data);}}
void goodG2B2(){twoints data;if(static_const_five==5){data.a=1;data.b=2;}else{;}if(static_const_five==5){printIntLine(data.a);printIntLine(data.b);}else{data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);}}
void goodB2G1(){twoints data;if(global_const_t){;}else{data.a=1;data.b=2;}if(global_const_f){printIntLine(data.a);printIntLine(data.b);}else{data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);}}
void goodB2G1(){twoints data;if(global_const_five==5){;}else{data.a=1;data.b=2;}if(global_const_five!=5){printIntLine(data.a);printIntLine(data.b);}else{data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);}}
void goodB2G(){int h,i,j,k;twoints data;for(h=0; h < 0; h++){data.a=1;data.b=2;}for(i=0; i < 1; i++){;}for(j=0; j < 0; j++){printIntLine(data.a);printIntLine(data.b);}for(k=0; k < 1; k++){data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);}}
void goodB2G1(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(static_const_five==5){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_const_five!=5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(global_t){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_t){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B2(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(global_t){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}else{;}if(global_t){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(global_five==5){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_five==5){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G(){int h,i,j,k;twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));for(h=0; h < 0; h++){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}for(i=0; i < 1; i++){;}for(j=0; j < 0; j++){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}for(k=0; k < 1; k++){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B2(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(static_const_five==5){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}if(static_const_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B1(){twoints * data;data=(twoints *)ALLOCA(10*sizeof(twoints));if(global_f){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_t){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;twoints data_uninit_array[10];data=data_uninit_array;if(global_t){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_t){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G1(){twoints * data;twoints data_uninit_array[10];data=data_uninit_array;if(static_five==5){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_five!=5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B(){twoints * data;twoints data_uninit_array[10];data=data_uninit_array;if(global_returns_t_or_f()){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_returns_t_or_f()){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(static_const_t){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_const_t){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B1(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(static_const_five!=5){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_const_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B1(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(static_five!=5){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(global_const_t){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_const_t){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(global_returns_t()){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_returns_t()){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G(){int h,i,j,k;twoints * data;data=(twoints *)malloc(10*sizeof(twoints));for(h=0; h < 0; h++){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}for(i=0; i < 1; i++){;}for(j=0; j < 0; j++){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}for(k=0; k < 1; k++){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));goto source;; source:{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}goto sink;{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}sink:{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(static_const_five!=5){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_const_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodG2B1(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(global_const_f){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_const_t){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;data=(twoints *)malloc(10*sizeof(twoints));if(global_five==5){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_five==5){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}}
void goodB2G2(){twoints * data;if(1){;}else{data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;}if(1){data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;printIntLine(data->a);printIntLine(data->b);}else{printIntLine(data->a);printIntLine(data->b);}}
void goodG2B2(){twoints * data;if(5==5){data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;}else{;}if(5==5){printIntLine(data->a);printIntLine(data->b);}else{data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;printIntLine(data->a);printIntLine(data->b);}}
void goodB2G1(){twoints * data;if(global_t){;}else{data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;}if(global_f){printIntLine(data->a);printIntLine(data->b);}else{data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;printIntLine(data->a);printIntLine(data->b);}}
void goodG2B2(){wchar_t * data;if(static_returns_t()){data=L"string";}else{;}if(static_returns_t()){printWLine(data);}else{data=L"string";printWLine(data);}}
void goodB2G1(){wchar_t * data;if(global_const_t){;}else{data=L"string";}if(global_const_f){printWLine(data);}else{data=L"string";printWLine(data);}}
void good1(){if(0){{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);}}}else{{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);UNLINK("temp.txt");}}}}
void good1(){if(5!=5){{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);}}}else{{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);UNLINK("temp.txt");}}}}
void good2(){if(global_const_t){{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);UNLINK("temp.txt");}}}else{{FILE *f;f=FOPEN("temp.txt","w");if(f!=NULL){fprintf(f,"Temporary file");fclose(f);}}}}
void good1(){if(global_f){{FILE *f;f=FOPEN(L"temp.txt",L"w");if(f!=NULL){fwprintf(f,L"Temporary file");fclose(f);}}}else{{FILE *f;f=FOPEN(L"temp.txt",L"w");if(f!=NULL){fwprintf(f,L"Temporary file");fclose(f);UNLINK(L"temp.txt");}}}}
void good1(){switch(5){case 6:{FILE *f;f=FOPEN(L"temp.txt",L"w");if(f!=NULL){fwprintf(f,L"Temporary file");fclose(f);}}break;default:{FILE *f;f=FOPEN(L"temp.txt",L"w");if(f!=NULL){fwprintf(f,L"Temporary file");fclose(f);UNLINK(L"temp.txt");}}}}
void goodG2B(){char data;data=' ';data='a';{char char_array[4];char_array[0]='x';char_array[1]=data;char_array[2]='z';char_array[3]='\0';printLine(char_array);}}
void goodG2B2(){char data;data=' ';if(static_const_t){data='a';}else{{char ch;ch=(char)getc(stdin);data=(char)atoi(&ch);}}{char char_array[4];char_array[0]='x';char_array[1]=data;char_array[2]='z';char_array[3]='\0';printLine(char_array);}}
void goodG2B2(){char data;data=' ';if(static_t){data='a';}else{{char ch;ch=(char)getc(stdin);data=(char)atoi(&ch);}}{char char_array[4];char_array[0]='x';char_array[1]=data;char_array[2]='z';char_array[3]='\0';printLine(char_array);}}
void goodG2B1(){char data;data=' ';if(static_five!=5){{char ch;ch=(char)getc(stdin);data=(char)atoi(&ch);}}else{data='a';}{char char_array[4];char_array[0]='x';char_array[1]=data;char_array[2]='z';char_array[3]='\0';printLine(char_array);}}
void goodG2B2(){double * data;data=NULL;switch(6){case 6:data=(double *)malloc(sizeof(*data));*data=1.7E300;break;default:data=(double *)malloc(sizeof(data));*data=1.7E300;break;}printDoubleLine(*data);free(data);}
void goodG2B(){double * data;data=NULL;data=(double *)malloc(sizeof(*data));*data=1.7E300;{double * data_copy=data;double * data=data_copy;printDoubleLine(*data);free(data);}}
void goodG2B(){double * data;union_type my_union;data=NULL;data=(double *)malloc(sizeof(*data));*data=1.7E300;my_union.a=data;{double * data=my_union.b;printDoubleLine(*data);free(data);}}
void goodG2B1(){long long * data;data=NULL;if(static_f){data=(long long *)malloc(sizeof(data));*data=2147483643;}else{data=(long long *)malloc(sizeof(*data));*data=2147483643;}printLongLongLine(*data);free(data);}
void goodG2B2(){long long * data;data=NULL;switch(6){case 6:data=(long long *)malloc(sizeof(*data));*data=2147483643;break;default:data=(long long *)malloc(sizeof(data));*data=2147483643;break;}printLongLongLine(*data);free(data);}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(sizeof(*data));data->a=1;data->b=2;printStructLine(data);free(data);}
void goodG2B2(){twoints * data;data=NULL;if(global_const_five==5){data=(twoints *)malloc(sizeof(*data));data->a=1;data->b=2;}else{data=(twoints *)malloc(sizeof(data));data->a=1;data->b=2;}printStructLine(data);free(data);}
void goodG2B2(){twoints * data;data=NULL;switch(6){case 6:data=(twoints *)malloc(sizeof(*data));data->a=1;data->b=2;break;default:data=(twoints *)malloc(sizeof(data));data->a=1;data->b=2;break;}printStructLine(data);free(data);}
void good1(){if(global_returns_f()){{int array[5]={ 1,2,3,4,5};int *pointer=array;int toPrint=*(pointer+(2*sizeof(int)));printIntLine(toPrint);}}else{{int array[5]={ 1,2,3,4,5};int *pointer=array;int toPrint=*(pointer+2);printIntLine(toPrint);}}}
void good1(){goto sink;{int array[5]={ 1,2,3,4,5};int *pointer=array;int toPrint=*(pointer+(2*sizeof(int)));printIntLine(toPrint);}sink:{int array[5]={ 1,2,3,4,5};int *pointer=array;int toPrint=*(pointer+2);printIntLine(toPrint);}}
void good2(){if(global_t){{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memcpy(dst,data,sizeof(char)*(end-data));printLine(dst);}}else{{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memcpy(dst,data,sizeof(char)*(data-end));printLine(dst);}}}
void good1(){{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memcpy(dst,data,sizeof(char)*(end-data));printLine(dst);}return;{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memcpy(dst,data,sizeof(char)*(data-end));printLine(dst);}}
void good2(){if(global_t){{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memmove(dst,data,sizeof(char)*(end-data));printLine(dst);}}else{{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');memmove(dst,data,sizeof(char)*(data-end));printLine(dst);}}}
void good1(){if(static_f){{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');strncpy(dst,data,data-end);printLine(dst);}}else{{char * data=SRC_STR;char dst[100]="";char * end=strchr(data,'/');strncpy(dst,data,end-data);printLine(dst);}}}
void good1(){if(static_const_five!=5){{char * data;char string[]=SRC_STR;char * slash;size_t indexOfSlash;slash=strchr(string,'/');if(slash==NULL){exit(1);}indexOfSlash=(size_t)(string-slash);data=&(string[indexOfSlash+1]);printLine(data);}}else{{char * data;char string[]=SRC_STR;char * slash;size_t indexOfSlash;slash=strchr(string,'/');if(slash==NULL){exit(1);}indexOfSlash=(size_t)(slash-string);data=&(string[indexOfSlash+1]);printLine(data);}}}
void good1(){goto sink;{char * data;char string[]=SRC_STR;char * slash;size_t indexOfSlash;slash=strchr(string,'/');if(slash==NULL){exit(1);}indexOfSlash=(size_t)(string-slash);data=&(string[indexOfSlash+1]);printLine(data);}sink:{char * data;char string[]=SRC_STR;char * slash;size_t indexOfSlash;slash=strchr(string,'/');if(slash==NULL){exit(1);}indexOfSlash=(size_t)(slash-string);data=&(string[indexOfSlash+1]);printLine(data);}}
void good1(){if(static_f){{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(data-end); i++){dst[i]=data[i];}printWLine(dst);}}else{{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(end-data); i++){dst[i]=data[i];}printWLine(dst);}}}
void good1(){if(static_returns_f()){{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(data-end); i++){dst[i]=data[i];}printWLine(dst);}}else{{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(end-data); i++){dst[i]=data[i];}printWLine(dst);}}}
void good2(){if(global_five==5){{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(end-data); i++){dst[i]=data[i];}printWLine(dst);}}else{{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');ptrdiff_t i;for(i=0; i <(data-end); i++){dst[i]=data[i];}printWLine(dst);}}}
void good1(){if(static_const_f){{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');memcpy(dst,data,sizeof(wchar_t)*(data-end));printWLine(dst);}}else{{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');memcpy(dst,data,sizeof(wchar_t)*(end-data));printWLine(dst);}}}
void good2(){if(static_five==5){{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');memmove(dst,data,sizeof(wchar_t)*(end-data));printWLine(dst);}}else{{wchar_t * data=SRC_STR;wchar_t dst[100]=L"";wchar_t * end=wcschr(data,L'/');memmove(dst,data,sizeof(wchar_t)*(data-end));printWLine(dst);}}}
void good2(){if(5==5){{char data_buf[100]="";char * data=data_buf;strcpy(data,"abcdefghijklmnopqrstuvwxyz");memmove(data+6,data+4,10*sizeof(char));printLine(data);}}else{{char data_buf[100]="";char * data=data_buf;strcpy(data,"abcdefghijklmnopqrstuvwxyz");memcpy(data+6,data+4,10*sizeof(char));printLine(data);}}}
void good1(){switch(5){case 6:{char data_buf[100]="";char * data=data_buf;strcpy(data,"abcdefghijklmnopqrstuvwxyz");memcpy(data+6,data+4,10*sizeof(char));printLine(data);}break;default:{char data_buf[100]="";char * data=data_buf;strcpy(data,"abcdefghijklmnopqrstuvwxyz");memmove(data+6,data+4,10*sizeof(char));printLine(data);}}}
void good1(){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wcscpy(data,L"abcdefghijklmnopqrstuvwxyz");memmove(data+6,data+4,10*sizeof(wchar_t));printWLine(data);}}
void good2(){if(static_const_five==5){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wcscpy(data,L"abcdefghijklmnopqrstuvwxyz");memmove(data+6,data+4,10*sizeof(wchar_t));printWLine(data);}}else{{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wcscpy(data,L"abcdefghijklmnopqrstuvwxyz");memcpy(data+6,data+4,10*sizeof(wchar_t));printWLine(data);}}}
void good1(){{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wcscpy(data,L"abcdefghijklmnopqrstuvwxyz");memmove(data+6,data+4,10*sizeof(wchar_t));printWLine(data);}return;{wchar_t data_buf[100]=L"";wchar_t * data=data_buf;wcscpy(data,L"abcdefghijklmnopqrstuvwxyz");memcpy(data+6,data+4,10*sizeof(wchar_t));printWLine(data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;data="Good";*data_ptr1=data;}{char * data=*data_ptr2;printf("%s\n",data);}}
void goodG2B(){char * data;data=NULL;data="Good";goodG2B_sink(data);}
void goodG2B1(){int * data;data=NULL;if(0){data=NULL;}else{{int tmp=5;data=&tmp;}}printIntLine(*data);}
void goodG2B(){long long * data;data=NULL;{long long tmp=5L;data=&tmp;}goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){twoints * data;data=NULL;if(global_const_f){data=NULL;}else{{twoints tmp;tmp.a=0;tmp.b=0;data=&tmp;}}printStructLine(data);}
void goodG2B(){wchar_t * data;data=NULL;data=L"Good";wprintf(L"%s\n",data);return;data=NULL;wprintf(L"%s\n",data);}
void good1(){if(static_const_five!=5){{const char *s="shouldn\'t see this value";int x;x=(rand() % 3);switch(x){case 0:s="0";break;case 1:s="1";break;}printLine(s);}}else{{const char *s="shouldn\'t see this value";int x;x=(rand() % 3);switch(x){case 0:s="0";break;case 1:s="1";break;default:return;}printLine(s);}}}
void good2(){if(static_const_five==5){{const char *s="shouldn\'t see this value";int x;x=(rand() % 3);switch(x){case 0:s="0";break;case 1:s="1";break;default:return;}printLine(s);}}else{{const char *s="shouldn\'t see this value";int x;x=(rand() % 3);switch(x){case 0:s="0";break;case 1:s="1";break;}printLine(s);}}}
static void helper_good(int sig){g_sig=sig;}void good2(){if(static_const_t){signal(SIGINT,helper_good);}else{signal(SIGINT,helper_bad);}}
static void helper_good(int sig){g_sig=sig;}void good2(){if(global_const_five==5){signal(SIGINT,helper_good);}else{signal(SIGINT,helper_bad);}}
static void helper_good(int sig){g_sig=sig;}void good1(){int j,k;for(j=0; j < 0; j++){signal(SIGINT,helper_bad);}for(k=0; k < 1; k++){signal(SIGINT,helper_good);}}
void good1(){if(global_five!=5){{int i=rand();if(i=5){printLine("i was 5");}}}else{{int i=rand();if(i==5){printLine("i was 5");}}}}
void good2(){if(static_const_t){{int i=0;i=5;printIntLine(i);}}else{{int i=0;i==5;printIntLine(i);}}}
void good2(){if(global_returns_t()){{int x;int y;x=(rand() % 3);y=0;if(x==0){printLine("x==0");y=1;}if(y) printLine("x was 0\n");}}else{{int x;int y;x=(rand() % 3);y=0;if(x==0);{printLine("x==0");y=1;}if(y) printLine("x was 0\n");}}}
void good2(){if(global_five==5){{int x;int y;x=(rand() % 3);y=0;if(x==0){printLine("x==0");y=1;}if(y) printLine("x was 0\n");}}else{{int x;int y;x=(rand() % 3);y=0;if(x==0);{printLine("x==0");y=1;}if(y) printLine("x was 0\n");}}}
void good1(){{int x;int y;x=(rand() % 3);y=0;if(x==0){printLine("x==0");y=1;}if(y) printLine("x was 0\n");}return;{int x;int y;x=(rand() % 3);y=0;if(x==0);{printLine("x==0");y=1;}if(y) printLine("x was 0\n");}}
void good1(){if(global_returns_f()){{int x;x=(rand() % 3);switch(x){case 0:printLine("0");case 1:printLine("1");break;case 2:printLine("2");break;}}}else{{int x;x=(rand() % 3);switch(x){case 0:printLine("0");break;case 1:printLine("1");break;case 2:printLine("2");break;}}}}
void good1(){if(static_const_five!=5){{char input[INPUT_SZ];if(fgets(input,INPUT_SZ,stdin)==NULL) return;if(strstr(input,"debug")!=NULL){printLine("Log some debug info that is inappropriate for release.");}printLine("This is the actual functionality.");}}else{{char input[INPUT_SZ];if(fgets(input,INPUT_SZ,stdin)==NULL) return;printLine("This is the actual functionality.");}}}
void good1(){{char input[INPUT_SZ];if(fgets(input,INPUT_SZ,stdin)==NULL) return;printLine("This is the actual functionality.");}return;{char input[INPUT_SZ];if(fgets(input,INPUT_SZ,stdin)==NULL) return;if(strstr(input,"debug")!=NULL){printLine("Log some debug info that is inappropriate for release.");}printLine("This is the actual functionality.");}}
void good1(){if(static_returns_f()){{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){UNLINK("important_file.txt");}}}else{{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){printLine("Happy New Year!");}}}}
void good2(){if(static_returns_t()){{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){printLine("Happy New Year!");}}}else{{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){UNLINK("important_file.txt");}}}}
void good1(){if(global_f){{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){UNLINK("important_file.txt");}}}else{{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){printLine("Happy New Year!");}}}}
void good1(){if(global_const_five!=5){{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){UNLINK("important_file.txt");}}}else{{time_t time_val;time(&time_val);if(time_val > TIME_CHECK){printLine("Happy New Year!");}}}}
void good2(){if(static_t){printLine("Hello");}else{printLine("Hello");}}
void good1(){if(static_const_five!=5){printLine("Hello");}else{printLine("Hello");}}
void good2(){if(static_five==5){printLine("Hello");}else{printLine("Hello");}}
void good1(){if(0){printLine("Hello");}else{printLine("Hello");}}
void good1(){if(global_f){printLine("Hello");}else{printLine("Hello");}}
void good1(){if(static_five!=5){printLine("Hello");}else{printLine("Hello");}}
void good2(){if(global_const_five==5){printLine("Hello");}else{printLine("Hello");}}
void good2(){if(5==5){{char src[]=SRC_STR;char dst[DST_SZ];memcpy(dst,src,sizeof(src));printLine(dst);}}else{{char src[]="AAAA";char dst[5]; memcpy(dst,src,sizeof(src));printLine(dst);}}}
void good2(){if(global_const_five==5){{char src[]=SRC_STR;char dst[DST_SZ];memcpy(dst,src,sizeof(src));printLine(dst);}}else{{char src[]="AAAA";char dst[5]; memcpy(dst,src,sizeof(src));printLine(dst);}}}
void good2(){if(5==5){UMASK(022);}else{UMASK(0644);}}
void good2(){if(static_returns_t()){UMASK(022);}else{UMASK(0644);}}
void good1(){while(0){UMASK(0644);break;}while(1){UMASK(022);break;}}
void good1(){int j,k;for(j=0; j < 0; j++){UMASK(0644);}for(k=0; k < 1; k++){UMASK(022);}}
void goodB2G1(){char data;data='C';if(5!=5){;}else{printHexCharLine(data);}}
void goodB2G2(){char data;data='C';if(static_five==5){printHexCharLine(data);}else{;}}
void goodB2G1(){char data;data='C';if(static_returns_f()){;}else{printHexCharLine(data);}}
void goodB2G1(){char data;data='C';switch(5){case 6:; break;default:printHexCharLine(data);break;}}
void goodB2G1(){int data;data=5;if(static_const_f){;}else{printIntLine(data);}}
void goodB2G2(){int data;data=5;if(static_const_t){printIntLine(data);}else{;}}
void goodB2G2(){int data;data=5;if(global_t){printIntLine(data);}else{;}}
void goodB2G2(){long long data;data=5L;if(static_t){printLongLongLine(data);}else{;}}
void goodB2G2(){twoints data;data.a=0;data.b=0;if(static_five==5){printStructLine(&data);}else{;}}
void goodB2G2(){wchar_t data;data=L'W';if(static_const_t){printf("%02lx\n",data);}else{;}}
void goodB2G1(){wchar_t data;data=L'W';if(static_const_five!=5){;}else{printf("%02lx\n",data);}}
void goodB2G2(){char data;; if(global_returns_t()){data='C';printHexCharLine(data);}else{;}}
void goodB2G1(){int data;; if(global_returns_f()){;}else{data=5;printIntLine(data);}}
void goodB2G(){long long data;; data=5L;printLongLongLine(data);}
void goodB2G1(){long long data;; if(global_const_f){;}else{data=5L;printLongLongLine(data);}}
void goodB2G2(){twoints data;; if(5==5){data.a=0;data.b=0;printStructLine(&data);}else{;}}
void goodB2G1(){twoints data;; if(static_f){;}else{data.a=0;data.b=0;printStructLine(&data);}}
void goodB2G2(){twoints data;; if(static_const_five==5){data.a=0;data.b=0;printStructLine(&data);}else{;}}
void goodB2G2(){twoints data;; if(global_t){data.a=0;data.b=0;printStructLine(&data);}else{;}}
void goodB2G1(){twoints data;; switch(5){case 6:; break;default:data.a=0;data.b=0;printStructLine(&data);break;}}
void goodB2G1(){wchar_t data;; if(0){;}else{data=L'W';printf("%02lx\n",data);}}
void goodB2G2(){wchar_t data;; if(global_const_five==5){data=L'W';printf("%02lx\n",data);}else{;}}
void goodG2B1(){char data;if(global_f){data='C';}else{data='C';printHexCharLine(data);}if(global_t){data='Z';printHexCharLine(data);}else{printHexCharLine(data);}}
void goodG2B2(){char data;switch(6){case 6:data='C';printHexCharLine(data);break;default:data='C';break;}switch(7){case 7:data='Z';printHexCharLine(data);break;default:printHexCharLine(data);break;}}
void goodG2B2(){int data;if(1){data=5;printIntLine(data);}else{data=5;}if(1){data=10;printIntLine(data);}else{printIntLine(data);}}
void goodG2B(){int data;while(1){data=5;printIntLine(data);break;}while(0){data=5;break;}while(1){data=10;printIntLine(data);break;}while(0){printIntLine(data);break;}}
void goodB2G1(){long long data;if(static_five==5){data=5L;}else{data=5L;printLongLongLine(data);}if(static_five!=5){data=10L;printLongLongLine(data);}else{printLongLongLine(data);}}
void goodB2G1(){long long data;if(global_returns_t()){data=5L;}else{data=5L;printLongLongLine(data);}if(global_returns_f()){data=10L;printLongLongLine(data);}else{printLongLongLine(data);}}
void goodG2B1(){twoints data;if(static_const_f){data.a=0;data.b=0;}else{data.a=0;data.b=0;printStructLine(&data);}if(static_const_t){data.a=1;data.b=1;printStructLine(&data);}else{printStructLine(&data);}}
void goodB2G2(){twoints data;if(static_t){data.a=0;data.b=0;}else{data.a=0;data.b=0;printStructLine(&data);}if(static_t){printStructLine(&data);}else{data.a=1;data.b=1;printStructLine(&data);}}
void goodB2G2(){twoints data;if(global_t){data.a=0;data.b=0;}else{data.a=0;data.b=0;printStructLine(&data);}if(global_t){printStructLine(&data);}else{data.a=1;data.b=1;printStructLine(&data);}}
void goodB2G1(){twoints data;if(global_returns_t()){data.a=0;data.b=0;}else{data.a=0;data.b=0;printStructLine(&data);}if(global_returns_f()){data.a=1;data.b=1;printStructLine(&data);}else{printStructLine(&data);}}
void goodG2B2(){twoints data;if(global_const_five==5){data.a=0;data.b=0;printStructLine(&data);}else{data.a=0;data.b=0;}if(global_const_five==5){data.a=1;data.b=1;printStructLine(&data);}else{printStructLine(&data);}}
void goodB2G2(){twoints data;if(global_five==5){data.a=0;data.b=0;}else{data.a=0;data.b=0;printStructLine(&data);}if(global_five==5){printStructLine(&data);}else{data.a=1;data.b=1;printStructLine(&data);}}
void goodG2B(){wchar_t data;data=L'W';printf("%02lx\n",data);data=L'Z';printf("%02lx\n",data);}
void goodB2G(){wchar_t data;data=L'W';printf("%02lx\n",data);}
void goodG2B2(){wchar_t data;if(5==5){data=L'W';printf("%02lx\n",data);}else{data=L'W';}if(5==5){data=L'Z';printf("%02lx\n",data);}else{printf("%02lx\n",data);}}
void goodG2B1(){wchar_t data;if(global_const_five!=5){data=L'W';}else{data=L'W';printf("%02lx\n",data);}if(global_const_five==5){data=L'Z';printf("%02lx\n",data);}else{printf("%02lx\n",data);}}
void goodG2B(){int h,i,j,k;wchar_t data;for(h=0; h < 1; h++){data=L'W';printf("%02lx\n",data);}for(i=0; i < 0; i++){data=L'W';}for(j=0; j < 1; j++){data=L'Z';printf("%02lx\n",data);}for(k=0; k < 0; k++){printf("%02lx\n",data);}}
void good2(){if(global_returns_t()){{char c='a';char *p=&c;printHexCharLine(*p);}}else{{char *p=(char*)0x400000;printHexCharLine(*p);}}}
void goodG2B1(){void * data;twoints data_goodbuf;int data_badbuf=100;data_goodbuf.a=0;data_goodbuf.b=0;if(static_const_f){data=&data_badbuf;}else{data=&data_goodbuf;}printStructLine((twoints *)data);}
void goodG2B2(){void * data;twoints data_goodbuf;int data_badbuf=100;data_goodbuf.a=0;data_goodbuf.b=0;if(static_five==5){data=&data_goodbuf;}else{data=&data_badbuf;}printStructLine((twoints *)data);}
void goodG2B1(){void * data;twoints data_goodbuf;int data_badbuf=100;data_goodbuf.a=0;data_goodbuf.b=0;switch(5){case 6:data=&data_badbuf;break;default:data=&data_goodbuf;break;}printStructLine((twoints *)data);}
void goodG2B1(){char * data;data=NULL; if(0){{char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}printLine(data);free(data);}
void goodG2B(){char * data;data=NULL; {char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){char * data;data=NULL; if(global_f){{char data_buf[100];memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}printLine(data);free(data);}
void goodG2B(){char * data;data=NULL; if(global_returns_t_or_f()){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}else{{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}}printLine(data);free(data);}
void goodG2B1(){int * data;data=NULL; switch(5){case 6:{int * data_buf=(int *)ALLOCA(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}break;default:{int * data_buf=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}break;}printIntLine(data[0]);free(data);}
void goodG2B(){int * data;data=NULL; while(1){{int * data_buf=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}break;}while(0){{int * data_buf=(int *)ALLOCA(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}break;}printIntLine(data[0]);free(data);}
void goodG2B2(){int * data;data=NULL; if(5==5){{int * data_buf=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);free(data);}
void goodG2B1(){int * data;data=NULL; if(static_five!=5){{static int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int * data_buf=(int *)malloc(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);free(data);}
void goodG2B1(){long long * data;data=NULL; if(0){{long long * data_buf=(long long *)ALLOCA(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B2(){long long * data;data=NULL; if(global_t){{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long * data_buf=(long long *)ALLOCA(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B1(){long long * data;data=NULL; if(0){{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B1(){long long * data;data=NULL; if(static_const_five!=5){{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B2(){long long * data;data=NULL; if(static_const_five==5){{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B2(){long long * data;data=NULL; if(static_const_five==5){{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{static long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B1(){long long * data;data=NULL; if(static_returns_f()){{static long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);free(data);}
void goodG2B(){twoints * data;data=NULL; {twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}printStructLine(&data[0]);free(data);}
void goodG2B2(){twoints * data;data=NULL; if(1){{twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=(twoints *)ALLOCA(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);free(data);}
void goodG2B1(){twoints * data;data=NULL; if(global_f){{twoints * data_buf=(twoints *)ALLOCA(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);free(data);}
void goodG2B1(){twoints * data;data=NULL; switch(5){case 6:{twoints * data_buf=(twoints *)ALLOCA(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}break;default:{twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}break;}printStructLine(&data[0]);free(data);}
void goodG2B(){twoints * data;union_type my_union;data=NULL; {twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}my_union.a=data;{twoints * data=my_union.b;printStructLine(&data[0]);free(data);}}
void goodG2B(){twoints * data;data=NULL; {twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}printStructLine(&data[0]);free(data);}
void goodG2B(){twoints * data;data=NULL; {twoints * data_buf=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){wchar_t * data;data=NULL; if(0){{wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B2(){wchar_t * data;data=NULL; if(global_const_t){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B2(){wchar_t * data;data=NULL; if(static_returns_t()){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B1(){wchar_t * data;data=NULL; if(global_const_f){{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B2(){wchar_t * data;data=NULL; if(global_returns_t()){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B2(){wchar_t * data;data=NULL; if(global_const_five==5){{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);free(data);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"15");{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_f()){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"15");}if(static_returns_t()){{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcpy(data,"15");}if(global_const_f){{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;switch(6){case 6:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;default:strcpy(data,"15");break;}switch(7){case 7:{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}break;default:{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}break;}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}break;default:strcpy(data,"15");break;}switch(7){case 7:{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}break;default:{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}break;}}
void goodB2G2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_t){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcpy(data,"15");}if(static_const_t){{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}else{{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}break;default:strcpy(data,"15");break;}switch(7){case 7:{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}break;default:{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}break;}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcpy(data,"15");}if(global_const_t){{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;goto source;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}source:strcpy(data,"15");goto sink;{int i,n,v;if(sscanf(data,"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}sink:{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(1){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"15");}if(0){{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"15");}if(global_returns_f()){{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscpy(data,L"15");}if(global_returns_t()){{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){wcscpy(data,L"15");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}if(global_returns_t()){{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G(){wchar_t * data;union_type my_union;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}my_union.a=data;{wchar_t * data=my_union.b;{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_t){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"15");}if(static_const_f){{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"15");}if(static_t){{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_f){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscpy(data,L"15");}if(global_const_t){{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}}
void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"15");}if(5==5){{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodB2G2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five==5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscpy(data,L"15");}if(global_const_five==5){{int i,n,v;if(swscanf(data,L"%d",&n)==1){if(n < MAX_LOOP){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}else{{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}}
void goodG2B2(){int data;data=-1;if(static_returns_t()){data=ASSERT_VALUE+1;}else{data=ASSERT_VALUE-1;}assert(data > ASSERT_VALUE);}
void goodG2B1(){int data;data=-1;if(0){fscanf(stdin,"%d",&data);}else{data=ASSERT_VALUE+1;}assert(data > ASSERT_VALUE);}
void goodG2B1(){int data;data=-1;if(global_five!=5){fscanf(stdin,"%d",&data);}else{data=ASSERT_VALUE+1;}assert(data > ASSERT_VALUE);}
void goodG2B(){int data;data=-1;data=ASSERT_VALUE+1;assert(data > ASSERT_VALUE);}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;switch(5){case 6:; break;default:data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}
void goodG2B1(){char * data;char data_buf[100];data=data_buf;if(5!=5){;}else{data[0]='\0';}{size_t src_len;char src[100];memset(src,'C',100-1); src[100-1]='\0'; src_len=strlen(src);strncat(data,src,src_len);printLine(data);}}
void goodG2B(){char * data;char data_buf[100];data=data_buf;while(1){data[0]='\0'; break;}while(0){; break;}{size_t src_len;char src[100];memset(src,'C',100-1); src[100-1]='\0'; src_len=strlen(src);strncat(data,src,src_len);printLine(data);}}
void goodG2B(){char * data;char data_buf[100];data=data_buf;data[0]='\0'; {size_t src_len;char src[100];memset(src,'C',100-1); src[100-1]='\0'; src_len=strlen(src);strncat(data,src,src_len);printLine(data);}return;; {size_t src_len;char src[100];memset(src,'C',100-1); src[100-1]='\0'; src_len=strlen(src);strncat(data,src,src_len);printLine(data);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_f){;}else{data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(global_const_five==5){data[0]=L'\0';}else{;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100];data=data_buf;data[0]=L'\0'; func_ptr(data);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100];data=data_buf;if(static_t){data[0]=L'\0';}else{;}{size_t src_len;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; src_len=wcslen(src);wcsncat(data,src,src_len);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;while(1){data[0]=L'\0'; break;}while(0){; break;}{size_t src_len;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; src_len=wcslen(src);wcsncat(data,src,src_len);printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;data[0]=L'\0'; goodG2B_data=data;goodG2B_sink();}
static void helper_good(unsigned level){if(level==0){return;}helper_good(level-1);}void good2(){if(static_const_five==5){helper_good(5);}else{helper_bad();}}
static void helper_good(unsigned level){if(level > MAX_RECURSION){printLine("ERROR IN RECURSION");return;}if(level==0){return;}helper_good(level-1);}void good1(){if(static_f){helper_bad(UINT_MAX);}else{helper_good(UINT_MAX);}}
static void helper_good(unsigned level){if(level > MAX_RECURSION){printLine("ERROR IN RECURSION");return;}if(level==0){return;}helper_good(level-1);}void good2(){if(static_t){helper_good(UINT_MAX);}else{helper_bad(UINT_MAX);}}
void goodG2B1(){FILE * data;data=NULL; if(static_const_f){data=fopen("BadSource_fopen.txt","w+");fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(static_const_t){fclose(data);}else{;}}
void goodB2G2(){FILE * data;data=NULL; if(static_t){data=fopen("BadSource_fopen.txt","w+");fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(static_t){;}else{fclose(data);}}
void goodB2G1(){FILE * data;data=NULL; if(global_five==5){data=fopen("BadSource_fopen.txt","w+");fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(global_five!=5){fclose(data);}else{;}}
void goodG2B1(){FILE * data;data=NULL; if(global_five!=5){data=fopen("BadSource_fopen.txt","w+");fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(global_five==5){fclose(data);}else{;}}
void goodG2B(){FILE * data;data=NULL; goto source;data=fopen("BadSource_fopen.txt","w+");fclose(data);source:data=fopen("GoodSource_fopen.txt","w+");goto sink;; sink:fclose(data);}
void goodB2G(){FILE * data;void(*func_ptr)(FILE *)=goodB2G_sink;data=NULL; data=fopen("BadSource_fopen.txt","w+");fclose(data);func_ptr(data);}
void goodG2B2(){FILE * data;data=NULL; if(static_const_t){data=fopen("GoodSource_fopen.txt","w+");}else{data=freopen("BadSource_freopen.txt","w+",stdin);fclose(data);}if(static_const_t){fclose(data);}else{;}}
void goodB2G1(){FILE * data;data=NULL; if(static_t){data=freopen("BadSource_freopen.txt","w+",stdin);fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(static_f){fclose(data);}else{;}}
void goodG2B1(){FILE * data;data=NULL; if(global_returns_f()){data=freopen("BadSource_freopen.txt","w+",stdin);fclose(data);}else{data=fopen("GoodSource_fopen.txt","w+");}if(global_returns_t()){fclose(data);}else{;}}
void goodB2G(){FILE * data;data=NULL; while(0){data=fopen("GoodSource_fopen.txt","w+");break;}while(1){data=freopen("BadSource_freopen.txt","w+",stdin);fclose(data);break;}while(0){fclose(data);break;}while(1){; break;}}
void goodB2G2(){int data;data=-1; if(5==5){data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}else{data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}if(5==5){;}else{CLOSE(data);}}
void goodG2B2(){int data;data=-1; if(static_const_t){data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}else{data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}if(static_const_t){CLOSE(data);}else{;}}
void goodG2B1(){int data;data=-1; if(static_const_five!=5){data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}else{data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}if(static_const_five==5){CLOSE(data);}else{;}}
void goodB2G1(){int data;data=-1; if(static_returns_t()){data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}else{data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}if(static_returns_f()){CLOSE(data);}else{;}}
void goodG2B2(){int data;data=-1; if(global_const_t){data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}else{data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}if(global_const_t){CLOSE(data);}else{;}}
void goodG2B1(){int data;data=-1; if(global_five!=5){data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);}else{data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);}if(global_five==5){CLOSE(data);}else{;}}
void goodB2G1(){HANDLE data;data=INVALID_HANDLE_VALUE; if(5==5){data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);CloseHandle(data);}else{data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);}if(5!=5){CloseHandle(data);}else{;}}
void goodB2G2(){HANDLE data;data=INVALID_HANDLE_VALUE; if(5==5){data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);CloseHandle(data);}else{data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);}if(5==5){;}else{CloseHandle(data);}}
void goodG2B1(){HANDLE data;data=INVALID_HANDLE_VALUE; if(static_const_five!=5){data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);CloseHandle(data);}else{data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);}if(static_const_five==5){CloseHandle(data);}else{;}}
void goodB2G1(){HANDLE data;data=INVALID_HANDLE_VALUE; switch(6){case 6:data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);CloseHandle(data);break;default:data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);break;}switch(8){case 7:CloseHandle(data);break;default:; break;}}
void goodG2B2(){int data;data=-1;if(static_five==5){data=20;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=20;}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B1(){int data;data=-1;if(static_five!=5){data=INT_MAX/2+2;}else{data=20;}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B2(){int data;data=-1;if(global_t){data=20;}else{data=INT_MAX/2+2;}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B(){int data;data=-1;while(1){data=20;break;}while(0){data=INT_MAX/2+2; break;}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B(){int data;data=-1;if(global_returns_t_or_f()){data=20;}else{data=20;}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B(){int data;data=-1;data=20;{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}return;fscanf(stdin,"%d",&data);{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B(){int data;data=-1;data=goodG2B_source(data);{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void goodG2B(){int h,i;int data;data=-1;for(h=0; h < 1; h++){data=20;}for(i=0; i < 0; i++){data=RAND32();}{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}
void good1(){if(0){{char dst[DST_SZ];sprintf(dst,"%s %s",SRC_STR);printLine(dst);}}else{{char dst[DST_SZ];sprintf(dst,"%s %s",SRC_STR,SRC_STR);printLine(dst);}}}
void good2(){if(static_returns_t()){{char dst[DST_SZ];sprintf(dst,"%s %s",SRC_STR,SRC_STR);printLine(dst);}}else{{char dst[DST_SZ];sprintf(dst,"%s %s",SRC_STR);printLine(dst);}}}
void good2(){switch(6){case 6:{char dst[DST_SZ];int x=5;sprintf(dst,"%d",x);printLine(dst);}break;default:{char dst[DST_SZ];int x=5;sprintf(dst,"%s",x);printLine(dst);}}}
void goodB2G1(){char * data;data=NULL; data=(char *)calloc(100,sizeof(char));if(static_f){strcpy(data,"Initialize");printLine(data);free(data);}else{if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}}}
void goodB2G(){char * data;data=NULL; data=(char *)calloc(100,sizeof(char));while(0){strcpy(data,"Initialize");printLine(data);free(data);break;}while(1){if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}break;}}
void goodB2G2(){char * data;data=NULL; data=(char *)malloc(100);if(static_const_t){if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}}else{strcpy(data,"Initialize");printLine(data);free(data);}}
void goodB2G2(){char * data;data=NULL; data=(char *)malloc(100);if(global_const_t){if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}}else{strcpy(data,"Initialize");printLine(data);free(data);}}
void goodB2G2(){char * data;data=NULL; data=(char *)malloc(100);if(global_returns_t()){if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}}else{strcpy(data,"Initialize");printLine(data);free(data);}}
void goodB2G(){char * data;data=NULL; data=(char *)malloc(100);while(0){strcpy(data,"Initialize");printLine(data);free(data);break;}while(1){if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}break;}}
void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;data=NULL; data=(char *)malloc(100);func_ptr(data);}
void goodB2G(){char * data;data=NULL; data=goodB2G_source(data);if(data!=NULL){strcpy(data,"Initialize");printLine(data);free(data);}}
void goodB2G1(){FILE * data;data=NULL;data=fopen("file.txt","w+");if(static_returns_f()){fclose(data);}else{if(data!=NULL){fclose(data);}}}
void goodB2G1(){FILE * data;data=NULL;data=fopen("file.txt","w+");if(global_const_f){fclose(data);}else{if(data!=NULL){fclose(data);}}}
void goodB2G2(){int * data;data=NULL; data=(int *)realloc(data,100);if(global_t){if(data!=NULL){data[0]=5;printIntLine(data[0]);free(data);}}else{data[0]=5;printIntLine(data[0]);free(data);}}
void goodB2G1(){int * data;data=NULL; data=(int *)realloc(data,100);if(global_returns_f()){data[0]=5;printIntLine(data[0]);free(data);}else{if(data!=NULL){data[0]=5;printIntLine(data[0]);free(data);}}}
void goodB2G2(){long long * data;data=NULL; data=(long long *)calloc(100,sizeof(long long));if(5==5){if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}}else{data[0]=5L;printLongLongLine(data[0]);free(data);}}
void goodB2G1(){long long * data;data=NULL; data=(long long *)calloc(100,sizeof(long long));if(global_const_five!=5){data[0]=5L;printLongLongLine(data[0]);free(data);}else{if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}}}
void goodB2G1(){long long * data;data=NULL; data=(long long *)calloc(100,sizeof(long long));if(global_five!=5){data[0]=5L;printLongLongLine(data[0]);free(data);}else{if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}}}
void goodB2G2(){long long * data;data=NULL; data=(long long *)malloc(100);if(static_returns_t()){if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}}else{data[0]=5L;printLongLongLine(data[0]);free(data);}}
void goodB2G(){long long * data;data=NULL; data=(long long *)malloc(100);if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}return;data[0]=5L;printLongLongLine(data[0]);free(data);}
void goodB2G2(){long long * data;data=NULL; data=(long long *)realloc(data,100);switch(6){case 6:if(data!=NULL){data[0]=5L;printLongLongLine(data[0]);free(data);}break;default:data[0]=5L;printLongLongLine(data[0]);free(data);break;}}
void goodB2G(){twoints * data;data=NULL; data=(twoints *)calloc(100,sizeof(twoints));goodB2G_data=data;goodB2G_sink();}
void goodB2G1(){wchar_t * data;data=NULL; data=(wchar_t *)calloc(100,sizeof(wchar_t));if(5!=5){wcscpy(data,L"Initialize");printWLine(data);free(data);}else{if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}}
void goodB2G1(){wchar_t * data;data=NULL; data=(wchar_t *)calloc(100,sizeof(wchar_t));if(global_returns_f()){wcscpy(data,L"Initialize");printWLine(data);free(data);}else{if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}}
void goodB2G(){wchar_t * data;data=NULL; data=(wchar_t *)calloc(100,sizeof(wchar_t));goodB2G_data=data;goodB2G_sink();}
void goodB2G2(){wchar_t * data;data=NULL; data=(wchar_t *)malloc(100);if(5==5){if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}else{wcscpy(data,L"Initialize");printWLine(data);free(data);}}
void goodB2G1(){wchar_t * data;data=NULL; data=(wchar_t *)malloc(100);if(static_f){wcscpy(data,L"Initialize");printWLine(data);free(data);}else{if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}}
void goodB2G2(){wchar_t * data;data=NULL; data=(wchar_t *)malloc(100);if(static_returns_t()){if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}else{wcscpy(data,L"Initialize");printWLine(data);free(data);}}
void goodB2G(){wchar_t * data;data=NULL; data=(wchar_t *)malloc(100);if(global_returns_t_or_f()){if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}else{if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}}
void goodB2G(){wchar_t * data;data=NULL; data=(wchar_t *)malloc(100);goto sink;wcscpy(data,L"Initialize");printWLine(data);free(data);sink:if(data!=NULL){wcscpy(data,L"Initialize");printWLine(data);free(data);}}
void goodB2G2(){FILE * data;data=NULL;data=WFOPEN(L"file.txt",L"w+");if(static_returns_t()){if(data!=NULL){fclose(data);}}else{fclose(data);}}
void goodB2G2(){FILE * data;data=NULL;data=WFOPEN(L"file.txt",L"w+");if(global_const_t){if(data!=NULL){fclose(data);}}else{fclose(data);}}
void goodB2G1(){FILE * data;data=NULL;data=WFOPEN(L"file.txt",L"w+");if(global_returns_f()){fclose(data);}else{if(data!=NULL){fclose(data);}}}
void good2(){if(static_t){{char data;char * pointer=(char *)ALLOCA(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}}}else{{char * pointer=(char *)ALLOCA(sizeof(char));char data=*pointer; printHexCharLine(data);}}}
void good1(){if(static_returns_f()){{char * pointer=(char *)ALLOCA(sizeof(char));char data=*pointer; printHexCharLine(data);}}else{{char data;char * pointer=(char *)ALLOCA(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}}}}
void good2(){if(global_t){{char data;char * pointer=(char *)ALLOCA(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}}}else{{char * pointer=(char *)ALLOCA(sizeof(char));char data=*pointer; printHexCharLine(data);}}}
void good2(){switch(6){case 6:{char data;char * pointer=(char *)ALLOCA(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}}break;default:{char * pointer=(char *)ALLOCA(sizeof(char));char data=*pointer; printHexCharLine(data);}}}
void good1(){if(global_returns_f()){{char * pointer=(char *)malloc(sizeof(char));char data=*pointer; free(pointer);printHexCharLine(data);}}else{{char data;char * pointer=(char *)malloc(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}free(pointer);}}}
void good1(){switch(5){case 6:{char * pointer=(char *)malloc(sizeof(char));char data=*pointer; free(pointer);printHexCharLine(data);}break;default:{char data;char * pointer=(char *)malloc(sizeof(char));data=5;*pointer=data; {char data=*pointer;printHexCharLine(data);}free(pointer);}}}
void good2(){if(global_returns_t()){{char * data;char * * pointer=(char * *)ALLOCA(sizeof(char *));data="string";*pointer=data; {char * data=*pointer;printLine(data);}}}else{{char * * pointer=(char * *)ALLOCA(sizeof(char *));char * data=*pointer; printLine(data);}}}
void good1(){if(static_const_five!=5){{char * * pointer=(char * *)malloc(sizeof(char *));char * data=*pointer; free(pointer);printLine(data);}}else{{char * data;char * * pointer=(char * *)malloc(sizeof(char *));data="string";*pointer=data; {char * data=*pointer;printLine(data);}free(pointer);}}}
void good2(){if(static_const_five==5){{double * data;double * * pointer=(double * *)malloc(sizeof(double *));data=(double *)malloc(sizeof(double));*data=5.0;*pointer=data; {double * data=*pointer;printDoubleLine(*data);}free(pointer);}}else{{double * * pointer=(double * *)malloc(sizeof(double *));double * data=*pointer; free(pointer);printDoubleLine(*data);}}}
void good2(){switch(6){case 6:{int data;int * pointer=(int *)ALLOCA(sizeof(int));data=5;*pointer=data; {int data=*pointer;printIntLine(data);}}break;default:{int * pointer=(int *)ALLOCA(sizeof(int));int data=*pointer; printIntLine(data);}}}
void good1(){if(static_const_f){{int * * pointer=(int * *)ALLOCA(sizeof(int *));int * data=*pointer; printIntLine(*data);}}else{{int * data;int * * pointer=(int * *)ALLOCA(sizeof(int *));data=(int *)malloc(sizeof(int));*data=5;*pointer=data; {int * data=*pointer;printIntLine(*data);}}}}
void good2(){if(static_five==5){{int * data;int * * pointer=(int * *)ALLOCA(sizeof(int *));data=(int *)malloc(sizeof(int));*data=5;*pointer=data; {int * data=*pointer;printIntLine(*data);}}}else{{int * * pointer=(int * *)ALLOCA(sizeof(int *));int * data=*pointer; printIntLine(*data);}}}
void good1(){if(static_returns_f()){{int * * pointer=(int * *)ALLOCA(sizeof(int *));int * data=*pointer; printIntLine(*data);}}else{{int * data;int * * pointer=(int * *)ALLOCA(sizeof(int *));data=(int *)malloc(sizeof(int));*data=5;*pointer=data; {int * data=*pointer;printIntLine(*data);}}}}
void good1(){{int * data;int * * pointer=(int * *)ALLOCA(sizeof(int *));data=(int *)malloc(sizeof(int));*data=5;*pointer=data; {int * data=*pointer;printIntLine(*data);}}return;{int * * pointer=(int * *)ALLOCA(sizeof(int *));int * data=*pointer; printIntLine(*data);}}
void good2(){if(global_const_t){{int * data;int * * pointer=(int * *)malloc(sizeof(int *));data=(int *)malloc(sizeof(int));*data=5;*pointer=data; {int * data=*pointer;printIntLine(*data);}free(pointer);}}else{{int * * pointer=(int * *)malloc(sizeof(int *));int * data=*pointer; free(pointer);printIntLine(*data);}}}
void good2(){switch(6){case 6:{long long data;long long * pointer=(long long *)ALLOCA(sizeof(long long));data=5L;*pointer=data; {long long data=*pointer;printLongLongLine(data);}}break;default:{long long * pointer=(long long *)ALLOCA(sizeof(long long));long long data=*pointer; printLongLongLine(data);}}}
void good1(){if(global_returns_f()){{twoints * pointer=(twoints *)ALLOCA(sizeof(twoints));twoints data=*pointer; printIntLine(data.a);printIntLine(data.b);}}else{{twoints data;twoints * pointer=(twoints *)ALLOCA(sizeof(twoints));data.a=1;data.b=2;*pointer=data; {twoints data=*pointer;printIntLine(data.a);printIntLine(data.b);}}}}
void good1(){goto sink;{twoints * pointer=(twoints *)ALLOCA(sizeof(twoints));twoints data=*pointer; printIntLine(data.a);printIntLine(data.b);}sink:{twoints data;twoints * pointer=(twoints *)ALLOCA(sizeof(twoints));data.a=1;data.b=2;*pointer=data; {twoints data=*pointer;printIntLine(data.a);printIntLine(data.b);}}}
void good2(){if(global_t){{twoints data;twoints * pointer=(twoints *)malloc(sizeof(twoints));data.a=1;data.b=2;*pointer=data; {twoints data=*pointer;printIntLine(data.a);printIntLine(data.b);}free(pointer);}}else{{twoints * pointer=(twoints *)malloc(sizeof(twoints));twoints data=*pointer; free(pointer);printIntLine(data.a);printIntLine(data.b);}}}
void good2(){switch(6){case 6:{twoints data;twoints * pointer=(twoints *)malloc(sizeof(twoints));data.a=1;data.b=2;*pointer=data; {twoints data=*pointer;printIntLine(data.a);printIntLine(data.b);}free(pointer);}break;default:{twoints * pointer=(twoints *)malloc(sizeof(twoints));twoints data=*pointer; free(pointer);printIntLine(data.a);printIntLine(data.b);}}}
void good1(){if(static_f){{twoints * * pointer=(twoints * *)ALLOCA(sizeof(twoints *));twoints * data=*pointer; printIntLine(data->a);printIntLine(data->b);}}else{{twoints * data;twoints * * pointer=(twoints * *)ALLOCA(sizeof(twoints *));data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;*pointer=data; {twoints * data=*pointer;printIntLine(data->a);printIntLine(data->b);}}}}
void good2(){if(static_const_five==5){{twoints * data;twoints * * pointer=(twoints * *)ALLOCA(sizeof(twoints *));data=(twoints *)malloc(sizeof(twoints));data->a=5;data->b=6;*pointer=data; {twoints * data=*pointer;printIntLine(data->a);printIntLine(data->b);}}}else{{twoints * * pointer=(twoints * *)ALLOCA(sizeof(twoints *));twoints * data=*pointer; printIntLine(data->a);printIntLine(data->b);}}}
void good2(){if(static_five==5){{wchar_t * data;wchar_t * * pointer=(wchar_t * *)ALLOCA(sizeof(wchar_t *));data=L"string";*pointer=data; {wchar_t * data=*pointer;printWLine(data);}}}else{{wchar_t * * pointer=(wchar_t * *)ALLOCA(sizeof(wchar_t *));wchar_t * data=*pointer; printWLine(data);}}}
void good1(){goto sink;{wchar_t * * pointer=(wchar_t * *)ALLOCA(sizeof(wchar_t *));wchar_t * data=*pointer; printWLine(data);}sink:{wchar_t * data;wchar_t * * pointer=(wchar_t * *)ALLOCA(sizeof(wchar_t *));data=L"string";*pointer=data; {wchar_t * data=*pointer;printWLine(data);}}}
void good2(){if(static_const_five==5){{wchar_t * data;wchar_t * * pointer=(wchar_t * *)malloc(sizeof(wchar_t *));data=L"string";*pointer=data; {wchar_t * data=*pointer;printWLine(data);}free(pointer);}}else{{wchar_t * * pointer=(wchar_t * *)malloc(sizeof(wchar_t *));wchar_t * data=*pointer; free(pointer);printWLine(data);}}}
void good2(){if(global_five==5){{wchar_t * data;wchar_t * * pointer=(wchar_t * *)malloc(sizeof(wchar_t *));data=L"string";*pointer=data; {wchar_t * data=*pointer;printWLine(data);}free(pointer);}}else{{wchar_t * * pointer=(wchar_t * *)malloc(sizeof(wchar_t *));wchar_t * data=*pointer; free(pointer);printWLine(data);}}}
void goodB2G2(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}if(static_five==5){{size_t i;for(i=0; i < strlen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}else{for(; *data!='\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}{char * data_copy=data;char * data=data_copy;{size_t i;for(i=0; i < strlen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}}
void goodB2G(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';data=goodB2G_source(data);{size_t i;for(i=0; i < strlen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';strcpy(data,BAD_SRC_FIXED);goodB2G_sink(data);}
void goodB2G2(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}if(global_returns_t()){{size_t i;for(i=0; i < strlen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}else{for(; *data!='\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}if(static_t){{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}else{for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G(){int j,k;wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}for(j=0; j < 0; j++){for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}for(k=0; k < 1; k++){{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}}
void goodB2G2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';wcscpy(data,BAD_SRC_FIXED);if(static_five==5){{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}else{for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';wcscpy(data,BAD_SRC_FIXED);if(static_returns_f()){for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}else{{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}}
void goodB2G2(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';wcscpy(data,BAD_SRC_FIXED);if(static_returns_t()){{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}else{for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}
void goodB2G1(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}if(global_returns_f()){for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}else{{size_t i;for(i=0; i < wcslen(data); i++){if(data[i]==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}}}
void goodB2G2(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);if(static_const_five==5){if(data!=NULL){fclose(data);}}else{;}}
void goodB2G(){FILE * data;FILE * *data_ptr1=&data;FILE * *data_ptr2=&data;data=NULL;{FILE * data=*data_ptr1;data=freopen("BadSource_freopen.txt","w+",stdin);*data_ptr1=data;}{FILE * data=*data_ptr2;if(data!=NULL){fclose(data);}}}
void goodB2G2(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(static_const_five==5){if(data!=-1){CLOSE(data);}}else{;}}
void goodB2G1(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(global_const_f){;}else{if(data!=-1){CLOSE(data);}}}
void goodB2G2(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);switch(6){case 6:if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}break;default:; break;}}
void good2(){if(static_t){{char path[MAX_PATH];DWORD length;length=GetCurrentDirectoryA(MAX_PATH,path);if(length==0||length >= MAX_PATH) exit(1); if(!PathAppendA(path,"AAAAAAAAAAAA")) exit(1);printLine(path);}}else{{char path[BAD_SZ];DWORD length;length=GetCurrentDirectoryA(BAD_SZ,path);if(length==0||length >= BAD_SZ) exit(1); if(!PathAppendA(path,"AAAAAAAAAAAA")) exit(1);printSizeTLine(strlen(path));printIntLine(BAD_SZ);printLine(path);}}}
void good1(){int j,k;for(j=0; j < 0; j++){{char path[BAD_SZ];DWORD length;length=GetCurrentDirectoryA(BAD_SZ,path);if(length==0||length >= BAD_SZ) exit(1); if(!PathAppendA(path,"AAAAAAAAAAAA")) exit(1);printSizeTLine(strlen(path));printIntLine(BAD_SZ);printLine(path);}}for(k=0; k < 1; k++){{char path[MAX_PATH];DWORD length;length=GetCurrentDirectoryA(MAX_PATH,path);if(length==0||length >= MAX_PATH) exit(1); if(!PathAppendA(path,"AAAAAAAAAAAA")) exit(1);printLine(path);}}}
void goodB2G(){int data;void(*func_ptr)(int)=goodB2G_sink;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}func_ptr(data);}
void goodG2B2(){int data;data=-1;if(static_returns_t()){data=20;}else{data=10000;}if(static_returns_t()){{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}else{{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G(){int data;void(*func_ptr)(int)=goodB2G_sink;data=-1;data=10000;func_ptr(data);}
void goodG2B2(){int data;data=-1;if(static_const_t){data=20;}else{fscanf(stdin,"%d",&data);}if(static_const_t){{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}else{{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodG2B(){int data;data=-1;goto source;fscanf(stdin,"%d",&data);source:data=20;goto sink;{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}sink:{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}
void goodB2G(){int data;int *data_ptr1=&data;int *data_ptr2=&data;data=-1;{int data=*data_ptr1;fscanf(stdin,"%d",&data);*data_ptr1=data;}{int data=*data_ptr2;{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G(){int data;data=-1;fscanf(stdin,"%d",&data);goodB2G_sink(data);}
void goodB2G1(){int data;data=-1;if(5==5){data=RAND32();}else{data=20;}if(5!=5){{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}else{{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G(){int data;data=-1;data=RAND32();goodB2G_sink(data);}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink(data);}
void goodB2G(){int data;data=-1;data=10000;{int data_copy=data;int data=data_copy;{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=(wchar_t *)malloc(data*sizeof(wchar_t));wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);free(wchar_t_string);}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink(data);}
void goodB2G(){int data;data=-1;data=RAND32();goodB2G_data=data;goodB2G_sink();}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;goto source;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}source:strcat(data,"*.*");EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char * data_copy=data;char * data=data_copy;EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_t){strcat(data,"*.*");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B(){int h,i;char * data;char data_buf[100]="";data=data_buf;for(h=0; h < 1; h++){strcat(data,"*.*");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t()){strcat(data,"*.*");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B1(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;if(global_const_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"*.*");}{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B(){char * data;union_type my_union;char data_buf[100]=FULL_COMMAND;data=data_buf;strcat(data,"*.*");my_union.a=data;{char * data=my_union.b;{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}}
void goodG2B(){int h,i;char * data;char data_buf[100]="";data=data_buf;for(h=0; h < 1; h++){strcat(data,"*.*");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(5==5){strcat(data,"*.*");}else{{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_const_f){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_f()){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcat(data,"*.*");}EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char * data_copy=data;char * data=data_copy;{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_const_five==5){strcat(data,"*.*");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_t){strcat(data,"*.*");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(data);}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;char data_buf[100]=FULL_COMMAND;data=data_buf;{char * data=*data_ptr1;strcat(data,"*.*");*data_ptr1=data;}{char * data=*data_ptr2;{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}}
void goodG2B(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;strcat(data,"*.*");goodG2B_sink(data);}
void goodG2B1(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;if(5!=5){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}else{strcat(data,"*.*");}system(data);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;if(global_returns_t_or_f()){strcat(data,"*.*");}else{strcat(data,"*.*");}_spawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_const_five==5){strcat(data,"*.*");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}_spawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}break;default:strcat(data,"*.*");break;}_spawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char * data_copy=data;char * data=data_copy;{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(1){strcat(data,"*.*");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_five==5){strcat(data,"*.*");}else{{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_data=data;goodG2B_sink();}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char * data_copy=data;char * data=data_copy;EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}}
void goodG2B(){int h,i;char * data;char data_buf[100]="";data=data_buf;for(h=0; h < 1; h++){strcat(data,"*.*");}for(i=0; i < 0; i++){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(1){strcat(data,"*.*");}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(global_t){strcat(data,"*.*");}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;switch(5){case 6:{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;default:strcat(data,"*.*");break;}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(static_returns_f()){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;strcat(data,"*.*");goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;if(static_const_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}system(data);}
void goodG2B2(){char * data;char data_buf[100]="";data=data_buf;if(static_five==5){strcat(data,"*.*");}else{{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}_spawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_const_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}_spawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_five!=5){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}_spawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(data);}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);_spawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(0){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B1(){char * data;char data_buf[100]="";data=data_buf;if(global_f){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{strcat(data,"*.*");}{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;goto source;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}source:strcat(data,"*.*");{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");{char * data_copy=data;char * data=data_copy;{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnv(_P_WAIT,COMMAND_INT_PATH,args);}}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;strcat(data,"*.*");func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_t){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");{wchar_t * data_copy=data;wchar_t * data=data_copy;EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;wcscat(data,L"*.*");*data_ptr1=data;}{wchar_t * data=*data_ptr2;EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_const_f){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;for(h=0; h < 1; h++){wcscat(data,L"*.*");}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;goto source;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}source:wcscat(data,L"*.*");{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(global_returns_t_or_f()){wcscat(data,L"*.*");}else{wcscat(data,L"*.*");}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(global_five==5){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B(){int h,i;wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;for(h=0; h < 1; h++){wcscat(data,L"*.*");}for(i=0; i < 0; i++){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(static_const_t){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}_wsystem(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(static_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}_wsystem(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(5){case 6:{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;default:wcscat(data,L"*.*");break;}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:wcscat(data,L"*.*");break;default:{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5==5){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}}else{wcscat(data,L"*.*");}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnv(_P_WAIT,COMMAND_INT_PATH,args);}return;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;while(1){wcscat(data,L"*.*");break;}while(0){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}break;}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscat(data,L"*.*");}EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;while(1){wcscat(data,L"*.*");break;}while(0){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;wcscat(data,L"*.*");*data_ptr1=data;}{wchar_t * data=*data_ptr2;{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(5==5){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(global_const_five==5){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_f){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscat(data,L"*.*");}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_t){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(5){case 6:{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}break;default:wcscat(data,L"*.*");break;}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");func_ptr(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_f){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}}else{wcscat(data,L"*.*");}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnvp(_P_WAIT,COMMAND_INT,args);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;wchar_t data_buf[100]=L"";data=data_buf;{wchar_t * data=*data_ptr1;wcscat(data,L"*.*");*data_ptr1=data;}{wchar_t * data=*data_ptr2;EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_f()){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(5){case 6:{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;default:wcscat(data,L"*.*");break;}{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");{wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECVP(COMMAND_INT,args);}}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(global_f){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;if(global_const_five!=5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}_wsystem(data);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(static_returns_f()){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_const_f){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:wcscat(data,L"*.*");break;default:{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;}_wspawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(5!=5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_t){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_returns_t()){wcscat(data,L"*.*");}else{{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B1(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;if(global_five!=5){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}}else{wcscat(data,L"*.*");}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B2(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;switch(6){case 6:wcscat(data,L"*.*");break;default:{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}break;}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);return;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;goto source;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}source:wcscat(data,L"*.*");{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnv(_P_WAIT,COMMAND_INT_PATH,args);}}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(data);}
void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}
void goodG2B(){char * data;data=NULL;if(global_returns_t_or_f()){data=new char[100];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);delete [] data;}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:data=new char[100];data[0]='\0'; break;default:data=new char[50];data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;goto source;data=new char[50];data[0]='\0'; source:data=new char[100];data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);delete [] data;}}
void goodG2B2(){char * data;data=NULL;if(5==5){data=new char[100];data[0]='\0';}else{data=new char[50];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_f){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; goodG2B_sink(&data);}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; {size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; {size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);delete [] data;}return;data=new char[50];data[0]='\0'; {size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; goodG2B_sink_b(data);}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_f){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; goodG2B_sink(data);}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncat(data,src,100);printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_f){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){data=new char[50];data[0]='\0';}else{data=new char[100];data[0]='\0';}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:data=new char[100];data[0]='\0'; break;default:data=new char[50];data[0]='\0'; break;}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];data[0]='\0'; {char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);delete [] data;}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;data=new char[100];data[0]='\0'; *data_ptr1=data;}{char * data=*data_ptr2;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);delete [] data;}}}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];{twointsclass src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0].a);delete [] data;}}}
void goodG2B(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodG2B_sink;data=NULL;data=new twointsclass[100];func_ptr(data);}
void goodG2B2(){twointsclass * data;data=NULL;if(global_const_t){data=new twointsclass[100];}else{data=new twointsclass[50];}{twointsclass src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twointsclass));printIntLine(data[0].a);delete [] data;}}
void goodG2B(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodG2B_sink;data=NULL;data=new twointsclass[100];func_ptr(data);}
void goodG2B(){twointsclass * data;data=NULL;goto source;data=new twointsclass[50];source:data=new twointsclass[100];{twointsclass src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twointsclass));printIntLine(data[0].a);delete [] data;}}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];{twointsclass * data_copy=data;twointsclass * data=data_copy;{twointsclass src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memmove(data,src,100*sizeof(twointsclass));printIntLine(data[0].a);delete [] data;}}}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];goodG2B_sink_b(data);}
void goodG2B(){int * data;data=NULL;if(global_returns_t_or_f()){data=new int[100];}else{data=new int[100];}{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);delete [] data;}}}
void goodG2B(){int * data;data=NULL;goodG2B_source(data);{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);delete [] data;}}}
void goodG2B2(){int * data;data=NULL;if(static_const_five==5){data=new int[100];}else{data=new int[50];}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}
void goodG2B2(){int * data;data=NULL;if(global_const_five==5){data=new int[100];}else{data=new int[50];}{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}
void goodG2B(){int * data;int * &data_ref=data;data=NULL;data=new int[100];{int * data=data_ref;{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}}
void goodG2B(){int * data;data=NULL;data=new int[100];goodG2B_sink_b(data);}
void goodG2B2(){int * data;data=NULL;if(global_returns_t()){data=new int[100];}else{data=new int[50];}{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}
void goodG2B2(){long long * data;data=NULL;if(static_five==5){data=new long long[100];}else{data=new long long[50];}{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);delete [] data;}}}
void goodG2B(){long long * data;data=NULL;if(global_returns_t_or_f()){data=new long long[100];}else{data=new long long[100];}{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);delete [] data;}}}
void goodG2B(){long long * data;data=NULL;data=new long long[100];{long long * data_copy=data;long long * data=data_copy;{long long src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printLongLongLine(data[0]);delete [] data;}}}}
void goodG2B(){long long * data;void(*func_ptr)(long long *)=goodG2B_sink;data=NULL;data=new long long[100];func_ptr(data);}
void goodG2B1(){long long * data;data=NULL;if(5!=5){data=new long long[50];}else{data=new long long[100];}{long long src[100]={0}; memcpy(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}
void goodG2B2(){long long * data;data=NULL;if(static_const_five==5){data=new long long[100];}else{data=new long long[50];}{long long src[100]={0}; memcpy(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}
void goodG2B(){long long * data;union_type my_union;data=NULL;data=new long long[100];my_union.a=data;{long long * data=my_union.b;{long long src[100]={0}; memcpy(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}}
void goodG2B1(){long long * data;data=NULL;if(static_f){data=new long long[50];}else{data=new long long[100];}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}
void goodG2B1(){long long * data;data=NULL;if(static_returns_f()){data=new long long[50];}else{data=new long long[100];}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}
void goodG2B2(){long long * data;data=NULL;if(global_const_t){data=new long long[100];}else{data=new long long[50];}{long long src[100]={0}; memmove(data,src,100*sizeof(long long));printLongLongLine(data[0]);delete [] data;}}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_data=data;goodG2B_sink();}
void goodG2B(){long long * data;long long * data_array[5];data=NULL;data=new long long[100];data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){data=new wchar_t[50];data[0]=L'\0';}else{data=new wchar_t[100];data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_five==5){data=new wchar_t[100];data[0]=L'\0';}else{data=new wchar_t[50];data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);delete [] data;}return;data=new wchar_t[50];data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;data=new wchar_t[100];data[0]=L'\0'; my_union.a=data;{wchar_t * data=my_union.b;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);delete [] data;}}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; goodG2B_sink_b(data);}
void goodG2B2(){wchar_t * data;data=NULL;if(5==5){data=new wchar_t[100];data[0]=L'\0';}else{data=new wchar_t[50];data[0]=L'\0';}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_f){data=new wchar_t[50];data[0]=L'\0';}else{data=new wchar_t[100];data[0]=L'\0';}{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_t){data=new wchar_t[100];data[0]=L'\0';}else{data=new wchar_t[50];data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;switch(6){case 6:data=new wchar_t[100];data[0]=L'\0'; break;default:data=new wchar_t[50];data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_t){data=new wchar_t[100];data[0]=L'\0';}else{data=new wchar_t[50];data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}return;data=new wchar_t[50];data[0]=L'\0'; {wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t[100];data[0]=L'\0'; my_struct.a=data;goodG2B_sink(my_struct);}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){data=new wchar_t[100];data[0]=L'\0';}else{data=new wchar_t[50];data[0]=L'\0';}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;switch(6){case 6:data=new wchar_t[100];data[0]=L'\0'; break;default:data=new wchar_t[50];data[0]=L'\0'; break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; {wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);delete [] data;}}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; goodG2B_sink_b(data);}
void goodG2B2(){char * data;data=new char[100];if(1){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);delete [] data;}}
void goodG2B2(){char * data;data=new char[100];if(global_const_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);delete [] data;}}
void goodG2B2(){char * data;data=new char[100];if(global_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";strcat(dest,data);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=new char[100];goto source;memset(data,'A',100-1); data[100-1]='\0'; source:memset(data,'A',50-1); data[50-1]='\0'; {char dest[50]="";strcat(dest,data);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=new char[100];data=goodG2B_source(data);{char dest[50]="";strcat(dest,data);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink_b(data);}
void goodG2B1(){char * data;data=new char[100];if(global_const_f){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strcpy(dest,data);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; {char dest[50]="";strcpy(dest,data);printLine(data);delete [] data;}return;memset(data,'A',100-1); data[100-1]='\0'; {char dest[50]="";strcpy(dest,data);printLine(data);delete [] data;}}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink(data);}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; goodG2B_data=data;goodG2B_sink();}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink_b(data);}
void goodG2B(){char * data;char * &data_ref=data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; {char * data=data_ref;{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);delete [] data;}}}
void goodG2B2(){char * data;data=new char[100];if(global_t){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=new char[100];if(global_returns_f()){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=new char[100];if(static_returns_f()){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";memmove(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);delete [] data;}}
void goodG2B1(){char * data;data=new char[100];if(static_returns_f()){memset(data,'A',100-1); data[100-1]='\0';}else{memset(data,'A',50-1); data[50-1]='\0';}{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);delete [] data;}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; func_ptr(data);}
void goodG2B(){char * data;data=new char[100];memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink(&data);}
void goodG2B2(){char * data;data=new char[100];if(global_five==5){memset(data,'A',50-1); data[50-1]='\0';}else{memset(data,'A',100-1); data[100-1]='\0';}{char dest[50]="";_snprintf(dest,strlen(data),"%s",data);printLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(global_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t * data_copy=data;wchar_t * data=data_copy;{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);delete [] data;}}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(global_five==5){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];switch(5){case 6:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;default:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;}{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=new wchar_t[100];{wchar_t * data=*data_ptr1;wmemset(data,L'A',50-1); data[50-1]=L'\0'; *data_ptr1=data;}{wchar_t * data=*data_ptr2;{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);delete [] data;}}}
void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(static_f){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);delete [] data;}return;wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=new wchar_t[100];{wchar_t * data=*data_ptr1;wmemset(data,L'A',50-1); data[50-1]=L'\0'; *data_ptr1=data;}{wchar_t * data=*data_ptr2;{wchar_t dest[50]=L"";size_t i,data_len;data_len=wcslen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]=L'\0'; printWLine(data);delete [] data;}}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(global_returns_f()){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];if(global_returns_t_or_f()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];switch(6){case 6:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;default:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;}{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];switch(5){case 6:wmemset(data,L'A',100-1); data[100-1]=L'\0'; break;default:wmemset(data,L'A',50-1); data[50-1]=L'\0'; break;}{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}return;wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];goodG2B_source(data);{wchar_t dest[50]=L"";memmove(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(5!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(global_const_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];goto source;wmemset(data,L'A',100-1); data[100-1]=L'\0'; source:wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(global_const_t){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(global_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];goodG2B_source(data);{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];goodG2B_source(data);{wchar_t dest[50]=L"";wcsncpy(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(static_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);delete [] data;}}
void goodG2B2(){wchar_t * data;data=new wchar_t[100];if(global_returns_t()){wmemset(data,L'A',50-1); data[50-1]=L'\0';}else{wmemset(data,L'A',100-1); data[100-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);delete [] data;}}
void goodG2B1(){wchar_t * data;data=new wchar_t[100];if(global_five!=5){wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(data);}
void goodG2B1(){char * data;data=NULL;if(static_f){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(global_returns_t()){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcpy(data,src);printLine(data);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(data);}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(5==5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B2(){char * data;data=NULL;if(static_returns_t()){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink_b(data);}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}
void goodG2B1(){char * data;data=NULL;if(static_const_f){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;switch(5){case 6:{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}break;default:{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink_b(data);}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}{wchar_t * data_copy=data;wchar_t * data=data_copy;{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_const_five!=5){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}return;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=NULL;{wchar_t * data=*data_ptr1;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}*data_ptr1=data;}{wchar_t * data=*data_ptr2;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink(&data);}
void goodG2B2(){wchar_t * data;data=NULL;switch(6){case 6:{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}break;default:{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}break;}{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}
void goodG2B1(){char * data;data=NULL;if(0){data=new char[50];memset(data,'A',50-1); data[50-1]='\0';}else{data=new char[100];memset(data,'A',100-1); data[100-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B2(){char * data;data=NULL;if(static_five==5){data=new char[100];memset(data,'A',100-1); data[100-1]='\0';}else{data=new char[50];memset(data,'A',50-1); data[50-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B(){int h,i;char * data;data=NULL;for(h=0; h < 1; h++){data=new char[100];memset(data,'A',100-1); data[100-1]='\0';}for(i=0; i < 0; i++){data=new char[50];memset(data,'A',50-1); data[50-1]='\0';}{size_t i,dest_sz;char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; dest_sz=strlen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; goodG2B_sink_b(data);}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; goodG2B_sink_b(data);}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; func_ptr(data);}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; CWE126_Buffer_Overread__new_char_loop_68_goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){char * data;data=NULL;if(global_const_five!=5){data=new char[50];memset(data,'A',50-1); data[50-1]='\0';}else{data=new char[100];memset(data,'A',100-1); data[100-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B(){char * data;data=NULL;goto source;data=new char[50];memset(data,'A',50-1); data[50-1]='\0'; source:data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; {char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1); data[100-1]='\0'; goodG2B_sink_b(data);}
void goodG2B1(){char * data;data=NULL;if(global_f){data=new char[50];memset(data,'A',50-1); data[50-1]='\0';}else{data=new char[100];memset(data,'A',100-1); data[100-1]='\0';}{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memmove(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);delete [] data;}}
void goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);{size_t i,dest_sz;wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; dest_sz=wcslen(dest);for(i=0; i < dest_sz; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);delete [] data;}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];wmemset(data,L'A',100-1); data[100-1]=L'\0'; {wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);delete [] data;}return;data=new wchar_t[50];wmemset(data,L'A',50-1); data[50-1]=L'\0'; {wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memcpy(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_t){data=new wchar_t[100];wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{data=new wchar_t[50];wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_returns_t()){data=new wchar_t[100];wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{data=new wchar_t[50];wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_five==5){data=new wchar_t[100];wmemset(data,L'A',100-1); data[100-1]=L'\0';}else{data=new wchar_t[50];wmemset(data,L'A',50-1); data[50-1]=L'\0';}{wchar_t dest[100];wmemset(dest,L'C',100-1);dest[100-1]=L'\0'; memmove(dest,data,wcslen(dest)*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B1(){char * data;data=NULL;switch(5){case 6:{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}break;default:{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}break;}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}
void goodG2B(){char * data;union_type my_union;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_union.a=data;{char * data=my_union.b;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}}
void goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(&data);}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}func_ptr(data);}
void goodG2B2(){char * data;data=NULL;if(global_const_t){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(static_five==5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(global_f){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}*data_ptr1=data;}{char * data=*data_ptr2;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}}
void goodG2B(){char * data;union_type my_union;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_union.a=data;{char * data=my_union.b;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(0){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(global_returns_t()){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){char * data;data=NULL;if(5==5){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B2(){char * data;data=NULL;if(static_const_t){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B1(){char * data;data=NULL;if(global_returns_f()){{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}}else{{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}}{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}func_ptr(data);}
void goodG2B1(){wchar_t * data;data=NULL;if(static_f){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_five!=5){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){int h,i;wchar_t * data;data=NULL;for(h=0; h < 1; h++){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}for(i=0; i < 0; i++){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}return;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;data=NULL;data=goodG2B_source(data);{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_f){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink_b(data);}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink(&data);}
void goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}my_struct.a=data;goodG2B_sink(my_struct);}
void goodG2B2(){wchar_t * data;data=NULL;if(1){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_t){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}my_union.a=data;{wchar_t * data=my_union.b;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}}
void good2(){if(static_returns_t()){{try{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}catch(out_of_range &){printLine("Range specified was invalid");}}}else{{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}}}
void good1(){if(global_const_f){{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}}else{{try{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}catch(out_of_range &){printLine("Range specified was invalid");}}}}
void good1(){if(global_f){{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}}else{{try{string a="hello";string b=a.substr(rand(),rand());printLine(b.c_str());}catch(out_of_range &){printLine("Range specified was invalid");}}}}
static void helper_good(string aString){aString.append(" was modified");}void good1(){if(0){{string myString("String");helper_bad(myString);cout << "myString after call to helper function: " << myString << endl;}}else{{string myString("String");helper_good(myString);cout << "myString after call to helper function: " << myString << endl;}}}
static void helper_good(string aString){aString.append(" was modified");}void good2(){if(global_returns_t()){{string myString("String");helper_good(myString);cout << "myString after call to helper function: " << myString << endl;}}else{{string myString("String");helper_bad(myString);cout << "myString after call to helper function: " << myString << endl;}}}
static void helper_good(string aString){aString.append(" was modified");}void good2(){if(global_const_five==5){{string myString("String");helper_good(myString);cout << "myString after call to helper function: " << myString << endl;}}else{{string myString("String");helper_bad(myString);cout << "myString after call to helper function: " << myString << endl;}}}
static void helper_good(string aString){aString.append(" was modified");}void good1(){if(global_five!=5){{string myString("String");helper_bad(myString);cout << "myString after call to helper function: " << myString << endl;}}else{{string myString("String");helper_good(myString);cout << "myString after call to helper function: " << myString << endl;}}}
void good1(){try{if(rand()%2==0) throw out_of_range("err1");if(rand()%2==0) throw domain_error("err2");}catch(out_of_range &){printLine("out_of_range");}catch(domain_error &){printLine("domain_error");return;}printLine("ok");}
void good2(){if(global_returns_t()){try{if(rand()%2==0) throw out_of_range("err1");if(rand()%2==0) throw domain_error("err2");}catch(out_of_range &){printLine("out_of_range");}catch(domain_error &){printLine("domain_error");return;}printLine("ok");}else{try{if(rand()%2==0) throw out_of_range("err1");if(rand()%2==0) throw domain_error("err2");}catch(exception &){printLine("exception");}catch(domain_error &)     {printLine("domain_error");return;}printLine("ok");}}
void good1(){if(global_five!=5){try{if(rand()%2==0) throw out_of_range("err1");if(rand()%2==0) throw domain_error("err2");}catch(exception &){printLine("exception");}catch(domain_error &)     {printLine("domain_error");return;}printLine("ok");}else{try{if(rand()%2==0) throw out_of_range("err1");if(rand()%2==0) throw domain_error("err2");}catch(out_of_range &){printLine("out_of_range");}catch(domain_error &){printLine("domain_error");return;}printLine("ok");}}
void good2(){if(1){throw range_error("Test");}else{throw exception();}}
void good1(){if(static_const_five!=5){throw exception();}else{throw range_error("Test");}}
void good1(){if(global_const_five!=5){throw exception();}else{throw range_error("Test");}}
void good1(){if(global_five!=5){throw exception();}else{throw range_error("Test");}}
void good1(){goto sink;throw exception(); sink:throw range_error("Test");}
void goodG2B2(){char * data;data=NULL;if(static_five==5){{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}else{data=new char[100];strcpy(data,"A String");printLine(data);}if(static_five==5){;}else{delete[] data;}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){data=new char[100];strcpy(data,"A String");printLine(data);}else{{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}}if(global_five==5){;}else{delete[] data;}}
void goodG2B(){char * data;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}{char * data_copy=data;char * data=data_copy;;}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}*data_ptr1=data;}{char * data=*data_ptr2;;}}
void goodB2G(){char * data;data=NULL;data=new char[100];strcpy(data,"A String");printLine(data);goodB2G_sink(data);}
void goodB2G1(){int * data;data=NULL;if(static_t){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(static_f){;}else{delete[] data;}}
void goodB2G2(){int * data;data=NULL;if(static_t){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(static_t){delete[] data;}else{;}}
void goodG2B1(){int * data;data=NULL;if(static_f){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(static_t){;}else{delete[] data;}}
void goodB2G2(){int * data;data=NULL;if(static_const_five==5){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(static_const_five==5){delete[] data;}else{;}}
void goodB2G2(){int * data;data=NULL;if(global_const_t){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_const_t){delete[] data;}else{;}}
void goodB2G2(){int * data;data=NULL;if(global_t){data=new int[100];data[0]=5;printIntLine(data[0]);}else{{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}}if(global_t){delete[] data;}else{;}}
void goodB2G(){int * data;void(*func_ptr)(int *)=goodB2G_sink;data=NULL;data=new int[100];data[0]=5;printIntLine(data[0]);func_ptr(data);}
void goodB2G2(){long long * data;data=NULL;if(5==5){data=new long long[100];data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(5==5){delete[] data;}else{;}}
void goodB2G2(){long long * data;data=NULL;if(static_const_t){data=new long long[100];data[0]=5L;printLongLongLine(data[0]);}else{{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}if(static_const_t){delete[] data;}else{;}}
void goodG2B2(){long long * data;data=NULL;if(global_const_five==5){{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}}else{data=new long long[100];data[0]=5L;printLongLongLine(data[0]);}if(global_const_five==5){;}else{delete[] data;}}
void goodG2B(){long long * data;data=NULL;{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}; return;data=new long long[100];data[0]=5L;printLongLongLine(data[0]);;}
void goodG2B(){long long * data;long long * *data_ptr1=&data;long long * *data_ptr2=&data;data=NULL;{long long * data=*data_ptr1;{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}*data_ptr1=data;}{long long * data=*data_ptr2;;}}
void goodB2G(){long long * data;data=NULL;data=new long long[100];data[0]=5L;printLongLongLine(data[0]);goodB2G_data=data;goodB2G_sink();}
void goodG2B(){long long * data;data=NULL;{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}goodG2B_sink(&data);}
void goodG2B2(){struct _twoints * data;data=NULL;if(1){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{data=new struct _twoints[100];data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}if(1){;}else{delete[] data;}}
void goodG2B2(){struct _twoints * data;data=NULL;if(5==5){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}else{data=new struct _twoints[100];data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}if(5==5){;}else{delete[] data;}}
void goodG2B1(){struct _twoints * data;data=NULL;if(static_const_f){data=new struct _twoints[100];data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}else{{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}}if(static_const_t){;}else{delete[] data;}}
void goodB2G2(){struct _twoints * data;data=NULL;switch(6){case 6:data=new struct _twoints[100];data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);break;default:{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}break;}switch(7){case 7:delete[] data;break;default:; break;}}
void goodG2B(){struct _twoints * data;data=NULL;while(1){{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}break;}while(0){data=new struct _twoints[100];data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);break;}while(1){; break;}while(0){delete[] data;break;}}
void goodG2B(){struct _twoints * data;data=NULL;{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){twoints * data;data=NULL;if(static_const_five!=5){data=new twoints[100];data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(static_const_five==5){;}else{delete[] data;}}
void goodG2B1(){twoints * data;data=NULL;if(global_const_five!=5){data=new twoints[100];data[0].a=0;data[0].b=0;printStructLine(&data[0]);}else{{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}}if(global_const_five==5){;}else{delete[] data;}}
void goodG2B1(){twoints * data;data=NULL;switch(5){case 6:data=new twoints[100];data[0].a=0;data[0].b=0;printStructLine(&data[0]);break;default:{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}break;}switch(7){case 7:; break;default:delete[] data;break;}}
void goodG2B(){twoints * data;data=NULL;{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}{twoints * data_copy=data;twoints * data=data_copy;;}}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];data[0].a=0;data[0].b=0;printStructLine(&data[0]);goodB2G_sink(&data);}
void goodB2G1(){twointsclass * data;data=NULL;if(1){data=new twointsclass[100];data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}else{{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}}if(0){;}else{delete[] data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_returns_f()){data=new twointsclass[100];data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}else{{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}}if(static_returns_t()){;}else{delete[] data;}}
void goodB2G1(){twointsclass * data;data=NULL;if(global_t){data=new twointsclass[100];data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}else{{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}}if(global_f){;}else{delete[] data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_const_five!=5){data=new twointsclass[100];data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}else{{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}}if(global_const_five==5){;}else{delete[] data;}}
void goodG2B(){twointsclass * data;twointsclass * data_array[5];data=NULL;{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}data_array[2]=data;goodG2B_sink(data_array);}
void goodB2G2(){wchar_t * data;data=NULL;if(static_t){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_t){delete[] data;}else{;}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_f){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_t){;}else{delete[] data;}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_five!=5){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_const_five==5){;}else{delete[] data;}}
void goodB2G2(){wchar_t * data;data=NULL;if(static_five==5){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_five==5){delete[] data;}else{;}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_returns_f()){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(static_returns_t()){;}else{delete[] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_t){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}else{data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}if(global_const_t){;}else{delete[] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_returns_t()){{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}else{data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}if(global_returns_t()){;}else{delete[] data;}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_five!=5){data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);}else{{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}}if(global_five==5){;}else{delete[] data;}}
void goodB2G(){wchar_t * data;data=NULL;goto source;{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}source:data=new wchar_t[100];wcscpy(data,L"A String");printWLine(data);goto sink;; sink:delete[] data;}
void goodB2G(){wchar_t * data;data=NULL;data=goodB2G_source(data);delete[] data;}
void goodG2B(){wchar_t * data;data=NULL;{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}goodG2B_sink(&data);}
void goodB2G2(){char * data;data=NULL;if(global_const_five==5){data=new char;*data='A';printHexCharLine(*data);}else{char data_good;data=&data_good;*data='A';printHexCharLine(*data);}if(global_const_five==5){delete data;}else{;}}
void goodG2B(){char * data;data=NULL;while(1){char data_good;data=&data_good;*data='A';printHexCharLine(*data);break;}while(0){data=new char;*data='A';printHexCharLine(*data);break;}while(1){; break;}while(0){delete data;break;}}
void goodB2G(){char * data;data=NULL;data=new char;*data='A';printHexCharLine(*data);goodB2G_sink(data);}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);;}
void goodG2B(){char * data;data=NULL;char data_good;data=&data_good;*data='A';printHexCharLine(*data);goodG2B_sink(&data);}
void goodB2G2(){int * data;data=NULL;if(static_const_t){data=new int;*data=5;printIntLine(*data);}else{int data_good;data=&data_good;*data=5;printIntLine(*data);}if(static_const_t){delete data;}else{;}}
void goodG2B1(){int * data;data=NULL;if(static_const_f){data=new int;*data=5;printIntLine(*data);}else{int data_good;data=&data_good;*data=5;printIntLine(*data);}if(static_const_t){;}else{delete data;}}
void goodG2B2(){int * data;data=NULL;if(static_five==5){int data_good;data=&data_good;*data=5;printIntLine(*data);}else{data=new int;*data=5;printIntLine(*data);}if(static_five==5){;}else{delete data;}}
void goodG2B1(){int * data;data=NULL;if(global_returns_f()){data=new int;*data=5;printIntLine(*data);}else{int data_good;data=&data_good;*data=5;printIntLine(*data);}if(global_returns_t()){;}else{delete data;}}
void goodB2G(){int * data;data=NULL;if(global_returns_t_or_f()){data=new int;*data=5;printIntLine(*data);}else{data=new int;*data=5;printIntLine(*data);}if(global_returns_t_or_f()){delete data;}else{delete data;}}
void goodG2B(){int * data;data=NULL;int data_good;data=&data_good;*data=5;printIntLine(*data);goodG2B_sink(data);}
void goodG2B(){int * data;data=NULL;int data_good;data=&data_good;*data=5;printIntLine(*data);goodG2B_sink(data);}
void goodG2B(){int * data;data=NULL;int data_good;data=&data_good;*data=5;printIntLine(*data);goodG2B_sink(&data);}
void goodB2G(){int * data;int * data_array[5];data=NULL;data=new int;*data=5;printIntLine(*data);data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B(){int * data;data=NULL;int data_good;data=&data_good;*data=5;printIntLine(*data);goodG2B_data=data;goodG2B_sink();}
void goodG2B2(){long long * data;data=NULL;if(static_five==5){long long data_good;data=&data_good;*data=5L;printLongLongLine(*data);}else{data=new long long;*data=5L;printLongLongLine(*data);}if(static_five==5){;}else{delete data;}}
void goodG2B(){long long * data;data=NULL;long long data_good;data=&data_good;*data=5L;printLongLongLine(*data);goodG2B_sink(data);}
void goodB2G(){long long * data;data=NULL;data=new long long;*data=5L;printLongLongLine(*data);goodB2G_sink_b(data);}
void goodG2B(){long long * data;data=NULL;long long data_good;data=&data_good;*data=5L;printLongLongLine(*data);goodG2B_sink(&data);}
void goodB2G(){long long * data;void(*func_ptr)(long long *)=goodB2G_sink;data=NULL;data=new long long;*data=5L;printLongLongLine(*data);func_ptr(data);}
void goodB2G(){long long * data;data=NULL;data=new long long;*data=5L;printLongLongLine(*data);goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){struct _twoints * data;data=NULL;if(0){data=new struct _twoints;data->a=0;data->b=0;printStructLine((twoints *)data);}else{struct _twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine((twoints *)data);}if(1){;}else{delete data;}}
void goodB2G1(){struct _twoints * data;data=NULL;if(static_five==5){data=new struct _twoints;data->a=0;data->b=0;printStructLine((twoints *)data);}else{struct _twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine((twoints *)data);}if(static_five!=5){;}else{delete data;}}
void goodG2B(){struct _twoints * data;data=NULL;struct _twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine((twoints *)data);; return;data=new struct _twoints;data->a=0;data->b=0;printStructLine((twoints *)data);;}
void goodG2B1(){twoints * data;data=NULL;if(0){data=new twoints;data->a=0;data->b=0;printStructLine(data);}else{twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);}if(1){;}else{delete data;}}
void goodB2G1(){twoints * data;data=NULL;if(static_five==5){data=new twoints;data->a=0;data->b=0;printStructLine(data);}else{twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);}if(static_five!=5){;}else{delete data;}}
void goodB2G2(){twoints * data;data=NULL;if(global_returns_t()){data=new twoints;data->a=0;data->b=0;printStructLine(data);}else{twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);}if(global_returns_t()){delete data;}else{;}}
void goodG2B2(){twoints * data;data=NULL;switch(6){case 6:twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);break;default:data=new twoints;data->a=0;data->b=0;printStructLine(data);break;}switch(7){case 7:; break;default:delete data;break;}}
void goodB2G(){twoints * data;data=NULL;while(0){twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);break;}while(1){data=new twoints;data->a=0;data->b=0;printStructLine(data);break;}while(0){; break;}while(1){delete data;break;}}
void goodB2G(){twoints * data;data=NULL;data=new twoints;data->a=0;data->b=0;printStructLine(data);goodB2G_sink_b(data);}
void goodB2G(){twoints * data;data=NULL;data=new twoints;data->a=0;data->b=0;printStructLine(data);goodB2G_sink(&data);}
void goodG2B(){twoints * data;void(*func_ptr)(twoints *)=goodG2B_sink;data=NULL;twoints data_good;data=&data_good;data->a=0;data->b=0;printStructLine(data);func_ptr(data);}
void goodG2B1(){twointsclass * data;data=NULL;if(5!=5){data=new twointsclass;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}else{twointsclass data_good;data=&data_good;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}if(5==5){;}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_const_f){data=new twointsclass;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}else{twointsclass data_good;data=&data_good;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}if(static_const_t){;}else{delete data;}}
void goodG2B2(){twointsclass * data;data=NULL;if(global_five==5){twointsclass data_good;data=&data_good;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}else{data=new twointsclass;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);}if(global_five==5){;}else{delete data;}}
void goodB2G(){twointsclass * data;data=NULL;data=new twointsclass;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);goodB2G_sink_b(data);}
void goodG2B(){twointsclass * data;data=NULL;data=goodG2B_source(data);;}
void goodB2G(){twointsclass * data;data=NULL;data=new twointsclass;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);goodB2G_sink(&data);}
void goodG2B2(){wchar_t * data;data=NULL;if(1){wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);}else{data=new wchar_t;*data=L'A';printHexCharLine((char)*data);}if(1){;}else{delete data;}}
void goodB2G2(){wchar_t * data;data=NULL;if(static_const_t){data=new wchar_t;*data=L'A';printHexCharLine((char)*data);}else{wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);}if(static_const_t){delete data;}else{;}}
void goodB2G1(){wchar_t * data;data=NULL;if(static_returns_t()){data=new wchar_t;*data=L'A';printHexCharLine((char)*data);}else{wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);}if(static_returns_f()){;}else{delete data;}}
void goodB2G(){wchar_t * data;data=NULL;while(0){wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);break;}while(1){data=new wchar_t;*data=L'A';printHexCharLine((char)*data);break;}while(0){; break;}while(1){delete data;break;}}
void goodG2B(){int h,i,j,k;wchar_t * data;data=NULL;for(h=0; h < 1; h++){wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);}for(i=0; i < 0; i++){data=new wchar_t;*data=L'A';printHexCharLine((char)*data);}for(j=0; j < 1; j++){;}for(k=0; k < 0; k++){delete data;}}
void goodB2G1(){char * data;data=NULL;if(global_five==5){data=new char[100];delete [] data;}else{data=new char[100];}if(global_five!=5){delete [] data;}else{;}}
void goodG2B(){char * data;data=NULL;while(1){data=new char[100];break;}while(0){data=new char[100];delete [] data;break;}while(1){delete [] data;break;}while(0){; break;}}
void goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink_b(data);}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);delete [] data;}
void goodG2B2(){twointsclass * data;data=NULL;if(static_returns_t()){data=new twointsclass[100];}else{data=new twointsclass[100];delete [] data;}if(static_returns_t()){delete [] data;}else{;}}
void goodB2G2(){twointsclass * data;data=NULL;if(global_t){data=new twointsclass[100];delete [] data;}else{data=new twointsclass[100];}if(global_t){;}else{delete [] data;}}
void goodB2G2(){twointsclass * data;data=NULL;if(global_five==5){data=new twointsclass[100];delete [] data;}else{data=new twointsclass[100];}if(global_five==5){;}else{delete [] data;}}
void goodG2B(){twointsclass * data;twointsclass * *data_ptr1=&data;twointsclass * *data_ptr2=&data;data=NULL;{twointsclass * data=*data_ptr1;data=new twointsclass[100];*data_ptr1=data;}{twointsclass * data=*data_ptr2;delete [] data;}}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];goodG2B_sink(data);}
void goodG2B(){twointsclass * data;data=NULL;data=goodG2B_source(data);delete [] data;}
void goodG2B2(){int * data;data=NULL;if(static_t){data=new int[100];}else{data=new int[100];delete [] data;}if(static_t){delete [] data;}else{;}}
void goodB2G2(){int * data;data=NULL;if(global_t){data=new int[100];delete [] data;}else{data=new int[100];}if(global_t){;}else{delete [] data;}}
void goodB2G2(){int * data;data=NULL;if(global_returns_t()){data=new int[100];delete [] data;}else{data=new int[100];}if(global_returns_t()){;}else{delete [] data;}}
void goodB2G2(){int * data;data=NULL;if(global_five==5){data=new int[100];delete [] data;}else{data=new int[100];}if(global_five==5){;}else{delete [] data;}}
void goodG2B(){int * data;data=NULL;goodG2B_source(data);delete [] data;}
void goodB2G2(){long long * data;data=NULL;if(global_five==5){data=new long long[100];delete [] data;}else{data=new long long[100];}if(global_five==5){;}else{delete [] data;}}
void goodG2B(){long long * data;data=NULL;while(1){data=new long long[100];break;}while(0){data=new long long[100];delete [] data;break;}while(1){delete [] data;break;}while(0){; break;}}
void goodB2G(){long long * data;data=NULL;goto source;data=new long long[100];source:data=new long long[100];delete [] data;goto sink;delete [] data;sink:;}
void goodB2G(){long long * data;void(*func_ptr)(long long *)=goodB2G_sink;data=NULL;data=new long long[100];delete [] data;func_ptr(data);}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_data=data;goodG2B_sink();}
void goodB2G(){long long * data;data=NULL;data=new long long[100];delete [] data;goodB2G_sink_b(data);}
void goodG2B2(){twoints * data;data=NULL;if(5==5){data=new twoints[100];}else{data=new twoints[100];delete [] data;}if(5==5){delete [] data;}else{;}}
void goodB2G1(){twoints * data;data=NULL;if(global_const_t){data=new twoints[100];delete [] data;}else{data=new twoints[100];}if(global_const_f){delete [] data;}else{;}}
void goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_sink_b(data);}
void goodB2G1(){wchar_t * data;data=NULL;switch(6){case 6:data=new wchar_t[100];delete [] data;break;default:data=new wchar_t[100];break;}switch(8){case 7:delete [] data;break;default:; break;}}
void goodB2G2(){wchar_t * data;data=NULL;switch(6){case 6:data=new wchar_t[100];delete [] data;break;default:data=new wchar_t[100];break;}switch(7){case 7:; break;default:delete [] data;break;}}
void goodG2B(){wchar_t * data;data=NULL;goto source;data=new wchar_t[100];delete [] data;source:data=new wchar_t[100];goto sink;; sink:delete [] data;}
void goodG2B2(){char * data;data=NULL;if(static_returns_t()){data=new char;}else{data=new char;delete data;}if(static_returns_t()){delete data;}else{;}}
void goodG2B(){char * data;data=NULL;goodG2B_source(data);delete data;}
void goodB2G(){char * data;data=NULL;goodB2G_source(data);;}
void goodB2G(){twointsclass * data;data=NULL;if(global_returns_t_or_f()){data=new twointsclass;delete data;}else{data=new twointsclass;delete data;}if(global_returns_t_or_f()){;}else{;}}
void goodG2B(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=new twointsclass;data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B(){int * data;data=NULL;data=new int;delete data;}
void goodB2G(){int * data;data=NULL;data=new int;delete data;;}
void goodB2G2(){int * data;data=NULL;if(static_const_t){data=new int;delete data;}else{data=new int;}if(static_const_t){;}else{delete data;}}
void goodB2G(){int * data;data=NULL;data=new int;delete data;; return;delete data;}
void goodB2G2(){long long * data;data=NULL;if(1){data=new long long;delete data;}else{data=new long long;}if(1){;}else{delete data;}}
void goodG2B1(){long long * data;data=NULL;if(static_five!=5){data=new long long;delete data;}else{data=new long long;}if(static_five==5){delete data;}else{;}}
void goodG2B1(){long long * data;data=NULL;if(static_returns_f()){data=new long long;delete data;}else{data=new long long;}if(static_returns_t()){delete data;}else{;}}
void goodB2G2(){long long * data;data=NULL;if(global_returns_t()){data=new long long;delete data;}else{data=new long long;}if(global_returns_t()){;}else{delete data;}}
void goodB2G(){long long * data;union_type my_union;data=NULL;data=new long long;delete data;my_union.a=data;{long long * data=my_union.b;;}}
void goodB2G(){long long * data;data=NULL;data=goodB2G_source(data);;}
void goodB2G2(){twoints * data;data=NULL;if(5==5){data=new twoints;delete data;}else{data=new twoints;}if(5==5){;}else{delete data;}}
void goodB2G2(){twoints * data;data=NULL;if(static_const_five==5){data=new twoints;delete data;}else{data=new twoints;}if(static_const_five==5){;}else{delete data;}}
void goodG2B2(){twoints * data;data=NULL;if(global_const_t){data=new twoints;}else{data=new twoints;delete data;}if(global_const_t){delete data;}else{;}}
void goodB2G2(){twoints * data;data=NULL;switch(6){case 6:data=new twoints;delete data;break;default:data=new twoints;break;}switch(7){case 7:; break;default:delete data;break;}}
void goodG2B(){twoints * data;data=NULL;while(1){data=new twoints;break;}while(0){data=new twoints;delete data;break;}while(1){delete data;break;}while(0){; break;}}
void goodG2B2(){wchar_t * data;data=NULL;if(5==5){data=new wchar_t;}else{data=new wchar_t;delete data;}if(5==5){delete data;}else{;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){data=new wchar_t;}else{data=new wchar_t;delete data;}if(static_const_five==5){delete data;}else{;}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_five==5){data=new wchar_t;delete data;}else{data=new wchar_t;}if(global_five==5){;}else{delete data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_five==5){data=new wchar_t;}else{data=new wchar_t;delete data;}if(global_five==5){delete data;}else{;}}
void goodB2G(){wchar_t * data;data=NULL;data=new wchar_t;delete data;goodB2G_sink(data);}
void goodB2G(){wchar_t * data;data=NULL;data=new wchar_t;delete data;goodB2G_sink_b(data);}
void goodB2G(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t;delete data;my_struct.a=data;goodB2G_sink(my_struct);}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){data=new char[100];memset(data,'A',100-1);data[100-1]='\0';delete [] data;}else{data=new char[100];memset(data,'A',100-1);data[100-1]='\0';}if(static_const_five==5){printLine(data);}else{;}}
void goodB2G1(){char * data;data=NULL;if(static_five==5){data=new char[100];memset(data,'A',100-1);data[100-1]='\0';delete [] data;}else{data=new char[100];memset(data,'A',100-1);data[100-1]='\0';}if(static_five!=5){printLine(data);}else{;}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:data=new char[100];memset(data,'A',100-1);data[100-1]='\0';break;default:data=new char[100];memset(data,'A',100-1);data[100-1]='\0';delete [] data;break;}switch(7){case 7:printLine(data);break;default:; break;}}
void goodB2G(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1);data[100-1]='\0';delete [] data;{char * data_copy=data;char * data=data_copy;;}}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1);data[100-1]='\0';goodG2B_sink(data);}
void goodG2B(){char * data;data=NULL;data=new char[100];memset(data,'A',100-1);data[100-1]='\0';goodG2B_sink(&data);}
void goodG2B1(){twointsclass * data;data=NULL;if(static_five!=5){data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;}else{data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}}if(static_five==5){printIntLine(data[0].a);}else{;}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_five!=5){data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;}else{data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}}if(global_five==5){printIntLine(data[0].a);}else{;}}
void goodB2G(){twointsclass * data;data=NULL;data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;; return;printIntLine(data[0].a);}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}goodG2B_sink(data);}
void goodG2B2(){int * data;data=NULL;if(static_const_five==5){data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}else{data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;}if(static_const_five==5){printIntLine(data[0]);}else{;}}
void goodB2G2(){int * data;data=NULL;if(static_returns_t()){data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;}else{data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(static_returns_t()){;}else{printIntLine(data[0]);}}
void goodG2B2(){int * data;data=NULL;if(global_t){data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}else{data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;}if(global_t){printIntLine(data[0]);}else{;}}
void goodB2G2(){int * data;data=NULL;if(global_const_five==5){data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;}else{data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}}if(global_const_five==5){;}else{printIntLine(data[0]);}}
void goodB2G(){int * data;data=NULL;data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;; return;printIntLine(data[0]);}
void goodB2G(){int * data;data=NULL;data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}delete [] data;goodB2G_sink_b(data);}
void goodG2B(){int * data;data=NULL;data=goodG2B_source(data);printIntLine(data[0]);}
void goodG2B(){long long * data;long long * &data_ref=data;data=NULL;data=new long long[100];{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}{long long * data=data_ref;printLongLongLine(data[0]);}}
void goodG2B(){long long * data;data=NULL;goodG2B_source(data);printLongLongLine(data[0]);}
void goodB2G(){long long * data;long long * data_array[5];data=NULL;data=new long long[100];{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}delete [] data;data_array[2]=data;goodB2G_sink(data_array);}
void goodB2G2(){twoints * data;data=NULL;if(1){data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;}else{data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}}if(1){;}else{printStructLine(&data[0]);}}
void goodB2G(){twoints * data;data=NULL;if(global_returns_t_or_f()){data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;}else{data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;}if(global_returns_t_or_f()){;}else{;}}
void goodG2B(){twoints * data;data=NULL;data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}goodG2B_sink(&data);}
void goodB2G2(){wchar_t * data;data=NULL;if(1){data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';delete [] data;}else{data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';}if(1){;}else{printWLine(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(static_five!=5){data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';delete [] data;}else{data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';}if(static_five==5){printWLine(data);}else{;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_five==5){data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';}else{data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';delete [] data;}if(static_five==5){printWLine(data);}else{;}}
void goodB2G(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodB2G_sink;data=NULL;data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';delete [] data;func_ptr(data);}
void goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';my_struct.a=data;goodG2B_sink(my_struct);}
void goodG2B2(){char * data;data=NULL;if(1){data=new char;*data='A';}else{data=new char;*data='A';delete data;}if(1){printf("%c\n",*data);}else{;}}
void goodG2B2(){char * data;data=NULL;if(static_const_five==5){data=new char;*data='A';}else{data=new char;*data='A';delete data;}if(static_const_five==5){printf("%c\n",*data);}else{;}}
void goodB2G2(){char * data;data=NULL;if(global_const_t){data=new char;*data='A';delete data;}else{data=new char;*data='A';}if(global_const_t){;}else{printf("%c\n",*data);}}
void goodB2G(){char * data;data=NULL;data=new char;*data='A';delete data;goodB2G_sink(data);}
void goodB2G(){char * data;data=NULL;data=new char;*data='A';delete data;goodB2G_data=data;goodB2G_sink();}
void goodB2G(){char * data;data=NULL;data=new char;*data='A';delete data;goodB2G_sink_b(data);}
void goodG2B(){char * data;char * data_array[5];data=NULL;data=new char;*data='A';data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B2(){twointsclass * data;data=NULL;if(static_const_five==5){data=new twointsclass;data->a=1;data->b=2;}else{data=new twointsclass;data->a=1;data->b=2;delete data;}if(static_const_five==5){printIntLine(data->a);}else{;}}
void goodG2B2(){twointsclass * data;data=NULL;if(static_five==5){data=new twointsclass;data->a=1;data->b=2;}else{data=new twointsclass;data->a=1;data->b=2;delete data;}if(static_five==5){printIntLine(data->a);}else{;}}
void goodB2G2(){twointsclass * data;data=NULL;switch(6){case 6:data=new twointsclass;data->a=1;data->b=2;delete data;break;default:data=new twointsclass;data->a=1;data->b=2;break;}switch(7){case 7:; break;default:printIntLine(data->a);break;}}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass;data->a=1;data->b=2;goodG2B_sink(&data);}
void goodG2B1(){int * data;data=NULL;if(static_const_f){data=new int;*data=5;delete data;}else{data=new int;*data=5;}if(static_const_t){printIntLine(*data);}else{;}}
void goodG2B(){int * data;data=NULL;while(1){data=new int;*data=5;break;}while(0){data=new int;*data=5;delete data;break;}while(1){printIntLine(*data);break;}while(0){; break;}}
void goodB2G(){int * data;data=NULL;data=new int;*data=5;delete data;; return;printIntLine(*data);}
void goodG2B(){int * data;int * *data_ptr1=&data;int * *data_ptr2=&data;data=NULL;{int * data=*data_ptr1;data=new int;*data=5;*data_ptr1=data;}{int * data=*data_ptr2;printIntLine(*data);}}
void goodB2G(){int * data;int * *data_ptr1=&data;int * *data_ptr2=&data;data=NULL;{int * data=*data_ptr1;data=new int;*data=5;delete data;*data_ptr1=data;}{int * data=*data_ptr2;;}}
void goodG2B(){int * data;union_type my_union;data=NULL;data=new int;*data=5;my_union.a=data;{int * data=my_union.b;printIntLine(*data);}}
void goodB2G(){int * data;data=NULL;goodB2G_source(data);;}
void goodG2B(){int * data;int * data_array[5];data=NULL;data=new int;*data=5;data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B2(){long long * data;data=NULL;if(1){data=new long long;*data=5L;}else{data=new long long;*data=5L;delete data;}if(1){printLongLongLine(*data);}else{;}}
void goodB2G1(){long long * data;data=NULL;if(static_t){data=new long long;*data=5L;delete data;}else{data=new long long;*data=5L;}if(static_f){printLongLongLine(*data);}else{;}}
void goodB2G(){long long * data;data=NULL;data=new long long;*data=5L;delete data;goodB2G_sink(&data);}
void goodB2G(){long long * data;long long * data_array[5];data=NULL;data=new long long;*data=5L;delete data;data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B2(){twoints * data;data=NULL;if(global_const_t){data=new twoints;data->a=1;data->b=2;}else{data=new twoints;data->a=1;data->b=2;delete data;}if(global_const_t){printStructLine(data);}else{;}}
void goodB2G(){twoints * data;data=NULL;data=new twoints;data->a=1;data->b=2;delete data;goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_five!=5){data=new wchar_t;*data=L'A';delete data;}else{data=new wchar_t;*data=L'A';}if(static_const_five==5){printWcharLine(*data);}else{;}}
void goodB2G1(){wchar_t * data;data=NULL;if(static_five==5){data=new wchar_t;*data=L'A';delete data;}else{data=new wchar_t;*data=L'A';}if(static_five!=5){printWcharLine(*data);}else{;}}
void goodB2G1(){wchar_t * data;data=NULL;if(global_t){data=new wchar_t;*data=L'A';delete data;}else{data=new wchar_t;*data=L'A';}if(global_f){printWcharLine(*data);}else{;}}
void goodG2B(){wchar_t * data;data=NULL;if(global_returns_t_or_f()){data=new wchar_t;*data=L'A';}else{data=new wchar_t;*data=L'A';}if(global_returns_t_or_f()){printWcharLine(*data);}else{printWcharLine(*data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_const_five==5){data=new wchar_t;*data=L'A';}else{data=new wchar_t;*data=L'A';delete data;}if(global_const_five==5){printWcharLine(*data);}else{;}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_five!=5){data=new wchar_t;*data=L'A';delete data;}else{data=new wchar_t;*data=L'A';}if(global_five==5){printWcharLine(*data);}else{;}}
void goodB2G(){wchar_t * data;data=NULL;data=new wchar_t;*data=L'A';delete data;{wchar_t * data_copy=data;wchar_t * data=data_copy;;}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=NULL;{wchar_t * data=*data_ptr1;data=new wchar_t;*data=L'A';*data_ptr1=data;}{wchar_t * data=*data_ptr2;printWcharLine(*data);}}
void goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);printWcharLine(*data);}
void goodB2G(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t;*data=L'A';delete data;my_struct.a=data;goodB2G_sink(my_struct);}
void goodB2G1(){double * data;data=new double[10];if(5==5){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(5!=5){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodB2G1(){double * data;data=new double[10];if(static_const_t){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(static_const_f){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodB2G1(){double * data;data=new double[10];if(static_t){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(static_f){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodB2G1(){double * data;data=new double[10];if(global_returns_t()){;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(global_returns_f()){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodG2B1(){double * data;data=new double[10];switch(5){case 6:; break;default:{int i;for(i=0; i<10; i++){data[i]=(double)i;}}break;}switch(7){case 7:{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;break;default:{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;break;}}
void goodB2G(){double * data;double * &data_ref=data;data=new double[10];; {double * data=data_ref;{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodG2B(){double * data;data=new double[10];goodG2B_source(data);{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}
void goodB2G2(){double * data;data=new double[10];if(5==5){{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(5==5){{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodG2B1(){double * data;data=new double[10];if(global_five!=5){{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}}if(global_five==5){{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodG2B(){double * data;double * &data_ref=data;data=new double[10];{int i;for(i=0; i<10; i++){data[i]=(double)i;}}{double * data=data_ref;{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}}
void goodG2B(){double * data;data=new double[10];goodG2B_source(data);{int i;for(i=0; i<10; i++){printDoubleLine(data[i]);}}delete [] data;}
void goodB2G(){double * data;data=new double[10];{int i;for(i=0; i<(10/2); i++){data[i]=(double)i;}}goodB2G_sink(&data);}
void goodB2G1(){int * data;data=new int[10];if(global_const_t){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_const_f){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B1(){int * data;data=new int[10];if(global_const_f){;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_const_t){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B2(){int * data;data=new int[10];if(global_five==5){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{;}if(global_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B2(){int * data;data=new int[10];if(static_const_t){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}if(static_const_t){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodB2G2(){int * data;data=new int[10];if(static_t){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(static_t){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B2(){int * data;data=new int[10];if(static_five==5){{int i;for(i=0; i<10; i++){data[i]=i;}}}else{{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}if(static_five==5){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B1(){int * data;data=new int[10];if(global_f){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_t){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodB2G2(){int * data;data=new int[10];if(global_returns_t()){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}}else{{int i;for(i=0; i<10; i++){data[i]=i;}}}if(global_returns_t()){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}else{{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;}}
void goodG2B(){int * data;data=new int[10];while(1){{int i;for(i=0; i<10; i++){data[i]=i;}}break;}while(0){{int i;for(i=0; i<(10/2); i++){data[i]=i;}}break;}while(1){{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;break;}while(0){{int i;for(i=0; i<10; i++){data[i]=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i]);}}delete [] data;break;}}
void goodB2G1(){twoints * data;data=new twoints[10];if(global_t){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_f){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodB2G2(){twoints * data;data=new twoints[10];if(global_five==5){;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(global_five==5){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodG2B(){twoints * data;twoints * &data_ref=data;data=new twoints[10];{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{twoints * data=data_ref;{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodG2B1(){twoints * data;data=new twoints[10];if(5!=5){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(5==5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodB2G1(){twoints * data;data=new twoints[10];if(static_five==5){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_five!=5){{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodB2G2(){twoints * data;data=new twoints[10];if(static_returns_t()){{int i;for(i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}}else{{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}}if(static_returns_t()){{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}else{{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodG2B(){twoints * data;twoints * &data_ref=data;data=new twoints[10];{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}{twoints * data=data_ref;{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}delete [] data;}}
void goodG2B1(){twointsclass data;if(static_const_f){;}else{data.a=1;data.b=2;}if(static_const_t){printIntLine(data.a);printIntLine(data.b);}else{data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);}}
void goodB2G1(){twointsclass data;switch(6){case 6:; break;default:data.a=1;data.b=2;break;}switch(8){case 7:printIntLine(data.a);printIntLine(data.b);break;default:data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);break;}}
void goodG2B1(){twointsclass data;switch(5){case 6:; break;default:data.a=1;data.b=2;break;}switch(7){case 7:printIntLine(data.a);printIntLine(data.b);break;default:data.a=1;data.b=2;printIntLine(data.a);printIntLine(data.b);break;}}
void goodG2B(){twointsclass data;data.a=1;data.b=2;goodG2B_sink(&data);}
void goodB2G(){twointsclass data;; goodB2G_sink(&data);}
void goodG2B1(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(global_f){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(global_five==5){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{;}if(global_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G2(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_const_t){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_const_f){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_const_five==5){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(static_const_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_five!=5){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_five==5){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(static_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(static_returns_f()){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_returns_t()){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=(twointsclass *)ALLOCA(10*sizeof(twointsclass));if(global_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(global_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(static_returns_t()){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{;}if(static_returns_t()){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G1(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(global_const_t){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_const_f){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(global_f){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;goodG2B_source(data);for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}
void goodB2G(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}
void goodB2G2(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(1){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(1){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(0){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(1){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G2(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(static_const_t){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;if(static_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(static_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;while(0){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}break;}while(1){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}break;}while(0){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}while(1){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}}
void goodG2B(){twointsclass * data;twointsclass data_uninit_array[10];data=data_uninit_array;while(1){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}break;}while(0){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}break;}while(1){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}while(0){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}}
void goodB2G2(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));if(1){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(1){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));if(global_const_f){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));if(global_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{;}if(global_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G1(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));if(global_returns_t()){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_returns_f()){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G1(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));if(static_const_t){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_const_f){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));while(1){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}break;}while(0){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}break;}while(1){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}while(0){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}}
void goodG2B(){twointsclass * data;twointsclass * &data_ref=data;data=(twointsclass *)malloc(10*sizeof(twointsclass));for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}{twointsclass * data=data_ref;for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G(){twointsclass * data;data=(twointsclass *)malloc(10*sizeof(twointsclass));for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}goodB2G_sink(&data);}
void goodG2B2(){twointsclass * data;data=new twointsclass[10];if(static_five==5){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{;}if(static_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G2(){twointsclass * data;data=new twointsclass[10];if(global_returns_t()){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_returns_t()){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G1(){twointsclass * data;data=new twointsclass[10];if(global_const_five==5){;}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_const_five!=5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B(){twointsclass * data;data=new twointsclass[10];goto source;; source:for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}goto sink;for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}sink:for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}
void goodG2B1(){twointsclass * data;data=new twointsclass[10];if(0){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(1){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=new twointsclass[10];if(static_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(static_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G2(){twointsclass * data;data=new twointsclass[10];if(static_five==5){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(static_five==5){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B2(){twointsclass * data;data=new twointsclass[10];if(global_const_t){for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}if(global_const_t){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G1(){twointsclass * data;data=new twointsclass[10];if(global_returns_t()){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_returns_f()){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodG2B1(){twointsclass * data;data=new twointsclass[10];if(global_const_five!=5){for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}}if(global_const_five==5){for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}else{for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}
void goodB2G2(){twointsclass * data;data=new twointsclass[10];switch(6){case 6:for(int i=0; i<(10/2); i++){data[i].a=i;data[i].b=i;}break;default:for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}break;}switch(7){case 7:for(int i=0; i<10; i++){data[i].a=i;data[i].b=i;}for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;default:for(int i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}break;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_const_five!=5){data=NULL;}else{{twointsclass * tmp=new twointsclass;tmp->a=0;tmp->b=0;data=tmp;}}printIntLine(data[0].a);}
void goodG2B2(){twointsclass * data;data=NULL;switch(6){case 6:{twointsclass * tmp=new twointsclass;tmp->a=0;tmp->b=0;data=tmp;}break;default:data=NULL;break;}printIntLine(data[0].a);}
void goodG2B(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodG2B_sink;data=NULL;{twointsclass * tmp=new twointsclass;tmp->a=0;tmp->b=0;data=tmp;}func_ptr(data);}
void goodG2B(){char * data;data=NULL; data=goodG2B_source(data);printLine(data);delete [] data;}
void goodG2B(){char * data;data=NULL; goodG2B_source(data);printLine(data);delete [] data;}
void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL; {char * data_buf=new char[100];memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}func_ptr(data);}
void goodG2B(){twointsclass * data;data=NULL; goodG2B_source(data);printIntLine(data[0].a);delete [] data;}
void goodG2B(){twointsclass * data;data=NULL; {twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void goodG2B(){twointsclass * data;data=NULL; goodG2B_source(data);printIntLine(data[0].a);delete [] data;}
void goodG2B1(){twointsclass * data;data=NULL; if(static_five!=5){{twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printIntLine(data[0].a);delete [] data;}
void goodG2B2(){twointsclass * data;data=NULL; if(global_const_t){{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printIntLine(data[0].a);delete [] data;}
void goodG2B(){twointsclass * data;data=NULL; data=goodG2B_source(data);printIntLine(data[0].a);delete [] data;}
void goodG2B(){twointsclass * data;data=NULL; {twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}goodG2B_sink_b(data);}
void goodG2B(){twointsclass * data;data=NULL; {twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}goodG2B_sink(&data);}
void goodG2B1(){twointsclass * data;data=NULL; if(static_const_f){{static twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printIntLine(data[0].a);delete [] data;}
void goodG2B1(){twointsclass * data;data=NULL; if(global_const_f){{static twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printIntLine(data[0].a);delete [] data;}
void goodG2B2(){twointsclass * data;data=NULL; if(global_returns_t()){{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{static twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printIntLine(data[0].a);delete [] data;}
void goodG2B1(){int * data;data=NULL; if(0){{int * data_buf=(int *)ALLOCA(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B(){int * data;data=NULL; {int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}{int * data_copy=data;int * data=data_copy;printIntLine(data[0]);delete [] data;}}
void goodG2B(){int * data;union_type my_union;data=NULL; {int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}my_union.a=data;{int * data=my_union.b;printIntLine(data[0]);delete [] data;}}
void goodG2B(){int * data;data=NULL; {int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_int_alloca_68_goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){int * data;data=NULL; if(static_const_f){{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B2(){int * data;data=NULL; if(static_t){{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B2(){int * data;data=NULL; if(static_const_five==5){{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B1(){int * data;data=NULL; if(global_const_five!=5){{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B(){int h,i;int * data;data=NULL; for(h=0; h < 1; h++){{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}for(i=0; i < 0; i++){{int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B(){int * data;int * &data_ref=data;data=NULL; {int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}{int * data=data_ref;printIntLine(data[0]);delete [] data;}}
void goodG2B1(){int * data;data=NULL; if(global_five!=5){{static int data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}else{{int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}}printIntLine(data[0]);delete [] data;}
void goodG2B(){long long * data;long long * &data_ref=data;data=NULL; {long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}{long long * data=data_ref;printLongLongLine(data[0]);delete [] data;}}
void goodG2B2(){long long * data;data=NULL; if(global_returns_t()){{long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);delete [] data;}
void goodG2B2(){long long * data;data=NULL; switch(6){case 6:{long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}break;default:{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}break;}printLongLongLine(data[0]);delete [] data;}
void goodG2B2(){long long * data;data=NULL; if(static_t){{long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{static long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);delete [] data;}
void goodG2B2(){long long * data;data=NULL; if(static_const_five==5){{long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}else{{static long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}}printLongLongLine(data[0]);delete [] data;}
void goodG2B(){long long * data;long long * &data_ref=data;data=NULL; {long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}{long long * data=data_ref;printLongLongLine(data[0]);delete [] data;}}
void goodG2B(){long long * data;data=NULL; {long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}goodG2B_sink(&data);}
void goodG2B(){twoints * data;data=NULL; if(global_returns_t_or_f()){{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);delete [] data;}
void goodG2B1(){twoints * data;data=NULL; switch(5){case 6:{twoints * data_buf=(twoints *)ALLOCA(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}break;default:{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}break;}printStructLine(&data[0]);delete [] data;}
void goodG2B(){twoints * data;data=NULL; {twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}printStructLine(&data[0]);delete [] data;}
void goodG2B1(){twoints * data;data=NULL; if(global_const_five!=5){{twoints data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);delete [] data;}
void goodG2B(){twoints * data;union_type my_union;data=NULL; {twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}my_union.a=data;{twoints * data=my_union.b;printStructLine(&data[0]);delete [] data;}}
void goodG2B1(){twoints * data;data=NULL; if(static_five!=5){{static twoints data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);delete [] data;}
void goodG2B1(){twoints * data;data=NULL; if(global_five!=5){{static twoints data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}else{{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}printStructLine(&data[0]);delete [] data;}
void goodG2B(){twoints * data;data=NULL; {twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}goodG2B_sink(data);}
void goodG2B(){wchar_t * data;data=NULL; {wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}printWLine(data);delete [] data;}
void goodG2B2(){wchar_t * data;data=NULL; if(global_returns_t()){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);delete [] data;}
void goodG2B1(){wchar_t * data;data=NULL; if(global_f){{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}else{{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}}printWLine(data);delete [] data;}
void goodG2B2(){wchar_t * data;data=NULL; switch(6){case 6:{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}break;default:{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}break;}printWLine(data);delete [] data;}
void goodG2B(){wchar_t * data;data=NULL; {wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}{wchar_t * data_copy=data;wchar_t * data=data_copy;printWLine(data);delete [] data;}}
void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL; {wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B2(){list<int> data;if(5==5){data.push_back(100);data.push_back(200);}else{data.push_back(100);data.push_back(0);}if(5==5){{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){if(!*i){data.clear();}cout << " " << *i;}cout << endl;}}else{{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){cout << " " << *i;}cout << endl;}}}
void goodB2G2(){list<int> data;if(static_returns_t()){data.push_back(100);data.push_back(0);}else{data.push_back(100);data.push_back(200);}if(static_returns_t()){{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){cout << " " << *i;}cout << endl;}}else{{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){if(!*i){data.clear();}cout << " " << *i;}cout << endl;}}}
void goodG2B2(){list<int> data;if(static_returns_t()){data.push_back(100);data.push_back(200);}else{data.push_back(100);data.push_back(0);}if(static_returns_t()){{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){if(!*i){data.clear();}cout << " " << *i;}cout << endl;}}else{{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){cout << " " << *i;}cout << endl;}}}
void goodG2B1(){list<int> data;if(global_const_five!=5){data.push_back(100);data.push_back(0);}else{data.push_back(100);data.push_back(200);}if(global_const_five==5){{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){if(!*i){data.clear();}cout << " " << *i;}cout << endl;}}else{{list<int>::iterator i;cout << "The list contains: ";for( i=data.begin(); i!=data.end(); i++){cout << " " << *i;}cout << endl;}}}
void good2(){if(static_five==5){{char s[DST_SZ];cin.width(DST_SZ);cin >> s;s[DST_SZ-1]='\0';printLine(s);}}else{{char s[DST_SZ];cin >> s;s[DST_SZ-1]='\0';printLine(s);}}}
void goodG2B(){int data;data=-1;data=20;{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B2(){int data;data=-1;if(1){data=20;}else{{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B1(){int data;data=-1;if(global_const_five!=5){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}}else{data=20;}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B(){int data;data=-1;goodG2B_source(data);{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B2(){int data;data=-1;if(5==5){data=20;}else{data=INT_MAX/2+2;}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B1(){int data;data=-1;if(global_const_f){data=INT_MAX/2+2;}else{data=20;}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B2(){int data;data=-1;if(global_t){data=20;}else{data=INT_MAX/2+2;}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink_b(data);}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink_b(data);}
void goodG2B(){int data;struct_type my_struct;data=-1;data=20;my_struct.a=data;goodG2B_sink(my_struct);}
void goodG2B2(){int data;data=-1;switch(6){case 6:data=20;break;default:fscanf(stdin,"%d",&data);break;}{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}
void goodG2B(){int data;int *data_ptr1=&data;int *data_ptr2=&data;data=-1;{int data=*data_ptr1;data=20;*data_ptr1=data;}{int data=*data_ptr2;{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}}
void good2(){if(static_t){{char * data;data="string";char * * pointer=new char *;*pointer=data; {char * data=*pointer;printLine(data);}delete pointer;}}else{{char * * pointer=new char *;char * data=*pointer; delete pointer;printLine(data);}}}
void good2(){if(global_returns_t()){{char * data;data="string";char * * pointer=new char *;*pointer=data; {char * data=*pointer;printLine(data);}delete pointer;}}else{{char * * pointer=new char *;char * data=*pointer; delete pointer;printLine(data);}}}
void good2(){if(global_five==5){{char * data;data="string";char * * pointer=new char *;*pointer=data; {char * data=*pointer;printLine(data);}delete pointer;}}else{{char * * pointer=new char *;char * data=*pointer; delete pointer;printLine(data);}}}
void good1(){if(0){{double * * pointer=new double *;double * data=*pointer; delete pointer;printDoubleLine(*data);}}else{{double * data;data=new double;*data=5.0;double * * pointer=new double *;*pointer=data; {double * data=*pointer;printDoubleLine(*data);}delete pointer;}}}
void good1(){if(5!=5){{double * * pointer=new double *;double * data=*pointer; delete pointer;printDoubleLine(*data);}}else{{double * data;data=new double;*data=5.0;double * * pointer=new double *;*pointer=data; {double * data=*pointer;printDoubleLine(*data);}delete pointer;}}}
void good1(){if(global_const_f){{double * * pointer=new double *;double * data=*pointer; delete pointer;printDoubleLine(*data);}}else{{double * data;data=new double;*data=5.0;double * * pointer=new double *;*pointer=data; {double * data=*pointer;printDoubleLine(*data);}delete pointer;}}}
void good1(){if(global_five!=5){{double * * pointer=new double *;double * data=*pointer; delete pointer;printDoubleLine(*data);}}else{{double * data;data=new double;*data=5.0;double * * pointer=new double *;*pointer=data; {double * data=*pointer;printDoubleLine(*data);}delete pointer;}}}
void good1(){if(static_five!=5){{int * * pointer=new int *;int * data=*pointer; delete pointer;printIntLine(*data);}}else{{int * data;data=new int;*data=5;int * * pointer=new int *;*pointer=data; {int * data=*pointer;printIntLine(*data);}delete pointer;}}}
void good2(){if(static_const_five==5){{long long data;data=5L;long long * pointer=new long long;*pointer=data; {long long data=*pointer;printLongLongLine(data);}delete pointer;}}else{{long long * pointer=new long long;long long data=*pointer; delete pointer;printLongLongLine(data);}}}
void good2(){if(static_returns_t()){{long long data;data=5L;long long * pointer=new long long;*pointer=data; {long long data=*pointer;printLongLongLine(data);}delete pointer;}}else{{long long * pointer=new long long;long long data=*pointer; delete pointer;printLongLongLine(data);}}}
void good1(){int j,k;for(j=0; j < 0; j++){{long long * pointer=new long long;long long data=*pointer; delete pointer;printLongLongLine(data);}}for(k=0; k < 1; k++){{long long data;data=5L;long long * pointer=new long long;*pointer=data; {long long data=*pointer;printLongLongLine(data);}delete pointer;}}}
void good2(){if(static_const_t){{twoints * data;data=new twoints;data->a=5;data->b=6;twoints * * pointer=new twoints *;*pointer=data; {twoints * data=*pointer;printIntLine(data->a);printIntLine(data->b);}delete pointer;}}else{{twoints * * pointer=new twoints *;twoints * data=*pointer; delete pointer;printIntLine(data->a);printIntLine(data->b);}}}
void good1(){{twoints * data;data=new twoints;data->a=5;data->b=6;twoints * * pointer=new twoints *;*pointer=data; {twoints * data=*pointer;printIntLine(data->a);printIntLine(data->b);}delete pointer;}return;{twoints * * pointer=new twoints *;twoints * data=*pointer; delete pointer;printIntLine(data->a);printIntLine(data->b);}}
void good2(){if(static_const_t){{twointsclass data;data.a=1;data.b=2;twointsclass * pointer=new twointsclass;*pointer=data; {twointsclass data=*pointer;printIntLine(data.a);printIntLine(data.b);}delete pointer;}}else{{twointsclass * pointer=new twointsclass;twointsclass data=*pointer; delete pointer;printIntLine(data.a);printIntLine(data.b);}}}
void good1(){if(static_const_five!=5){{twointsclass * pointer=new twointsclass;twointsclass data=*pointer; delete pointer;printIntLine(data.a);printIntLine(data.b);}}else{{twointsclass data;data.a=1;data.b=2;twointsclass * pointer=new twointsclass;*pointer=data; {twointsclass data=*pointer;printIntLine(data.a);printIntLine(data.b);}delete pointer;}}}
void good1(){while(0){{twointsclass * pointer=new twointsclass;twointsclass data=*pointer; delete pointer;printIntLine(data.a);printIntLine(data.b);}break;}while(1){{twointsclass data;data.a=1;data.b=2;twointsclass * pointer=new twointsclass;*pointer=data; {twointsclass data=*pointer;printIntLine(data.a);printIntLine(data.b);}delete pointer;}break;}}
void good2(){if(global_returns_t()){{twointsclass * data;data=new twointsclass;data->a=5;data->b=6;twointsclass * * pointer=new twointsclass *;*pointer=data; {twointsclass * data=*pointer;printIntLine(data->a);printIntLine(data->b);}delete pointer;}}else{{twointsclass * * pointer=new twointsclass *;twointsclass * data=*pointer; delete pointer;printIntLine(data->a);printIntLine(data->b);}}}
void good2(){if(global_five==5){{twointsclass * data;data=new twointsclass;data->a=5;data->b=6;twointsclass * * pointer=new twointsclass *;*pointer=data; {twointsclass * data=*pointer;printIntLine(data->a);printIntLine(data->b);}delete pointer;}}else{{twointsclass * * pointer=new twointsclass *;twointsclass * data=*pointer; delete pointer;printIntLine(data->a);printIntLine(data->b);}}}
void good1(){if(static_f){{wchar_t * * pointer=new wchar_t *;wchar_t * data=*pointer; delete pointer;printWLine(data);}}else{{wchar_t * data;data=L"string";wchar_t * * pointer=new wchar_t *;*pointer=data; {wchar_t * data=*pointer;printWLine(data);}delete pointer;}}}
void good2(){if(static_const_five==5){{wchar_t * data;data=L"string";wchar_t * * pointer=new wchar_t *;*pointer=data; {wchar_t * data=*pointer;printWLine(data);}delete pointer;}}else{{wchar_t * * pointer=new wchar_t *;wchar_t * data=*pointer; delete pointer;printWLine(data);}}}
void goodB2G2(){char * data;data=NULL;if(5==5){data=(char *)calloc(100,sizeof(char));}else{data=new char[100];}if(5==5){free(data);}else{delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(static_five!=5){data=(char *)calloc(100,sizeof(char));}else{data=new char[100];}if(static_five==5){delete [] data;}else{free(data);}}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);delete [] data;}
void goodB2G(){char * data;data=NULL;data=(char *)calloc(100,sizeof(char));goodB2G_data=data;goodB2G_sink();}
void goodB2G1(){char * data;data=NULL;if(static_t){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(static_f){delete [] data;}else{free(data);}}
void goodB2G2(){char * data;data=NULL;if(global_const_t){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(global_const_t){free(data);}else{delete [] data;}}
void goodB2G(){char * data;data=NULL;if(global_returns_t_or_f()){data=(char *)malloc(100*sizeof(char));}else{data=(char *)malloc(100*sizeof(char));}if(global_returns_t_or_f()){free(data);}else{free(data);}}
void goodB2G2(){char * data;data=NULL;if(global_five==5){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(global_five==5){free(data);}else{delete [] data;}}
void goodG2B(){char * data;char * &data_ref=data;data=NULL;data=new char[100];{char * data=data_ref;delete [] data;}}
void goodB2G(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));goodB2G_sink_b(data);}
void goodG2B1(){char * data;data=NULL;if(global_returns_f()){data=NULL;data=(char *)realloc(data,100*sizeof(char));}else{data=new char[100];}if(global_returns_t()){delete [] data;}else{free(data);}}
void goodB2G(){char * data;data=NULL;goodB2G_source(data);free(data);}
void goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink_b(data);}
void goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];{twointsclass * data_copy=data;twointsclass * data=data_copy;delete [] data;}}
void goodB2G(){twointsclass * data;union_type my_union;data=NULL;data=(twointsclass *)calloc(100,sizeof(twointsclass));my_union.a=data;{twointsclass * data=my_union.b;free(data);}}
void goodB2G(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=(twointsclass *)calloc(100,sizeof(twointsclass));data_array[2]=data;goodB2G_sink(data_array);}
void goodB2G1(){twointsclass * data;data=NULL;if(static_const_t){data=(twointsclass *)malloc(100*sizeof(twointsclass));}else{data=new twointsclass[100];}if(static_const_f){delete [] data;}else{free(data);}}
void goodG2B2(){twointsclass * data;data=NULL;if(global_five==5){data=new twointsclass[100];}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_five==5){delete [] data;}else{free(data);}}
void goodB2G(){twointsclass * data;data=NULL;goto source;data=new twointsclass[100];source:data=(twointsclass *)malloc(100*sizeof(twointsclass));goto sink;delete [] data;sink:free(data);}
void goodB2G(){twointsclass * data;twointsclass * &data_ref=data;data=NULL;data=(twointsclass *)malloc(100*sizeof(twointsclass));{twointsclass * data=data_ref;free(data);}}
void goodB2G2(){twointsclass * data;data=NULL;if(5==5){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass[100];}if(5==5){free(data);}else{delete [] data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_returns_f()){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass[100];}if(static_returns_t()){delete [] data;}else{free(data);}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_returns_f()){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass[100];}if(global_returns_t()){delete [] data;}else{free(data);}}
void goodB2G(){twointsclass * data;data=NULL;goodB2G_source(data);free(data);}
void goodG2B2(){int * data;data=NULL;switch(6){case 6:data=new int[100];break;default:data=(int *)calloc(100,sizeof(int));break;}switch(7){case 7:delete [] data;break;default:free(data);break;}}
void goodG2B(){int * data;data=NULL;data=new int[100];goodG2B_sink_b(data);}
void goodB2G1(){int * data;data=NULL;if(global_returns_t()){data=(int *)malloc(100*sizeof(int));}else{data=new int[100];}if(global_returns_f()){delete [] data;}else{free(data);}}
void goodB2G(){int * data;void(*func_ptr)(int *)=goodB2G_sink;data=NULL;data=(int *)malloc(100*sizeof(int));func_ptr(data);}
void goodB2G2(){int * data;data=NULL;if(5==5){data=NULL;data=(int *)realloc(data,100*sizeof(int));}else{data=new int[100];}if(5==5){free(data);}else{delete [] data;}}
void goodG2B1(){int * data;data=NULL;if(static_returns_f()){data=NULL;data=(int *)realloc(data,100*sizeof(int));}else{data=new int[100];}if(static_returns_t()){delete [] data;}else{free(data);}}
void goodG2B1(){int * data;data=NULL;if(global_returns_f()){data=NULL;data=(int *)realloc(data,100*sizeof(int));}else{data=new int[100];}if(global_returns_t()){delete [] data;}else{free(data);}}
void goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;data=new int[100];func_ptr(data);}
void goodG2B2(){long long * data;data=NULL;if(static_five==5){data=new long long[100];}else{data=(long long *)calloc(100,sizeof(long long));}if(static_five==5){delete [] data;}else{free(data);}}
void goodB2G2(){long long * data;data=NULL;if(global_const_t){data=(long long *)calloc(100,sizeof(long long));}else{data=new long long[100];}if(global_const_t){free(data);}else{delete [] data;}}
void goodG2B(){long long * data;data=NULL;if(global_returns_t_or_f()){data=new long long[100];}else{data=new long long[100];}if(global_returns_t_or_f()){delete [] data;}else{delete [] data;}}
void goodB2G(){int h,i,j,k;long long * data;data=NULL;for(h=0; h < 0; h++){data=new long long[100];}for(i=0; i < 1; i++){data=(long long *)calloc(100,sizeof(long long));}for(j=0; j < 0; j++){delete [] data;}for(k=0; k < 1; k++){free(data);}}
void goodB2G(){long long * data;union_type my_union;data=NULL;data=(long long *)calloc(100,sizeof(long long));my_union.a=data;{long long * data=my_union.b;free(data);}}
void goodB2G(){long long * data;data=NULL;data=(long long *)calloc(100,sizeof(long long));goodB2G_sink(data);}
void goodG2B(){long long * data;void(*func_ptr)(long long *)=goodG2B_sink;data=NULL;data=new long long[100];func_ptr(data);}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_sink(data);}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_sink_b(data);}
void goodG2B1(){long long * data;data=NULL;if(static_const_five!=5){data=(long long *)malloc(100*sizeof(long long));}else{data=new long long[100];}if(static_const_five==5){delete [] data;}else{free(data);}}
void goodB2G(){long long * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodB2G(){long long * data;void(*func_ptr)(long long *)=goodB2G_sink;data=NULL;data=(long long *)malloc(100*sizeof(long long));func_ptr(data);}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_data=data;goodG2B_sink();}
void goodG2B(){long long * data;data=NULL;data=new long long[100];delete [] data;}
void goodG2B1(){long long * data;data=NULL;if(static_f){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}else{data=new long long[100];}if(static_t){delete [] data;}else{free(data);}}
void goodG2B2(){long long * data;data=NULL;if(static_returns_t()){data=new long long[100];}else{data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}if(static_returns_t()){delete [] data;}else{free(data);}}
void goodG2B(){long long * data;data=NULL;if(global_returns_t_or_f()){data=new long long[100];}else{data=new long long[100];}if(global_returns_t_or_f()){delete [] data;}else{delete [] data;}}
void goodB2G(){long long * data;data=NULL;data=NULL;data=(long long *)realloc(data,100*sizeof(long long));free(data);return;delete [] data;}
void goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_sink_b(data);}
void goodB2G(){long long * data;data=NULL;data=NULL;data=(long long *)realloc(data,100*sizeof(long long));goodB2G_sink_b(data);}
void goodG2B1(){twoints * data;data=NULL;if(global_returns_f()){data=(twoints *)calloc(100,sizeof(twoints));}else{data=new twoints[100];}if(global_returns_t()){delete [] data;}else{free(data);}}
void goodB2G1(){twoints * data;data=NULL;if(global_five==5){data=(twoints *)calloc(100,sizeof(twoints));}else{data=new twoints[100];}if(global_five!=5){delete [] data;}else{free(data);}}
void goodB2G(){twoints * data;union_type my_union;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));my_union.a=data;{twoints * data=my_union.b;free(data);}}
void goodG2B(){twoints * data;data=NULL;data=goodG2B_source(data);delete [] data;}
void goodB2G(){twoints * data;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));goodB2G_sink(data);}
void goodG2B(){twoints * data;data=NULL;data=new twoints[100];delete [] data;}
void goodG2B2(){twoints * data;data=NULL;if(5==5){data=new twoints[100];}else{data=(twoints *)malloc(100*sizeof(twoints));}if(5==5){delete [] data;}else{free(data);}}
void goodG2B1(){twoints * data;data=NULL;if(static_const_five!=5){data=(twoints *)malloc(100*sizeof(twoints));}else{data=new twoints[100];}if(static_const_five==5){delete [] data;}else{free(data);}}
void goodG2B2(){twoints * data;data=NULL;if(global_t){data=new twoints[100];}else{data=(twoints *)malloc(100*sizeof(twoints));}if(global_t){delete [] data;}else{free(data);}}
void goodB2G2(){twoints * data;data=NULL;switch(6){case 6:data=(twoints *)malloc(100*sizeof(twoints));break;default:data=new twoints[100];break;}switch(7){case 7:free(data);break;default:delete [] data;break;}}
void goodB2G(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodB2G_sink(data);}
void goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_sink(data);}
void goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){twoints * data;data=NULL;if(static_returns_f()){data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));}else{data=new twoints[100];}if(static_returns_t()){delete [] data;}else{free(data);}}
void goodB2G(){twoints * data;data=NULL;data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));goodB2G_sink(data);}
void goodB2G(){twoints * data;twoints * data_array[5];data=NULL;data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B(){wchar_t * data;data=NULL;if(global_returns_t_or_f()){data=new wchar_t[100];}else{data=new wchar_t[100];}if(global_returns_t_or_f()){delete [] data;}else{delete [] data;}}
void goodG2B(){int h,i,j,k;wchar_t * data;data=NULL;for(h=0; h < 1; h++){data=new wchar_t[100];}for(i=0; i < 0; i++){data=(wchar_t *)calloc(100,sizeof(wchar_t));}for(j=0; j < 1; j++){delete [] data;}for(k=0; k < 0; k++){free(data);}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;data=new wchar_t[100];my_union.a=data;{wchar_t * data=my_union.b;delete [] data;}}
void goodB2G(){wchar_t * data;data=NULL;goodB2G_source(data);free(data);}
void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)calloc(100,sizeof(wchar_t));goodB2G_sink_b(data);}
void goodB2G2(){wchar_t * data;data=NULL;if(static_const_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(static_const_five==5){free(data);}else{delete [] data;}}
void goodB2G1(){wchar_t * data;data=NULL;if(static_five==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(static_five!=5){delete [] data;}else{free(data);}}
void goodG2B(){wchar_t * data;data=NULL;while(1){data=new wchar_t[100];break;}while(0){data=(wchar_t *)malloc(100*sizeof(wchar_t));break;}while(1){delete [] data;break;}while(0){free(data);break;}}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];goodG2B_sink(&data);}
void goodB2G2(){wchar_t * data;data=NULL;if(static_const_t){data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(static_const_t){free(data);}else{delete [] data;}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_t){data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(global_t){free(data);}else{delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_returns_t()){data=new wchar_t[100];}else{data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}if(global_returns_t()){delete [] data;}else{free(data);}}
void goodB2G(){wchar_t * data;data=NULL;if(global_returns_t_or_f()){data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}else{data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}if(global_returns_t_or_f()){free(data);}else{free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_five==5){data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(global_five==5){free(data);}else{delete [] data;}}
void goodG2B(){wchar_t * data;union_type my_union;data=NULL;data=new wchar_t[100];my_union.a=data;{wchar_t * data=my_union.b;delete [] data;}}
void goodB2G2(){char * data;data=NULL;if(1){data=(char *)calloc(100,sizeof(char));}else{data=new char;}if(1){free(data);}else{delete data;}}
void goodB2G2(){char * data;data=NULL;if(5==5){data=(char *)calloc(100,sizeof(char));}else{data=new char;}if(5==5){free(data);}else{delete data;}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){data=(char *)calloc(100,sizeof(char));}else{data=new char;}if(static_returns_t()){delete data;}else{free(data);}}
void goodG2B(){char * data;data=NULL;data=new char;goodG2B_sink(&data);}
void goodG2B2(){char * data;data=NULL;if(static_const_t){data=new char;}else{data=(char *)malloc(100*sizeof(char));}if(static_const_t){delete data;}else{free(data);}}
void goodB2G1(){char * data;data=NULL;if(static_t){data=(char *)malloc(100*sizeof(char));}else{data=new char;}if(static_f){delete data;}else{free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_t){data=new char;}else{data=(char *)malloc(100*sizeof(char));}if(static_t){delete data;}else{free(data);}}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;data=new char;*data_ptr1=data;}{char * data=*data_ptr2;delete data;}}
void goodG2B1(){char * data;data=NULL;if(static_const_f){data=NULL;data=(char *)realloc(data,100*sizeof(char));}else{data=new char;}if(static_const_t){delete data;}else{free(data);}}
void goodG2B2(){char * data;data=NULL;if(static_t){data=new char;}else{data=NULL;data=(char *)realloc(data,100*sizeof(char));}if(static_t){delete data;}else{free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_const_five!=5){data=NULL;data=(char *)realloc(data,100*sizeof(char));}else{data=new char;}if(static_const_five==5){delete data;}else{free(data);}}
void goodG2B1(){char * data;data=NULL;if(static_returns_f()){data=NULL;data=(char *)realloc(data,100*sizeof(char));}else{data=new char;}if(static_returns_t()){delete data;}else{free(data);}}
void goodG2B2(){char * data;data=NULL;if(global_returns_t()){data=new char;}else{data=NULL;data=(char *)realloc(data,100*sizeof(char));}if(global_returns_t()){delete data;}else{free(data);}}
void goodG2B2(){char * data;data=NULL;if(global_const_five==5){data=new char;}else{data=NULL;data=(char *)realloc(data,100*sizeof(char));}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G(){char * data;data=NULL;while(0){data=new char;break;}while(1){data=NULL;data=(char *)realloc(data,100*sizeof(char));break;}while(0){delete data;break;}while(1){free(data);break;}}
void goodB2G(){char * data;data=NULL;data=NULL;data=(char *)realloc(data,100*sizeof(char));free(data);return;delete data;}
void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);delete data;}
void goodB2G2(){twointsclass * data;data=NULL;if(1){data=(twointsclass *)calloc(100,sizeof(twointsclass));}else{data=new twointsclass;}if(1){free(data);}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(0){data=(twointsclass *)calloc(100,sizeof(twointsclass));}else{data=new twointsclass;}if(1){delete data;}else{free(data);}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_f){data=(twointsclass *)calloc(100,sizeof(twointsclass));}else{data=new twointsclass;}if(static_t){delete data;}else{free(data);}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_five!=5){data=(twointsclass *)calloc(100,sizeof(twointsclass));}else{data=new twointsclass;}if(global_five==5){delete data;}else{free(data);}}
void goodB2G(){twointsclass * data;twointsclass * *data_ptr1=&data;twointsclass * *data_ptr2=&data;data=NULL;{twointsclass * data=*data_ptr1;data=(twointsclass *)calloc(100,sizeof(twointsclass));*data_ptr1=data;}{twointsclass * data=*data_ptr2;free(data);}}
void goodG2B(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodG2B_sink;data=NULL;data=new twointsclass;func_ptr(data);}
void goodG2B(){twointsclass * data;data=NULL;goodG2B_source(data);delete data;}
void goodB2G1(){twointsclass * data;data=NULL;if(static_const_t){data=(twointsclass *)malloc(100*sizeof(twointsclass));}else{data=new twointsclass;}if(static_const_f){delete data;}else{free(data);}}
void goodB2G2(){twointsclass * data;data=NULL;if(static_returns_t()){data=(twointsclass *)malloc(100*sizeof(twointsclass));}else{data=new twointsclass;}if(static_returns_t()){free(data);}else{delete data;}}
void goodG2B(){twointsclass * data;data=NULL;if(global_returns_t_or_f()){data=new twointsclass;}else{data=new twointsclass;}if(global_returns_t_or_f()){delete data;}else{delete data;}}
void goodG2B2(){twointsclass * data;data=NULL;if(global_const_five==5){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G(){twointsclass * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodB2G2(){twointsclass * data;data=NULL;if(static_const_five==5){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass;}if(static_const_five==5){free(data);}else{delete data;}}
void goodB2G2(){twointsclass * data;data=NULL;if(static_five==5){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass;}if(static_five==5){free(data);}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_const_five!=5){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass;}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G2(){twointsclass * data;data=NULL;if(global_five==5){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}else{data=new twointsclass;}if(global_five==5){free(data);}else{delete data;}}
void goodB2G1(){twointsclass * data;data=NULL;switch(6){case 6:data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));break;default:data=new twointsclass;break;}switch(8){case 7:delete data;break;default:free(data);break;}}
void goodG2B(){int h,i,j,k;twointsclass * data;data=NULL;for(h=0; h < 1; h++){data=new twointsclass;}for(i=0; i < 0; i++){data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));}for(j=0; j < 1; j++){delete data;}for(k=0; k < 0; k++){free(data);}}
void goodG2B(){twointsclass * data;data=NULL;data=goodG2B_source(data);delete data;}
void goodB2G(){twointsclass * data;data=NULL;data=NULL;data=(twointsclass *)realloc(data,100*sizeof(twointsclass));goodB2G_data=data;goodB2G_sink();}
void goodG2B1(){int * data;data=NULL;if(static_five!=5){data=(int *)calloc(100,sizeof(int));}else{data=new int;}if(static_five==5){delete data;}else{free(data);}}
void goodB2G1(){int * data;data=NULL;if(static_returns_t()){data=(int *)calloc(100,sizeof(int));}else{data=new int;}if(static_returns_f()){delete data;}else{free(data);}}
void goodG2B2(){int * data;data=NULL;if(global_const_five==5){data=new int;}else{data=(int *)calloc(100,sizeof(int));}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G1(){int * data;data=NULL;if(global_five==5){data=(int *)calloc(100,sizeof(int));}else{data=new int;}if(global_five!=5){delete data;}else{free(data);}}
void goodB2G(){int h,i,j,k;int * data;data=NULL;for(h=0; h < 0; h++){data=new int;}for(i=0; i < 1; i++){data=(int *)calloc(100,sizeof(int));}for(j=0; j < 0; j++){delete data;}for(k=0; k < 1; k++){free(data);}}
void goodG2B(){int * data;data=NULL;goodG2B_source(data);delete data;}
void goodB2G(){int * data;data=NULL;data=(int *)calloc(100,sizeof(int));goodB2G_data=data;goodB2G_sink();}
void goodG2B2(){int * data;data=NULL;if(static_const_t){data=new int;}else{data=(int *)malloc(100*sizeof(int));}if(static_const_t){delete data;}else{free(data);}}
void goodB2G2(){int * data;data=NULL;if(global_t){data=(int *)malloc(100*sizeof(int));}else{data=new int;}if(global_t){free(data);}else{delete data;}}
void goodB2G1(){int * data;data=NULL;if(global_returns_t()){data=(int *)malloc(100*sizeof(int));}else{data=new int;}if(global_returns_f()){delete data;}else{free(data);}}
void goodG2B(){int * data;data=NULL;if(global_returns_t_or_f()){data=new int;}else{data=new int;}if(global_returns_t_or_f()){delete data;}else{delete data;}}
void goodB2G(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));free(data);return;delete data;}
void goodG2B(){int * data;data=NULL;data=new int;goodG2B_data=data;goodG2B_sink();}
void goodG2B1(){int * data;data=NULL;if(static_const_f){data=NULL;data=(int *)realloc(data,100*sizeof(int));}else{data=new int;}if(static_const_t){delete data;}else{free(data);}}
void goodG2B2(){int * data;data=NULL;if(static_returns_t()){data=new int;}else{data=NULL;data=(int *)realloc(data,100*sizeof(int));}if(static_returns_t()){delete data;}else{free(data);}}
void goodB2G2(){int * data;data=NULL;switch(6){case 6:data=NULL;data=(int *)realloc(data,100*sizeof(int));break;default:data=new int;break;}switch(7){case 7:free(data);break;default:delete data;break;}}
void goodB2G(){int * data;data=NULL;data=NULL;data=(int *)realloc(data,100*sizeof(int));{int * data_copy=data;int * data=data_copy;free(data);}}
void goodB2G(){int * data;data=NULL;goodB2G_source(data);free(data);}
void goodB2G(){int * data;int * data_array[5];data=NULL;data=NULL;data=(int *)realloc(data,100*sizeof(int));data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B(){long long * data;data=NULL;data=new long long;delete data;}
void goodB2G2(){long long * data;data=NULL;if(global_t){data=(long long *)calloc(100,sizeof(long long));}else{data=new long long;}if(global_t){free(data);}else{delete data;}}
void goodG2B1(){long long * data;data=NULL;if(5!=5){data=(long long *)malloc(100*sizeof(long long));}else{data=new long long;}if(5==5){delete data;}else{free(data);}}
void goodG2B2(){long long * data;data=NULL;if(5==5){data=new long long;}else{data=(long long *)malloc(100*sizeof(long long));}if(5==5){delete data;}else{free(data);}}
void goodG2B(){long long * data;data=NULL;if(global_returns_t_or_f()){data=new long long;}else{data=new long long;}if(global_returns_t_or_f()){delete data;}else{delete data;}}
void goodG2B(){long long * data;union_type my_union;data=NULL;data=new long long;my_union.a=data;{long long * data=my_union.b;delete data;}}
void goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink(data);}
void goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink(&data);}
void goodB2G1(){long long * data;data=NULL;if(1){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}else{data=new long long;}if(0){delete data;}else{free(data);}}
void goodB2G1(){long long * data;data=NULL;if(static_const_five==5){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}else{data=new long long;}if(static_const_five!=5){delete data;}else{free(data);}}
void goodB2G2(){long long * data;data=NULL;if(static_const_five==5){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}else{data=new long long;}if(static_const_five==5){free(data);}else{delete data;}}
void goodG2B1(){long long * data;data=NULL;if(static_returns_f()){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}else{data=new long long;}if(static_returns_t()){delete data;}else{free(data);}}
void goodG2B2(){long long * data;data=NULL;if(global_const_t){data=new long long;}else{data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}if(global_const_t){delete data;}else{free(data);}}
void goodG2B2(){long long * data;data=NULL;if(global_t){data=new long long;}else{data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}if(global_t){delete data;}else{free(data);}}
void goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink_b(data);}
void goodB2G(){long long * data;struct_type my_struct;data=NULL;data=NULL;data=(long long *)realloc(data,100*sizeof(long long));my_struct.a=data;goodB2G_sink(my_struct);}
void goodG2B1(){twoints * data;data=NULL;switch(5){case 6:data=(twoints *)calloc(100,sizeof(twoints));break;default:data=new twoints;break;}switch(7){case 7:delete data;break;default:free(data);break;}}
void goodB2G(){twoints * data;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));{twoints * data_copy=data;twoints * data=data_copy;free(data);}}
void goodB2G(){twoints * data;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));goodB2G_sink(data);}
void goodG2B(){twoints * data;data=NULL;data=new twoints;goodG2B_sink(&data);}
void goodG2B1(){twoints * data;data=NULL;if(static_const_f){data=(twoints *)malloc(100*sizeof(twoints));}else{data=new twoints;}if(static_const_t){delete data;}else{free(data);}}
void goodG2B(){twoints * data;data=NULL;data=goodG2B_source(data);delete data;}
void goodG2B(){twoints * data;data=NULL;data=new twoints;goodG2B_sink_b(data);}
void goodB2G(){twoints * data;void(*func_ptr)(twoints *)=goodB2G_sink;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));func_ptr(data);}
void goodB2G2(){twoints * data;data=NULL;switch(6){case 6:data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));break;default:data=new twoints;break;}switch(7){case 7:free(data);break;default:delete data;break;}}
void goodB2G(){int h,i,j,k;twoints * data;data=NULL;for(h=0; h < 0; h++){data=new twoints;}for(i=0; i < 1; i++){data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));}for(j=0; j < 0; j++){delete data;}for(k=0; k < 1; k++){free(data);}}
void goodB2G1(){wchar_t * data;data=NULL;if(static_five==5){data=(wchar_t *)calloc(100,sizeof(wchar_t));}else{data=new wchar_t;}if(static_five!=5){delete data;}else{free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(static_returns_t()){data=(wchar_t *)calloc(100,sizeof(wchar_t));}else{data=new wchar_t;}if(static_returns_t()){free(data);}else{delete data;}}
void goodB2G1(){wchar_t * data;data=NULL;if(global_returns_t()){data=(wchar_t *)calloc(100,sizeof(wchar_t));}else{data=new wchar_t;}if(global_returns_f()){delete data;}else{free(data);}}
void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)calloc(100,sizeof(wchar_t));{wchar_t * data_copy=data;wchar_t * data=data_copy;free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=goodG2B_source(data);delete data;}
void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=new wchar_t;func_ptr(data);}
void goodB2G1(){wchar_t * data;data=NULL;if(5==5){data=(wchar_t *)malloc(100*sizeof(wchar_t));}else{data=new wchar_t;}if(5!=5){delete data;}else{free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_t){data=new wchar_t;}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(static_const_t){delete data;}else{free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_const_five!=5){data=(wchar_t *)malloc(100*sizeof(wchar_t));}else{data=new wchar_t;}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));goodB2G_data=data;goodB2G_sink();}
void goodG2B(){wchar_t * data;data=NULL;data=new wchar_t;goodG2B_sink(data);}
void goodG2B1(){char * data;data=NULL;if(global_f){data=new char[100];}else{data=new char;}if(global_t){delete data;}else{delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(global_returns_f()){data=new char[100];}else{data=new char;}if(global_returns_t()){delete data;}else{delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(global_const_five!=5){data=new char[100];}else{data=new char;}if(global_const_five==5){delete data;}else{delete [] data;}}
void goodB2G1(){char * data;data=NULL;if(global_five==5){data=new char[100];}else{data=new char;}if(global_five!=5){delete data;}else{delete [] data;}}
void goodB2G2(){char * data;data=NULL;if(global_five==5){data=new char[100];}else{data=new char;}if(global_five==5){delete [] data;}else{delete data;}}
void goodB2G2(){char * data;data=NULL;switch(6){case 6:data=new char[100];break;default:data=new char;break;}switch(7){case 7:delete [] data;break;default:delete data;break;}}
void goodG2B2(){char * data;data=NULL;switch(6){case 6:data=new char;break;default:data=new char[100];break;}switch(7){case 7:delete data;break;default:delete [] data;break;}}
void goodB2G(){char * data;data=NULL;goto source;data=new char;source:data=new char[100];goto sink;delete data;sink:delete [] data;}
void goodG2B(){char * data;data=NULL;data=new char;delete data;return;data=new char[100];delete data;}
void goodB2G(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;data=new char[100];*data_ptr1=data;}{char * data=*data_ptr2;delete [] data;}}
void goodG2B(){char * data;char * &data_ref=data;data=NULL;data=new char;{char * data=data_ref;delete data;}}
void goodG2B(){char * data;data=NULL;data=new char;goodG2B_data=data;goodG2B_sink();}
void goodB2G(){char * data;data=NULL;goodB2G_source(data);delete [] data;}
void goodB2G(){char * data;data=NULL;data=new char[100];goodB2G_data=data;goodB2G_sink();}
void goodG2B2(){twointsclass * data;data=NULL;if(static_t){data=new twointsclass;}else{data=new twointsclass[100];}if(static_t){delete data;}else{delete [] data;}}
void goodB2G1(){int * data;data=NULL;if(static_t){data=new int[100];}else{data=new int;}if(static_f){delete data;}else{delete [] data;}}
void goodG2B1(){int * data;data=NULL;if(static_f){data=new int[100];}else{data=new int;}if(static_t){delete data;}else{delete [] data;}}
void goodG2B(){int * data;data=NULL;goto source;data=new int[100];source:data=new int;goto sink;delete [] data;sink:delete data;}
void goodG2B(){int * data;data=NULL;data=new int;goodG2B_sink(data);}
void goodB2G(){int * data;data=NULL;data=new int[100];goodB2G_sink(data);}
void goodG2B(){int * data;data=NULL;data=new int;goodG2B_sink_b(data);}
void goodB2G2(){long long * data;data=NULL;if(static_const_five==5){data=new long long[100];}else{data=new long long;}if(static_const_five==5){delete [] data;}else{delete data;}}
void goodB2G2(){long long * data;data=NULL;if(global_t){data=new long long[100];}else{data=new long long;}if(global_t){delete [] data;}else{delete data;}}
void goodG2B(){long long * data;long long * *data_ptr1=&data;long long * *data_ptr2=&data;data=NULL;{long long * data=*data_ptr1;data=new long long;*data_ptr1=data;}{long long * data=*data_ptr2;delete data;}}
void goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink(&data);}
void goodG2B1(){twoints * data;data=NULL;if(static_const_f){data=new twoints[100];}else{data=new twoints;}if(static_const_t){delete data;}else{delete [] data;}}
void goodB2G(){twoints * data;data=NULL;goodB2G_source(data);delete [] data;}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];goodB2G_sink_b(data);}
void goodG2B(){twoints * data;twoints * data_array[5];data=NULL;data=new twoints;data_array[2]=data;goodG2B_sink(data_array);}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];goodB2G_data=data;goodB2G_sink();}
void goodG2B2(){wchar_t * data;data=NULL;if(5==5){data=new wchar_t;}else{data=new wchar_t[100];}if(5==5){delete data;}else{delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(static_const_five==5){data=new wchar_t;}else{data=new wchar_t[100];}if(static_const_five==5){delete data;}else{delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_t){data=new wchar_t;}else{data=new wchar_t[100];}if(global_t){delete data;}else{delete [] data;}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_returns_t()){data=new wchar_t;}else{data=new wchar_t[100];}if(global_returns_t()){delete data;}else{delete [] data;}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_const_five!=5){data=new wchar_t[100];}else{data=new wchar_t;}if(global_const_five==5){delete data;}else{delete [] data;}}
void goodB2G(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=NULL;{wchar_t * data=*data_ptr1;data=new wchar_t[100];*data_ptr1=data;}{wchar_t * data=*data_ptr2;delete [] data;}}
void goodB2G(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=new wchar_t[100];data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B2(){char * data;data=NULL;if(static_t){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(static_t){free(data);}else{delete [] data;}}
void goodG2B2(){char * data;data=NULL;if(static_five==5){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(static_five==5){free(data);}else{delete [] data;}}
void goodG2B1(){char * data;data=NULL;if(global_f){data=new char[100];}else{data=(char *)malloc(100*sizeof(char));}if(global_t){free(data);}else{delete [] data;}}
void goodG2B2(){char * data;data=NULL;if(global_t){data=(char *)malloc(100*sizeof(char));}else{data=new char[100];}if(global_t){free(data);}else{delete [] data;}}
void goodB2G(){char * data;data=NULL;if(global_returns_t_or_f()){data=new char[100];}else{data=new char[100];}if(global_returns_t_or_f()){delete [] data;}else{delete [] data;}}
void goodB2G(){int h,i,j,k;char * data;data=NULL;for(h=0; h < 0; h++){data=(char *)malloc(100*sizeof(char));}for(i=0; i < 1; i++){data=new char[100];}for(j=0; j < 0; j++){free(data);}for(k=0; k < 1; k++){delete [] data;}}
void goodB2G(){char * data;data=NULL;data=goodB2G_source(data);delete [] data;}
void goodB2G(){char * data;data=NULL;data=new char[100];goodB2G_sink_b(data);}
void goodB2G(){char * data;struct_type my_struct;data=NULL;data=new char[100];my_struct.a=data;goodB2G_sink(my_struct);}
void goodG2B(){twointsclass * data;data=NULL;data=(twointsclass *)malloc(100*sizeof(twointsclass));free(data);}
void goodG2B1(){twointsclass * data;data=NULL;if(static_f){data=new twointsclass[100];}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(static_t){free(data);}else{delete [] data;}}
void goodG2B2(){twointsclass * data;data=NULL;if(global_const_t){data=(twointsclass *)malloc(100*sizeof(twointsclass));}else{data=new twointsclass[100];}if(global_const_t){free(data);}else{delete [] data;}}
void goodB2G1(){twointsclass * data;data=NULL;if(global_five==5){data=new twointsclass[100];}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_five!=5){free(data);}else{delete [] data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_five!=5){data=new twointsclass[100];}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_five==5){free(data);}else{delete [] data;}}
void goodB2G(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodB2G_sink;data=NULL;data=new twointsclass[100];func_ptr(data);}
void goodB2G1(){int * data;data=NULL;if(static_five==5){data=new int[100];}else{data=(int *)malloc(100*sizeof(int));}if(static_five!=5){free(data);}else{delete [] data;}}
void goodB2G1(){int * data;data=NULL;if(static_returns_t()){data=new int[100];}else{data=(int *)malloc(100*sizeof(int));}if(static_returns_f()){free(data);}else{delete [] data;}}
void goodG2B1(){int * data;data=NULL;if(global_const_f){data=new int[100];}else{data=(int *)malloc(100*sizeof(int));}if(global_const_t){free(data);}else{delete [] data;}}
void goodG2B1(){int * data;data=NULL;switch(5){case 6:data=new int[100];break;default:data=(int *)malloc(100*sizeof(int));break;}switch(7){case 7:free(data);break;default:delete [] data;break;}}
void goodG2B(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));goodG2B_sink(data);}
void goodG2B(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));goodG2B_sink_b(data);}
void goodB2G(){int * data;data=NULL;data=new int[100];goodB2G_sink(&data);}
void goodG2B2(){long long * data;data=NULL;if(1){data=(long long *)malloc(100*sizeof(long long));}else{data=new long long[100];}if(1){free(data);}else{delete [] data;}}
void goodG2B1(){long long * data;data=NULL;if(static_const_five!=5){data=new long long[100];}else{data=(long long *)malloc(100*sizeof(long long));}if(static_const_five==5){free(data);}else{delete [] data;}}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));free(data);}
void goodB2G1(){twoints * data;data=NULL;if(global_five==5){data=new twoints[100];}else{data=(twoints *)malloc(100*sizeof(twoints));}if(global_five!=5){free(data);}else{delete [] data;}}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];goodB2G_sink(data);}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];goodB2G_sink(data);}
void goodB2G(){twoints * data;data=NULL;data=new twoints[100];goodB2G_sink(&data);}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodG2B_sink(&data);}
void goodB2G2(){wchar_t * data;data=NULL;if(1){data=new wchar_t[100];}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(1){delete [] data;}else{free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_t){data=new wchar_t[100];}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(global_t){delete [] data;}else{free(data);}}
void goodG2B2(){wchar_t * data;data=NULL;if(global_t){data=(wchar_t *)malloc(100*sizeof(wchar_t));}else{data=new wchar_t[100];}if(global_t){free(data);}else{delete [] data;}}
void goodG2B(){wchar_t * data;wchar_t * *data_ptr1=&data;wchar_t * *data_ptr2=&data;data=NULL;{wchar_t * data=*data_ptr1;data=(wchar_t *)malloc(100*sizeof(wchar_t));*data_ptr1=data;}{wchar_t * data=*data_ptr2;free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));goodG2B_sink_b(data);}
void goodB2G1(){char * data;data=NULL;if(1){data=new char;}else{data=new char[100];}if(0){delete [] data;}else{delete data;}}
void goodG2B2(){char * data;data=NULL;if(5==5){data=new char[100];}else{data=new char;}if(5==5){delete [] data;}else{delete data;}}
void goodB2G2(){char * data;data=NULL;if(static_returns_t()){data=new char;}else{data=new char[100];}if(static_returns_t()){delete data;}else{delete [] data;}}
void goodB2G(){char * data;data=NULL;if(global_returns_t_or_f()){data=new char;}else{data=new char;}if(global_returns_t_or_f()){delete data;}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(global_f){data=new twointsclass;}else{data=new twointsclass[100];}if(global_t){delete [] data;}else{delete data;}}
void goodB2G(){twointsclass * data;data=NULL;goodB2G_source(data);delete data;}
void goodG2B1(){int * data;data=NULL;if(global_const_f){data=new int;}else{data=new int[100];}if(global_const_t){delete [] data;}else{delete data;}}
void goodB2G1(){int * data;data=NULL;if(global_five==5){data=new int;}else{data=new int[100];}if(global_five!=5){delete [] data;}else{delete data;}}
void goodG2B1(){int * data;data=NULL;if(global_five!=5){data=new int;}else{data=new int[100];}if(global_five==5){delete [] data;}else{delete data;}}
void goodB2G(){int * data;data=NULL;goto source;data=new int[100];source:data=new int;goto sink;delete [] data;sink:delete data;}
void goodB2G2(){long long * data;data=NULL;if(static_const_five==5){data=new long long;}else{data=new long long[100];}if(static_const_five==5){delete data;}else{delete [] data;}}
void goodB2G2(){long long * data;data=NULL;if(global_const_t){data=new long long;}else{data=new long long[100];}if(global_const_t){delete data;}else{delete [] data;}}
void goodB2G2(){long long * data;data=NULL;if(global_t){data=new long long;}else{data=new long long[100];}if(global_t){delete data;}else{delete [] data;}}
void goodB2G1(){long long * data;data=NULL;if(global_five==5){data=new long long;}else{data=new long long[100];}if(global_five!=5){delete [] data;}else{delete data;}}
void goodG2B2(){twoints * data;data=NULL;if(static_const_t){data=new twoints[100];}else{data=new twoints;}if(static_const_t){delete [] data;}else{delete data;}}
void goodB2G1(){wchar_t * data;data=NULL;if(5==5){data=new wchar_t;}else{data=new wchar_t[100];}if(5!=5){delete [] data;}else{delete data;}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_const_t){data=new wchar_t;}else{data=new wchar_t[100];}if(global_const_t){delete data;}else{delete [] data;}}
void goodB2G(){wchar_t * data;data=NULL;data=goodB2G_source(data);delete data;}
void goodB2G(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=new wchar_t;data_array[2]=data;goodB2G_sink(data_array);}
void goodB2G2(){char * data;data=NULL;if(5==5){data=new char;}else{data=(char *)malloc(100*sizeof(char));}if(5==5){delete data;}else{free(data);}}
void goodG2B1(){char * data;data=NULL;if(global_five!=5){data=new char;}else{data=(char *)malloc(100*sizeof(char));}if(global_five==5){free(data);}else{delete data;}}
void goodB2G1(){char * data;data=NULL;switch(6){case 6:data=new char;break;default:data=(char *)malloc(100*sizeof(char));break;}switch(8){case 7:free(data);break;default:delete data;break;}}
void goodB2G(){char * data;data=NULL;data=new char;delete data;return;free(data);}
void goodG2B(){char * data;char * *data_ptr1=&data;char * *data_ptr2=&data;data=NULL;{char * data=*data_ptr1;data=(char *)malloc(100*sizeof(char));*data_ptr1=data;}{char * data=*data_ptr2;free(data);}}
void goodG2B(){char * data;struct_type my_struct;data=NULL;data=(char *)malloc(100*sizeof(char));my_struct.a=data;goodG2B_sink(my_struct);}
void goodB2G1(){twointsclass * data;data=NULL;if(static_const_t){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(static_const_f){free(data);}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_const_f){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(static_const_t){free(data);}else{delete data;}}
void goodG2B1(){twointsclass * data;data=NULL;if(static_returns_f()){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(static_returns_t()){free(data);}else{delete data;}}
void goodB2G2(){twointsclass * data;data=NULL;if(global_const_t){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_const_t){delete data;}else{free(data);}}
void goodB2G1(){twointsclass * data;data=NULL;if(global_five==5){data=new twointsclass;}else{data=(twointsclass *)malloc(100*sizeof(twointsclass));}if(global_five!=5){free(data);}else{delete data;}}
void goodB2G(){twointsclass * data;data=NULL;goto source;data=(twointsclass *)malloc(100*sizeof(twointsclass));source:data=new twointsclass;goto sink;free(data);sink:delete data;}
void goodB2G(){twointsclass * data;twointsclass * &data_ref=data;data=NULL;data=new twointsclass;{twointsclass * data=data_ref;delete data;}}
void goodB2G(){twointsclass * data;void(*func_ptr)(twointsclass *)=goodB2G_sink;data=NULL;data=new twointsclass;func_ptr(data);}
void goodB2G2(){int * data;data=NULL;if(static_five==5){data=new int;}else{data=(int *)malloc(100*sizeof(int));}if(static_five==5){delete data;}else{free(data);}}
void goodG2B1(){int * data;data=NULL;if(global_f){data=new int;}else{data=(int *)malloc(100*sizeof(int));}if(global_t){free(data);}else{delete data;}}
void goodG2B1(){int * data;data=NULL;if(global_returns_f()){data=new int;}else{data=(int *)malloc(100*sizeof(int));}if(global_returns_t()){free(data);}else{delete data;}}
void goodB2G1(){int * data;data=NULL;if(global_five==5){data=new int;}else{data=(int *)malloc(100*sizeof(int));}if(global_five!=5){free(data);}else{delete data;}}
void goodB2G(){int * data;int * data_array[5];data=NULL;data=new int;data_array[2]=data;goodB2G_sink(data_array);}
void goodG2B1(){long long * data;data=NULL;if(0){data=new long long;}else{data=(long long *)malloc(100*sizeof(long long));}if(1){free(data);}else{delete data;}}
void goodG2B2(){long long * data;data=NULL;if(global_returns_t()){data=(long long *)malloc(100*sizeof(long long));}else{data=new long long;}if(global_returns_t()){free(data);}else{delete data;}}
void goodG2B2(){long long * data;data=NULL;if(global_five==5){data=(long long *)malloc(100*sizeof(long long));}else{data=new long long;}if(global_five==5){free(data);}else{delete data;}}
void goodG2B(){long long * data;struct_type my_struct;data=NULL;data=(long long *)malloc(100*sizeof(long long));my_struct.a=data;goodG2B_sink(my_struct);}
void goodB2G(){long long * data;data=NULL;data=new long long;goodB2G_data=data;goodB2G_sink();}
void goodB2G2(){twoints * data;data=NULL;if(static_returns_t()){data=new twoints;}else{data=(twoints *)malloc(100*sizeof(twoints));}if(static_returns_t()){delete data;}else{free(data);}}
void goodG2B2(){twoints * data;data=NULL;if(global_t){data=(twoints *)malloc(100*sizeof(twoints));}else{data=new twoints;}if(global_t){free(data);}else{delete data;}}
void goodB2G2(){twoints * data;data=NULL;if(global_const_five==5){data=new twoints;}else{data=(twoints *)malloc(100*sizeof(twoints));}if(global_const_five==5){delete data;}else{free(data);}}
void goodB2G(){twoints * data;data=NULL;data=goodB2G_source(data);delete data;}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodG2B_sink(data);}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodG2B_sink(&data);}
void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodG2B_sink(&data);}
void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));free(data);}
void goodG2B1(){wchar_t * data;data=NULL;if(static_const_f){data=new wchar_t;}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(static_const_t){free(data);}else{delete data;}}
void goodB2G1(){wchar_t * data;data=NULL;if(static_five==5){data=new wchar_t;}else{data=(wchar_t *)malloc(100*sizeof(wchar_t));}if(static_five!=5){free(data);}else{delete data;}}
void goodB2G1(){wchar_t * data;data=NULL;switch(6){case 6:data=new wchar_t;break;default:data=(wchar_t *)malloc(100*sizeof(wchar_t));break;}switch(8){case 7:free(data);break;default:delete data;break;}}
void goodG2B(){wchar_t * data;wchar_t * &data_ref=data;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));{wchar_t * data=data_ref;free(data);}}
void goodG2B(){wchar_t * data;data=NULL;data=goodG2B_source(data);free(data);}
void goodB2G2(){char * data;data=NULL;if(1){{char mystring[]="mystring";data=strdup(mystring);}}else{data=new char[100];}if(1){free(data);}else{delete [] data;}}
void goodB2G1(){char * data;data=NULL;if(global_five==5){{char mystring[]="mystring";data=strdup(mystring);}}else{data=new char[100];}if(global_five!=5){delete [] data;}else{free(data);}}
void goodB2G(){char * data;data=NULL;data=goodB2G_source(data);free(data);}
void goodB2G(){char * data;data=NULL;{char mystring[]="mystring";data=strdup(mystring);}goodB2G_sink(&data);}
void goodB2G(){char * data;data=NULL;{char mystring[]="mystring";data=strdup(mystring);}goodB2G_sink(&data);}
void goodB2G1(){wchar_t * data;data=NULL;if(static_t){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t[100];}if(static_f){delete [] data;}else{free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(static_t){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t[100];}if(static_t){free(data);}else{delete [] data;}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_const_five!=5){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t[100];}if(global_const_five==5){delete [] data;}else{free(data);}}
void goodG2B(){int h,i,j,k;wchar_t * data;data=NULL;for(h=0; h < 1; h++){data=new wchar_t[100];}for(i=0; i < 0; i++){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}for(j=0; j < 1; j++){delete [] data;}for(k=0; k < 0; k++){free(data);}}
void goodB2G(){int h,i,j,k;char * data;data=NULL;for(h=0; h < 0; h++){data=new char;}for(i=0; i < 1; i++){{char mystring[]="mystring";data=strdup(mystring);}}for(j=0; j < 0; j++){delete data;}for(k=0; k < 1; k++){free(data);}}
void goodB2G(){char * data;char * &data_ref=data;data=NULL;{char mystring[]="mystring";data=strdup(mystring);}{char * data=data_ref;free(data);}}
void goodB2G(){char * data;union_type my_union;data=NULL;{char mystring[]="mystring";data=strdup(mystring);}my_union.a=data;{char * data=my_union.b;free(data);}}
void goodG2B(){char * data;data=NULL;data=new char;goodG2B_sink_b(data);}
void goodG2B1(){wchar_t * data;data=NULL;if(static_f){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t;}if(static_t){delete data;}else{free(data);}}
void goodG2B1(){wchar_t * data;data=NULL;if(global_f){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t;}if(global_t){delete data;}else{free(data);}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_returns_t()){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t;}if(global_returns_t()){free(data);}else{delete data;}}
void goodB2G2(){wchar_t * data;data=NULL;if(global_five==5){{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}}else{data=new wchar_t;}if(global_five==5){free(data);}else{delete data;}}
void goodB2G(){wchar_t * data;wchar_t * &data_ref=data;data=NULL;{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);}{wchar_t * data=data_ref;free(data);}}
void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=new wchar_t;data_array[2]=data;goodG2B_sink(data_array);}
void goodG2B(){int data;data=-1;goodG2B_source(data);{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}
void goodB2G(){int data;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}goodB2G_data=data;goodB2G_sink();}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink_b(data);}
void goodB2G(){int data;void(*func_ptr)(int)=goodB2G_sink;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}func_ptr(data);}
void goodB2G1(){int data;data=-1;if(5==5){data=10000;}else{data=20;}if(5!=5){{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}else{{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G2(){int data;data=-1;if(global_const_five==5){data=10000;}else{data=20;}if(global_const_five==5){{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}else{{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}}
void goodB2G(){int data;data=-1;data=10000;{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}return;{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}
void goodB2G1(){int data;data=-1;if(1){fscanf(stdin,"%d",&data);}else{data=20;}if(0){{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}else{{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G(){int data;data=-1;fscanf(stdin,"%d",&data);goodB2G_sink_b(data);}
void goodB2G(){int data;data=-1;fscanf(stdin,"%d",&data);goodB2G_data=data;goodB2G_sink();}
void goodB2G(){int data;data=-1;data=RAND32();{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}
void goodB2G(){int data;data=-1;data=goodB2G_source(data);{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink_b(data);}
void goodB2G(){int data;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}goodB2G_data=data;goodB2G_sink();}
void goodB2G(){int data;data=-1;goodB2G_source(data);{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink(&data);}
void goodG2B2(){int data;data=-1;if(1){data=20;}else{data=10000;}if(1){{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than 0");}}}else{{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodG2B2(){int data;data=-1;if(global_t){data=20;}else{data=10000;}if(global_t){{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than 0");}}}else{{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodG2B2(){int data;data=-1;if(global_five==5){data=20;}else{data=10000;}if(global_five==5){{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than 0");}}}else{{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodG2B(){int data;data=-1;data=20;goodG2B_sink_b(data);}
void goodB2G(){int data;data=-1;data=goodB2G_source(data);{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}
void goodG2B(){int data;struct_type my_struct;data=-1;data=20;my_struct.a=data;goodG2B_sink(my_struct);}
void goodG2B1(){int data;data=-1;if(static_const_f){data=RAND32();}else{data=20;}if(static_const_t){{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than 0");}}}else{{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}}
void goodB2G2(){int data;data=-1;if(global_t){data=RAND32();}else{data=20;}if(global_t){{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}else{{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than 0");}}}}
void goodB2G(){int data;data=-1;data=goodB2G_source(data);{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}
typedef struct _CWE114_Process_Control__w32_wchar_t_relativePath_67_struct_type{wchar_t * a;} CWE114_Process_Control__w32_wchar_t_relativePath_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"C:\\Windows\\System32\\winsrv.dll");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);}}void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; goodG2B_sink(&data);}
typedef struct _CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_memmove_67_struct_type{char * a;} CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_memmove_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; my_struct.a=data;goodG2B_sink(my_struct);}
extern char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_ncpy_68_bad_data;extern char * CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_ncpy_68_goodG2B_data;void bad_sink(){char * data=CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_ncpy_68_bad_data;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0'; printLine(data);}}void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; goodG2B_data=data;goodG2B_sink();}
typedef struct _CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_snprintf_67_struct_type{char * a;} CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_snprintf_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));data=data_goodbuf;data[0]='\0'; my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}void goodG2B(){char * data;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; goodG2B_sink(&data);}
extern char * CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_snprintf_68_bad_data;extern char * CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_snprintf_68_goodG2B_data;void bad_sink(){char * data=CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_snprintf_68_bad_data;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);}}void goodG2B(){char * data;char data_badbuf[50];char data_goodbuf[100];data=data_goodbuf;data[0]='\0'; goodG2B_data=data;goodG2B_sink();}
void bad_sink(int * data_array[]){int * data=data_array[2];{int src[100]={0}; {size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printIntLine(data[0]);}}}void goodG2B(){int * data;int * data_array[5];int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));data=data_goodbuf;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(int * data){{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);}}void goodG2B(){int * data;int * data_badbuf=(int *)ALLOCA(50*sizeof(int));int * data_goodbuf=(int *)ALLOCA(100*sizeof(int));data=data_goodbuf;goodG2B_sink(data);}
void bad_sink(long long * data_array[]){long long * data=data_array[2];{long long src[100]={0}; memcpy(data,src,100*sizeof(long long));printLongLongLine(data[0]);}}void goodG2B(){long long * data;long long * data_array[5];long long * data_badbuf=(long long *)ALLOCA(50*sizeof(long long));long long * data_goodbuf=(long long *)ALLOCA(100*sizeof(long long));data=data_goodbuf;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){twoints * * data_ptr=(twoints * *)void_data_ptr;twoints * data=(*data_ptr);{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printStructLine(&data[0]);}}}void goodG2B(){twoints * data;twoints data_badbuf[50];twoints data_goodbuf[100];data=data_goodbuf;goodG2B_sink(&data);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_goodbuf;data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t * data_badbuf=(wchar_t *)ALLOCA(50*sizeof(wchar_t));wchar_t * data_goodbuf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_goodbuf;data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscat(data,src);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data){{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; goodG2B_sink(data);}
extern wchar_t * CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_memmove_68_bad_data;extern wchar_t * CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_memmove_68_goodG2B_data;void bad_sink(){wchar_t * data=CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_memmove_68_bad_data;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; goodG2B_data=data;goodG2B_sink();}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncat(data,src,100);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; goodG2B_sink(&data);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_badbuf[50];wchar_t data_goodbuf[100];data=data_goodbuf;data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(char * data_array[]){char * data=data_array[2];{char dest[50]="";strcat(dest,data);printLine(data);}}void goodG2B(){char * data;char * data_array[5];char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[50]="";_snprintf(dest,strlen(data),"%s",data);printLine(data);}}void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}void goodG2B(){char * data;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink(&data);}
void bad_sink(char * data){{char dest[50]="";strncat(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100];data=data_buf;memset(data,'A',50-1); data[50-1]='\0'; func_ptr(data);}
void bad_sink(wchar_t * data){{wchar_t dest[50]=L"";wcscpy(dest,data);printWLine(data);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; func_ptr(data);}
typedef struct _CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_67_struct_type{wchar_t * a;} CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data){{wchar_t dest[50]=L"";memcpy(dest,data,wcslen(data)*sizeof(wchar_t));dest[50-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(&data);}
extern wchar_t * CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_snprintf_68_bad_data;extern wchar_t * CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_snprintf_68_goodG2B_data;void bad_sink(){wchar_t * data=CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_snprintf_68_bad_data;{wchar_t dest[50]=L"";_snwprintf(dest,wcslen(data),L"%s",data);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_data=data;goodG2B_sink();}
void bad_sink(char * data){{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0'; printLine(data);free(data);}}void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; goodG2B_sink(data);}
void bad_sink(char * data){{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0'; printLine(data);free(data);}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=(char *)malloc(100*sizeof(char));data[0]='\0'; func_ptr(data);}
void bad_sink(twoints * * data_ptr){twoints * data=*data_ptr;{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}{size_t i;for(i=0; i < 100; i++){data[i]=src[i];}printStructLine(&data[0]);free(data);}}}void goodG2B(){twoints * data;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));goodG2B_sink(&data);}
void bad_sink(twoints * data){{twoints src[100];{size_t i;for(i=0; i < 100; i++){src[i].a=0;src[i].b=0;}}memcpy(data,src,100*sizeof(twoints));printStructLine(&data[0]);free(data);}}void goodG2B(){twoints * data;void(*func_ptr)(twoints *)=goodG2B_sink;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));func_ptr(data);}
typedef struct _CWE122_Heap_Based_Buffer_Overflow__c_dest_struct_memmove_67_struct_type{twoints * a;} CWE122_Heap_Based_Buffer_Overflow__c_dest_struct_memmove_67_struct_type;void goodG2B(){twoints * data;struct_type my_struct;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);free(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcsncpy(data,src,100);data[100-1]=L'\0'; printWLine(data);free(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(char * data_array[]){char * data=data_array[2];{char dest[50]="";strcat(dest,data);printLine(data);free(data);}}void goodG2B(){char * data;char * data_array[5];data=(char *)malloc(100*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);free(data);}}void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; goodG2B_sink(&data);}
extern char * CWE122_Heap_Based_Buffer_Overflow__c_src_char_ncpy_68_bad_data;extern char * CWE122_Heap_Based_Buffer_Overflow__c_src_char_ncpy_68_goodG2B_data;void bad_sink(){char * data=CWE122_Heap_Based_Buffer_Overflow__c_src_char_ncpy_68_bad_data;{char dest[50]="";strncpy(dest,data,strlen(data));dest[50-1]='\0'; printLine(data);free(data);}}void goodG2B(){char * data;data=(char *)malloc(100*sizeof(char));memset(data,'A',50-1); data[50-1]='\0'; goodG2B_data=data;goodG2B_sink();}
void bad_sink(wchar_t * data){{wchar_t dest[50]=L"";wcsncat(dest,data,wcslen(data));dest[50-1]=L'\0'; printWLine(data);free(data);}}void goodG2B(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memmove(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;goodG2B_sink(&data);}
char * bad_source(char * data){{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf-8;}return data;}void goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{size_t i;char src[100];memset(src,'C',100-1); src[100-1]='\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]='\0';printLine(data);}}
void bad_sink(char * data){{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strncpy(data,src,100);data[100-1]='\0';printLine(data);}}void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{size_t i;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; for(i=0; i < 100; i++){data[i]=src[i];}data[100-1]=L'\0';printWLine(data);}}void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0';printWLine(data);}}void goodG2B(){wchar_t * data;data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}goodG2B_sink(&data);}
extern wchar_t * CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_68_bad_data;extern wchar_t * CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_68_goodG2B_data;void bad_sink(){wchar_t * data=CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_68_bad_data;{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;goodG2B_data=data;goodG2B_sink();}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[100];memset(dest,'C',100-1);dest[100-1]='\0'; memcpy(dest,data,strlen(dest)*sizeof(char));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;char * data_badbuf=(char *)ALLOCA(50*sizeof(char));char * data_goodbuf=(char *)ALLOCA(100*sizeof(char));memset(data_badbuf,'A',50-1); data_badbuf[50-1]='\0'; memset(data_goodbuf,'A',100-1); data_goodbuf[100-1]='\0'; data=data_goodbuf;goodG2B_sink(&data);}
typedef struct _CWE126_Buffer_Overread__malloc_char_memmove_67_struct_type{char * a;} CWE126_Buffer_Overread__malloc_char_memmove_67_struct_type;void goodG2B(){char * data;struct_type my_struct;data=NULL;data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1); data[100-1]='\0'; my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE126_Buffer_Overread__wchar_t_declare_memmove_67_struct_type{wchar_t * a;} CWE126_Buffer_Overread__wchar_t_declare_memmove_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_badbuf[50];wchar_t data_goodbuf[100];wmemset(data_badbuf,L'A',50-1); data_badbuf[50-1]=L'\0'; wmemset(data_goodbuf,L'A',100-1); data_goodbuf[100-1]=L'\0'; data=data_goodbuf;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strcpy(dest,data);printLine(dest);}}void goodG2B(){char * data;char * data_buf=(char *)ALLOCA(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;goodG2B_sink(&data);}
void bad_sink(char * data_array[]){char * data=data_array[2];{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;char * data_array[5];char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;data_array[2]=data;goodG2B_sink(data_array);}
typedef struct _CWE127_Buffer_Underread__char_declare_memcpy_67_struct_type{char * a;} CWE127_Buffer_Underread__char_declare_memcpy_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;my_struct.a=data;goodG2B_sink(my_struct);}
extern char * CWE127_Buffer_Underread__char_declare_ncpy_68_bad_data;extern char * CWE127_Buffer_Underread__char_declare_ncpy_68_goodG2B_data;void bad_sink(){char * data=CWE127_Buffer_Underread__char_declare_ncpy_68_bad_data;{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; strncpy(dest,data,strlen(dest));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;char data_buf[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;goodG2B_data=data;goodG2B_sink();}
void bad_sink(char * * data_ptr){char * data=*data_ptr;{size_t i;char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(&data);}
void bad_sink(char * data){{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memcpy(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}func_ptr(data);}
typedef struct _CWE127_Buffer_Underread__malloc_char_memcpy_67_struct_type{char * a;} CWE127_Buffer_Underread__malloc_char_memcpy_67_struct_type;void goodG2B(){char * data;struct_type my_struct;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * data){{char dest[100];memset(dest,'C',100-1); dest[100-1]='\0'; memmove(dest,data,100*sizeof(char));dest[100-1]='\0';printLine(dest);}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}func_ptr(data);}
typedef struct _CWE127_Buffer_Underread__malloc_char_ncpy_67_struct_type{char * a;} CWE127_Buffer_Underread__malloc_char_ncpy_67_struct_type;void goodG2B(){char * data;struct_type my_struct;data=NULL;{char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;{wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data){{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
void bad_sink(wchar_t * data){{size_t i;wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; for(i=0; i < 100; i++){dest[i]=data[i];}dest[100-1]=L'\0';printWLine(dest);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t * data_buf=(wchar_t *)ALLOCA(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;goodG2B_sink(&data);}
void bad_sink(wchar_t * data){{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcscpy(dest,data);printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;goodG2B_sink(data);}
void bad_sink(wchar_t * data){{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
typedef struct _CWE127_Buffer_Underread__wchar_t_declare_memcpy_67_struct_type{wchar_t * a;} CWE127_Buffer_Underread__wchar_t_declare_memcpy_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data){{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; wcsncpy(dest,data,wcslen(dest));dest[100-1]=L'\0';printWLine(dest);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;func_ptr(data);}
int bad_source(int data){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}return data;}void goodB2G(){int data;data=-1; data=goodB2G_source(data);{char data_buf[10]="AAAAAAAAA";if(data >= 0&&data <(10-1))  {printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodG2B(){int data;data=-1; data=7;goodG2B_sink(&data);}
typedef struct _CWE129_Improper_Validation_Of_Array_Index__fgets_char_67_struct_type{int a;} CWE129_Improper_Validation_Of_Array_Index__fgets_char_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1; data=7;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(int * data_ptr){int data=*data_ptr;{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodG2B(){int data;data=-1; data=7;goodG2B_sink(&data);}
int bad_source(int data){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}return data;}void goodG2B(){int data;data=-1; data=goodG2B_source(data);{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}
int bad_source(int data){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}return data;}void goodB2G(){int data;data=-1; data=goodB2G_source(data);{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0&&data <(10-1))  {printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is out-of-bounds");}}}
typedef struct _CWE129_Improper_Validation_Of_Array_Index__fgets_wchar_t_67_struct_type{int a;} CWE129_Improper_Validation_Of_Array_Index__fgets_wchar_t_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1; data=7;my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE129_Improper_Validation_Of_Array_Index__large_char_67_struct_type{int a;} CWE129_Improper_Validation_Of_Array_Index__large_char_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1; data=7;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(int * data_ptr){int data=*data_ptr;{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodG2B(){int data;data=-1; data=7;goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{int data_buf[10]={0,1,2,3,4,5,6,7,8,9};if(data >= 0){printIntLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodG2B(){int data;data=-1; data=7;goodG2B_sink(&data);}
void bad_sink(int data){{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodB2G(){int data;data=-1; data=10;goodB2G_sink(data);}
void bad_sink(int data){{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodB2G(){int data;data=-1; data=RAND32();goodB2G_sink(data);}
extern int CWE129_Improper_Validation_Of_Array_Index__rand_char_68_bad_data;extern int CWE129_Improper_Validation_Of_Array_Index__rand_char_68_goodG2B_data;extern int CWE129_Improper_Validation_Of_Array_Index__rand_char_68_goodB2G_data;void bad_sink(){int data=CWE129_Improper_Validation_Of_Array_Index__rand_char_68_bad_data;{char data_buf[10]="AAAAAAAAA";if(data >= 0){printHexCharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodG2B(){int data;data=-1; data=7;goodG2B_data=data;goodG2B_sink();}
void bad_sink(int data_array[]){int data=data_array[2];{wchar_t data_buf[10]=L"AAAAAAAAA";if(data >= 0){printWcharLine(data_buf[data]);}else{printLine("ERROR: Array index is negative");}}}void goodB2G(){int data;int data_array[5];data=-1; data=RAND32();data_array[2]=data;goodB2G_sink(data_array);}
typedef struct _CWE131_Incorrect_Calculation_Of_Buffer_Size__char_cpy_67_struct_type{char * a;} CWE131_Incorrect_Calculation_Of_Buffer_Size__char_cpy_67_struct_type;void goodG2B(){char * data;struct_type my_struct;data=NULL;data=(char *)malloc((10+1)*sizeof(char));my_struct.a=data;goodG2B_sink(my_struct);}
extern char * CWE131_Incorrect_Calculation_Of_Buffer_Size__char_loop_68_bad_data;extern char * CWE131_Incorrect_Calculation_Of_Buffer_Size__char_loop_68_goodG2B_data;void bad_sink(){char * data=CWE131_Incorrect_Calculation_Of_Buffer_Size__char_loop_68_bad_data;{char data_src[10+1]=SRC_STRING;size_t i,src_len;src_len=strlen(data_src);for(i=0; i < src_len; i++){data[i]=data_src[i];}data[strlen(data_src)]='\0'; printLine(data);free(data);}}void goodG2B(){char * data;data=NULL;data=(char *)malloc((10+1)*sizeof(char));goodG2B_data=data;goodG2B_sink();}
void bad_sink(int * data){{int data_src[10]={0};size_t i;for(i=0; i < 10; i++){data[i]=data_src[i];}printIntLine(data[0]);free(data);}}void goodG2B(){int * data;data=NULL;data=(int *)malloc(10*sizeof(int));goodG2B_sink(data);}
extern int * CWE131_Incorrect_Calculation_Of_Buffer_Size__memcpy_68_bad_data;extern int * CWE131_Incorrect_Calculation_Of_Buffer_Size__memcpy_68_goodG2B_data;void bad_sink(){int * data=CWE131_Incorrect_Calculation_Of_Buffer_Size__memcpy_68_bad_data;{int data_src[10]={0};memcpy(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}void goodG2B(){int * data;data=NULL;data=(int *)malloc(10*sizeof(int));goodG2B_data=data;goodG2B_sink();}
void bad_sink(int * data_array[]){int * data=data_array[2];{int data_src[10]={0};memmove(data,data_src,10*sizeof(int));printIntLine(data[0]);free(data);}}void goodG2B(){int * data;int * data_array[5];data=NULL;data=(int *)malloc(10*sizeof(int));data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{wchar_t data_src[10+1]=SRC_STRING;size_t i,src_len;src_len=wcslen(data_src);for(i=0; i < src_len; i++){data[i]=data_src[i];}data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}void goodG2B(){wchar_t * data;data=NULL;data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));goodG2B_sink(&data);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t data_src[10+1]=SRC_STRING;memcpy(data,data_src,wcslen(data_src)*sizeof(wchar_t));data[wcslen(data_src)]=L'\0'; printWLine(data);free(data);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=(wchar_t *)malloc((10+1)*sizeof(wchar_t));data_array[2]=data;goodG2B_sink(data_array);}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);fprintf(stdout,"%s\n",data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;printf(data);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
extern char * CWE134_Uncontrolled_Format_String__char_Environment_printf_68_bad_data;extern char * CWE134_Uncontrolled_Format_String__char_Environment_printf_68_goodG2B_data;extern char * CWE134_Uncontrolled_Format_String__char_Environment_printf_68_goodB2G_data;void bad_sink(){char * data=CWE134_Uncontrolled_Format_String__char_Environment_printf_68_bad_data;printf(data);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);{char dest[100]="";SNPRINTF(dest,100-1,"%s",data);printLine(dest);}}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);goodG2B_vasink(data,data);}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);goodB2G_vasink(data,data);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vfprintf(stdout,data,args);va_end(args);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vfprintf(stdout,data,args);va_end(args);}}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(&data);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vprintf(data,args);va_end(args);}}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(data);}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;data=goodB2G_source(data);goodB2G_vasink(data,data);}
void bad_vasink(char * data,...){{va_list args;va_start(args,data);vprintf(data,args);va_end(args);}}void goodB2G(){char * data;void(*func_ptr)(char *,...)=goodB2G_vasink;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}func_ptr(data);}
static void bad_vasink(char * data,...){{char dest[100]="";va_list args;va_start(args,data);vsnprintf(dest,100-1,data,args);va_end(args);printLine(dest);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
char * bad_source(char * data){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);printf(data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}goodB2G_sink(&data);}
void bad_sink(char * data_array[]){char * data=data_array[2];{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
void bad_vasink(char * data,...){{va_list args;va_start(args,data);vfprintf(stdout,data,args);va_end(args);}}void goodG2B(){char * data;void(*func_ptr)(char *,...)=goodG2B_vasink;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");func_ptr(data);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vfprintf(stdout,data,args);va_end(args);}}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
typedef struct _CWE134_Uncontrolled_Format_String__char_fromConsole_vfprintf_67_struct_type{char * a;} CWE134_Uncontrolled_Format_String__char_fromConsole_vfprintf_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");my_struct.a=data;goodG2B_sink(my_struct);}
static void bad_vasink(char * data,...){{char dest[100]="";va_list args;va_start(args,data);vsnprintf(dest,100-1,data,args);va_end(args);printLine(dest);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;fprintf(stdout,data);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);fprintf(stdout,data);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(&data);}
void bad_sink(char * data_array[]){char * data=data_array[2];{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
extern char * CWE134_Uncontrolled_Format_String__char_fromFile_snprintf_68_bad_data;extern char * CWE134_Uncontrolled_Format_String__char_fromFile_snprintf_68_goodG2B_data;extern char * CWE134_Uncontrolled_Format_String__char_fromFile_snprintf_68_goodB2G_data;void bad_sink(){char * data=CWE134_Uncontrolled_Format_String__char_fromFile_snprintf_68_bad_data;{char dest[100]="";SNPRINTF(dest,100-1,data);printLine(dest);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
typedef struct _CWE134_Uncontrolled_Format_String__char_fromFile_vfprintf_67_struct_type{char * a;} CWE134_Uncontrolled_Format_String__char_fromFile_vfprintf_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");my_struct.a=data;goodG2B_sink(my_struct);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vprintf(data,args);va_end(args);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");goodG2B_sink(data);}
static void bad_vasink(char * data,...){{va_list args;va_start(args,data);vprintf(data,args);va_end(args);}}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;strcpy(data,"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
static void bad_vasink(char * data,...){{char dest[100]="";va_list args;va_start(args,data);vsnprintf(dest,100-1,data,args);va_end(args);printLine(dest);}}void goodB2G(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}data_array[2]=data;goodB2G_sink(data_array);}
void bad_sink(wchar_t * data){wprintf(data);}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(data);}
typedef struct _CWE134_Uncontrolled_Format_String__wchar_t_Environment_printf_67_struct_type{wchar_t * a;} CWE134_Uncontrolled_Format_String__wchar_t_Environment_printf_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");my_struct.a=data;goodG2B_sink(my_struct);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vfwprintf(stdout,data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_sink(&data);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vfwprintf(stdout,data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vwprintf(data,args);va_end(args);}}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(&data);}
void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vwprintf(data,args);va_end(args);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *,...)=goodG2B_vasink;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");func_ptr(data);}
static void bad_vasink(wchar_t * data,...){{wchar_t dest[100]=L"";va_list args;va_start(args,data);_vsnwprintf(dest,100-1,data,args);va_end(args);printWLine(dest);}}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}goodB2G_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;fwprintf(stdout,data);}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);wprintf(data);}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}goodB2G_sink(&data);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vfwprintf(stdout,data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_sink(data);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vwprintf(data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vprintf_68_bad_data;extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vprintf_68_goodG2B_data;extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vprintf_68_goodB2G_data;static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vwprintf(data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
static void bad_vasink(wchar_t * data,...){{wchar_t dest[100]=L"";va_list args;va_start(args,data);_vsnwprintf(dest,100-1,data,args);va_end(args);printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_sink(data);}
extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vsnprintf_68_bad_data;extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vsnprintf_68_goodG2B_data;extern wchar_t * CWE134_Uncontrolled_Format_String__wchar_t_fromConsole_vsnprintf_68_goodB2G_data;static void bad_vasink(wchar_t * data,...){{wchar_t dest[100]=L"";va_list args;va_start(args,data);_vsnwprintf(dest,100-1,data,args);va_end(args);printWLine(dest);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");goodG2B_data=data;goodG2B_sink();}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodB2G_source(data);fwprintf(stdout,L"%s\n",data);}
void bad_sink(wchar_t * data){{wchar_t dest[100]=L"";SNPRINTF(dest,100-1,data);printWLine(dest);}}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}goodB2G_sink(data);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);goodG2B_vasink(data,data);}
static void bad_vasink(wchar_t * data,...){{va_list args;va_start(args,data);vwprintf(data,args);va_end(args);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");data_array[2]=data;goodG2B_sink(data_array);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);goodG2B_vasink(data,data);}
typedef struct _CWE134_Uncontrolled_Format_String__wchar_t_fromFile_vsnprintf_67_struct_type{wchar_t * a;} CWE134_Uncontrolled_Format_String__wchar_t_fromFile_vsnprintf_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"fixedstringtest");my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE187_Partial_Comparison__char_Environment_ncmp_correct_pw_67_struct_type{char * a;} CWE187_Partial_Comparison__char_Environment_ncmp_correct_pw_67_struct_type;void goodB2G(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}my_struct.a=data;goodB2G_sink(my_struct);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
char * bad_source(char * data){{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(char * data){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}goodB2G_sink(data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(char * data){if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;data=PASSWORD;func_ptr(data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(char * data_array[]){char * data=data_array[2];if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;data=PASSWORD;data_array[2]=data;goodG2B_sink(data_array);}
typedef struct _CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_67_struct_type{char * a;} CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;data=PASSWORD;my_struct.a=data;goodG2B_sink(my_struct);}
extern char * CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_68_bad_data;extern char * CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_68_goodG2B_data;extern char * CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_68_goodB2G_data;void bad_sink(){char * data=CWE187_Partial_Comparison__char_fromFile_ncmp_correct_pw_68_bad_data;if(strncmp(PASSWORD,data,strlen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_data=data;goodG2B_sink();}
void bad_sink(char * data){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;data=PASSWORD;func_ptr(data);}
void bad_sink(char * data){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;data=PASSWORD;func_ptr(data);}
void bad_sink(char * data_array[]){char * data=data_array[2];if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char * data_array[5];char data_buf[100]="";data=data_buf;data=PASSWORD;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(char * data){if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}void goodB2G(){char * data;char data_buf[100]="";data=data_buf;{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}goodB2G_sink(data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(char * data){if(strncmp(PASSWORD,data,strlen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;char data_buf[100]="";data=data_buf;data="P";func_ptr(data);}
char * bad_source(char * data){data="P";return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);if(strstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
typedef struct _CWE187_Partial_Comparison__char_substring_str_67_struct_type{char * a;} CWE187_Partial_Comparison__char_substring_str_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;data=PASSWORD;my_struct.a=data;goodG2B_sink(my_struct);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}return data;}void goodB2G(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodB2G_source(data);if(wcscmp(PASSWORD,data)==0)printLine("Access granted");elseprintLine("Access denied!");}
void bad_sink(wchar_t * data){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(data);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}void goodB2G(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);wchar_t * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){wcsncat(data+data_len,environment,100-data_len-1);}}data_array[2]=data;goodB2G_sink(data_array);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);if(wcsstr(PASSWORD,data)!=NULL)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
typedef struct _CWE187_Partial_Comparison__wchar_t_fromConsole_str_67_struct_type{wchar_t * a;} CWE187_Partial_Comparison__wchar_t_fromConsole_str_67_struct_type;void goodB2G(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}my_struct.a=data;goodB2G_sink(my_struct);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);if(wcsncmp(PASSWORD,data,wcslen(PASSWORD))==0)printLine("Access granted");elseprintLine("Access denied!");}
void bad_sink(wchar_t * data){if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(data);}
wchar_t * bad_source(wchar_t * data){{size_t data_len=wcslen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN(L"C:\\temp\\file.txt",L"r");if(pFile!=NULL){fgetws(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=goodG2B_source(data);if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}
typedef struct _CWE187_Partial_Comparison__wchar_t_substring_ncmp_correct_pw_67_struct_type{wchar_t * a;} CWE187_Partial_Comparison__wchar_t_substring_ncmp_correct_pw_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_sink(&data);}
typedef struct _CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_67_struct_type{wchar_t * a;} CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;my_struct.a=data;goodG2B_sink(my_struct);}
extern wchar_t * CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_68_bad_data;extern wchar_t * CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_68_goodG2B_data;extern wchar_t * CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_68_goodB2G_data;void bad_sink(){wchar_t * data=CWE187_Partial_Comparison__wchar_t_substring_ncmp_user_pw_68_bad_data;if(wcsncmp(PASSWORD,data,wcslen(data))==0)printLine("Access granted");elseprintLine("Access denied!");}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;goodG2B_data=data;goodG2B_sink();}
typedef struct _CWE187_Partial_Comparison__wchar_t_substring_str_67_struct_type{wchar_t * a;} CWE187_Partial_Comparison__wchar_t_substring_str_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;data=PASSWORD;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char data){{char result=data+1;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_sink(data);}
char bad_source(char data){data=CHAR_MAX;return data;}void goodG2B(){char data;data=' ';data=goodG2B_source(data);{char result=data+1;printHexCharLine(result);}}
typedef struct _CWE190_Integer_Overflow__char_fixed_add_67_struct_type{char a;} CWE190_Integer_Overflow__char_fixed_add_67_struct_type;void goodB2G(){char data;struct_type my_struct;data=' ';data=CHAR_MAX;my_struct.a=data;goodB2G_sink(my_struct);}
typedef struct _CWE190_Integer_Overflow__char_fixed_multiply_67_struct_type{char a;} CWE190_Integer_Overflow__char_fixed_multiply_67_struct_type;void goodB2G(){char data;struct_type my_struct;data=' ';data=CHAR_MAX;my_struct.a=data;goodB2G_sink(my_struct);}
void bad_sink(void * void_data_ptr){char * data_ptr=(char *)void_data_ptr;char data=(*data_ptr);{char result=data * data;printHexCharLine(result);}}void goodB2G(){char data;data=' ';data=CHAR_MAX;goodB2G_sink(&data);}
void bad_sink(char data){{char result=data * data;printHexCharLine(result);}}void goodB2G(){char data;void(*func_ptr)(char)=goodB2G_sink;data=' ';data=CHAR_MAX;func_ptr(data);}
extern char CWE190_Integer_Overflow__char_fscanf_multiply_68_bad_data;extern char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodG2B_data;extern char CWE190_Integer_Overflow__char_fscanf_multiply_68_goodB2G_data;void bad_sink(){char data=CWE190_Integer_Overflow__char_fscanf_multiply_68_bad_data;{char result=data * 2;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_data=data;goodG2B_sink();}
extern char CWE190_Integer_Overflow__char_fscanf_square_68_bad_data;extern char CWE190_Integer_Overflow__char_fscanf_square_68_goodG2B_data;extern char CWE190_Integer_Overflow__char_fscanf_square_68_goodB2G_data;void bad_sink(){char data=CWE190_Integer_Overflow__char_fscanf_square_68_bad_data;{char result=data * data;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_data=data;goodG2B_sink();}
extern char CWE190_Integer_Overflow__char_rand_add_68_bad_data;extern char CWE190_Integer_Overflow__char_rand_add_68_goodG2B_data;extern char CWE190_Integer_Overflow__char_rand_add_68_goodB2G_data;void bad_sink(){char data=CWE190_Integer_Overflow__char_rand_add_68_bad_data;{char result=data+1;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_data=data;goodG2B_sink();}
void bad_sink(char data){{char result=data * 2;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_sink(data);}
void bad_sink(char * data_ptr){char data=*data_ptr;{char result=data * 2;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_sink(&data);}
void bad_sink(char * data_ptr){char data=*data_ptr;{char result=data * data;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_sink(&data);}
void bad_sink(int data){{int result=data+1;printIntLine(result);}}void goodB2G(){int data;data=-1;{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}goodB2G_sink(data);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{int result=data+1;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(&data);}
void bad_sink(int * data_ptr){int data=*data_ptr;{int result=data * 2;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(&data);}
void bad_sink(int data){{int result=data * data;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(data);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{int result=data * data;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(&data);}
typedef struct _CWE190_Integer_Overflow__int_fixed_add_67_struct_type{int a;} CWE190_Integer_Overflow__int_fixed_add_67_struct_type;void goodB2G(){int data;struct_type my_struct;data=-1;data=INT_MAX;my_struct.a=data;goodB2G_sink(my_struct);}
extern int CWE190_Integer_Overflow__int_fixed_add_68_bad_data;extern int CWE190_Integer_Overflow__int_fixed_add_68_goodG2B_data;extern int CWE190_Integer_Overflow__int_fixed_add_68_goodB2G_data;void bad_sink(){int data=CWE190_Integer_Overflow__int_fixed_add_68_bad_data;{int result=data+1;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_data=data;goodG2B_sink();}
void bad_sink(int data){{int result=data * 2;printIntLine(result);}}void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=5;func_ptr(data);}
void bad_sink(int * data_ptr){int data=*data_ptr;{int result=data * data;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(&data);}
void bad_sink(int data_array[]){int data=data_array[2];{int result=data+1;printIntLine(result);}}void goodG2B(){int data;int data_array[5];data=-1;data=5;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{int result=data * 2;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(&data);}
int bad_source(int data){fscanf(stdin,"%d",&data);return data;}void goodG2B(){int data;data=-1;data=goodG2B_source(data);{int result=data * data;printIntLine(result);}}
void bad_sink(int data){{int result=data+1;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_sink(data);}
void bad_sink(int data){{int result=data+1;printIntLine(result);}}void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=5;func_ptr(data);}
void bad_sink(int data){{int result=data+1;printIntLine(result);}}void goodB2G(){int data;void(*func_ptr)(int)=goodB2G_sink;data=-1;data=RAND32();func_ptr(data);}
typedef struct _CWE190_Integer_Overflow__int_rand_multiply_67_struct_type{int a;} CWE190_Integer_Overflow__int_rand_multiply_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=5;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(unsigned char * data_ptr){unsigned char data=*data_ptr;{unsigned char result=data+1;printHexUnsignedCharLine(result);}}void goodB2G(){unsigned char data;data=' ';data=UCHAR_MAX;goodB2G_sink(&data);}
void bad_sink(unsigned char data_array[]){unsigned char data=data_array[2];{unsigned char result=data+1;printHexUnsignedCharLine(result);}}void goodB2G(){unsigned char data;unsigned char data_array[5];data=' ';data=UCHAR_MAX;data_array[2]=data;goodB2G_sink(data_array);}
unsigned char bad_source(unsigned char data){data=UCHAR_MAX;return data;}void goodG2B(){unsigned char data;data=' ';data=goodG2B_source(data);{unsigned char result=data * data;printHexUnsignedCharLine(result);}}
void bad_sink(unsigned char * data_ptr){unsigned char data=*data_ptr;{unsigned char result=data * data;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;data=' ';data=5;goodG2B_sink(&data);}
unsigned char bad_source(unsigned char data){fscanf(stdin,"%hc",&data);return data;}void goodB2G(){unsigned char data;data=' ';data=goodB2G_source(data);{unsigned char result=-1;if(data <=(UCHAR_MAX/2)){result=data * 2;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void bad_sink(unsigned char * data_ptr){unsigned char data=*data_ptr;{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}void goodB2G(){unsigned char data;data=' ';fscanf(stdin,"%hc",&data);goodB2G_sink(&data);}
void bad_sink(unsigned char data){{unsigned char result=data * data;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;data=' ';data=5;goodG2B_sink(data);}
unsigned char bad_source(unsigned char data){data=(unsigned char)rand();return data;}void goodB2G(){unsigned char data;data=' ';data=goodB2G_source(data);{unsigned char result=-1;if(data < UCHAR_MAX){result=data+1;printHexUnsignedCharLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void bad_sink(unsigned char data){{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;data=' ';data=5;goodG2B_sink(data);}
void bad_sink(void * void_data_ptr){unsigned char * data_ptr=(unsigned char *)void_data_ptr;unsigned char data=(*data_ptr);{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;data=' ';data=5;goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){unsigned char * data_ptr=(unsigned char *)void_data_ptr;unsigned char data=(*data_ptr);{unsigned char result=data * 2;printHexUnsignedCharLine(result);}}void goodB2G(){unsigned char data;data=' ';data=(unsigned char)rand();goodB2G_sink(&data);}
void bad_sink(unsigned char data_array[]){unsigned char data=data_array[2];{unsigned char result=data * data;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;unsigned char data_array[5];data=' ';data=5;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(unsigned int data){{unsigned int result=data+1;printUnsignedLine(result);}}void goodG2B(){unsigned int data;void(*func_ptr)(unsigned int)=goodG2B_sink;data=0;data=5;func_ptr(data);}
void bad_sink(unsigned int data){{unsigned int result=data+1;printUnsignedLine(result);}}void goodB2G(){unsigned int data;void(*func_ptr)(unsigned int)=goodB2G_sink;data=0;data=UINT_MAX;func_ptr(data);}
void bad_sink(unsigned int * data_ptr){unsigned int data=*data_ptr;{unsigned int result=data * 2;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=UINT_MAX;goodB2G_sink(&data);}
extern unsigned int CWE190_Integer_Overflow__unsigned_int_fixed_square_68_bad_data;extern unsigned int CWE190_Integer_Overflow__unsigned_int_fixed_square_68_goodG2B_data;extern unsigned int CWE190_Integer_Overflow__unsigned_int_fixed_square_68_goodB2G_data;void bad_sink(){unsigned int data=CWE190_Integer_Overflow__unsigned_int_fixed_square_68_bad_data;{unsigned int result=data * data;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=UINT_MAX;goodB2G_data=data;goodB2G_sink();}
unsigned int bad_source(unsigned int data){data=(unsigned int)RAND32();return data;}void goodB2G(){unsigned int data;data=0;data=goodB2G_source(data);{unsigned int result=-1;if(data <=(UINT_MAX/2)){result=data * 2;printUnsignedLine(result);}else{printLine("Input value is too large to perform arithmetic safely.");}}}
void bad_sink(unsigned int * data_ptr){unsigned int data=*data_ptr;{unsigned int result=data * 2;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=(unsigned int)RAND32();goodB2G_sink(&data);}
typedef struct _CWE190_Integer_Overflow__unsigned_int_rand_multiply_67_struct_type{unsigned int a;} CWE190_Integer_Overflow__unsigned_int_rand_multiply_67_struct_type;void goodG2B(){unsigned int data;struct_type my_struct;data=0;data=5;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(unsigned int * data_ptr){unsigned int data=*data_ptr;{unsigned int result=data * data;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=(unsigned int)RAND32();goodB2G_sink(&data);}
void bad_sink(void * void_data_ptr){unsigned int * data_ptr=(unsigned int *)void_data_ptr;unsigned int data=(*data_ptr);{unsigned int result=data * data;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=(unsigned int)RAND32();goodB2G_sink(&data);}
typedef struct _CWE190_Integer_Overflow__unsigned_int_rand_square_67_struct_type{unsigned int a;} CWE190_Integer_Overflow__unsigned_int_rand_square_67_struct_type;void goodG2B(){unsigned int data;struct_type my_struct;data=0;data=5;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(void * void_data_ptr){char * data_ptr=(char *)void_data_ptr;char data=(*data_ptr);{char result=data-1;printHexCharLine(result);}}void goodG2B(){char data;data=' ';data=5;goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){char * data_ptr=(char *)void_data_ptr;char data=(*data_ptr);{char result=data-1;printHexCharLine(result);}}void goodB2G(){char data;data=' ';fscanf(stdin,"%c",&data);goodB2G_sink(&data);}
typedef struct _CWE191_Integer_Underflow__char_rand_67_struct_type{char a;} CWE191_Integer_Underflow__char_rand_67_struct_type;void goodB2G(){char data;struct_type my_struct;data=' ';data=(char)rand();my_struct.a=data;goodB2G_sink(my_struct);}
void bad_sink(int data){{int result=data-1;printIntLine(result);}}void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=5;func_ptr(data);}
void bad_sink(int data){{int result=data-1;printIntLine(result);}}void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=5;func_ptr(data);}
void bad_sink(int data_array[]){int data=data_array[2];{int result=data-1;printIntLine(result);}}void goodG2B(){int data;int data_array[5];data=-1;data=5;data_array[2]=data;goodG2B_sink(data_array);}
typedef struct _CWE191_Integer_Underflow__int_fixed_67_struct_type{int a;} CWE191_Integer_Underflow__int_fixed_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=5;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(int data){{int result=data-1;printIntLine(result);}}void goodB2G(){int data;data=-1;fscanf(stdin,"%d",&data);goodB2G_sink(data);}
int bad_source(int data){data=RAND32();return data;}void goodB2G(){int data;data=-1;data=goodB2G_source(data);{int result=0;if(data > INT_MIN){result=data-1;printIntLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void bad_sink(int * data_ptr){int data=*data_ptr;{int result=data-1;printIntLine(result);}}void goodB2G(){int data;data=-1;data=RAND32();goodB2G_sink(&data);}
extern int CWE191_Integer_Underflow__int_rand_68_bad_data;extern int CWE191_Integer_Underflow__int_rand_68_goodG2B_data;extern int CWE191_Integer_Underflow__int_rand_68_goodB2G_data;void bad_sink(){int data=CWE191_Integer_Underflow__int_rand_68_bad_data;{int result=data-1;printIntLine(result);}}void goodG2B(){int data;data=-1;data=5;goodG2B_data=data;goodG2B_sink();}
unsigned char bad_source(unsigned char data){data=0;return data;}void goodG2B(){unsigned char data;data=' ';data=goodG2B_source(data);{unsigned char result=data-1;printHexUnsignedCharLine(result);}}
void bad_sink(unsigned char data){{unsigned char result=data-1;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;void(*func_ptr)(unsigned char)=goodG2B_sink;data=' ';data=5;func_ptr(data);}
unsigned char bad_source(unsigned char data){data=(unsigned char)rand();return data;}void goodB2G(){unsigned char data;data=' ';data=goodB2G_source(data);{unsigned char result=0;if(data > 0){result=data-1;printHexUnsignedCharLine(result);}else{printLine("Input value is too small to perform arithmetic safely.");}}}
void bad_sink(unsigned char * data_ptr){unsigned char data=*data_ptr;{unsigned char result=data-1;printHexUnsignedCharLine(result);}}void goodB2G(){unsigned char data;data=' ';data=(unsigned char)rand();goodB2G_sink(&data);}
void bad_sink(unsigned char data){{unsigned char result=data-1;printHexUnsignedCharLine(result);}}void goodG2B(){unsigned char data;void(*func_ptr)(unsigned char)=goodG2B_sink;data=' ';data=5;func_ptr(data);}
unsigned int bad_source(unsigned int data){data=0;return data;}void goodG2B(){unsigned int data;data=0;data=goodG2B_source(data);{unsigned int result=data-1;printUnsignedLine(result);}}
extern unsigned int CWE191_Integer_Underflow__unsigned_int_rand_68_bad_data;extern unsigned int CWE191_Integer_Underflow__unsigned_int_rand_68_goodG2B_data;extern unsigned int CWE191_Integer_Underflow__unsigned_int_rand_68_goodB2G_data;void bad_sink(){unsigned int data=CWE191_Integer_Underflow__unsigned_int_rand_68_bad_data;{unsigned int result=data-1;printUnsignedLine(result);}}void goodB2G(){unsigned int data;data=0;data=(unsigned int)RAND32();goodB2G_data=data;goodB2G_sink();}
void bad_sink(void * void_data_ptr){short * data_ptr=(short *)void_data_ptr;short data=(*data_ptr);{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){short data;data=0;data=100-1;goodG2B_sink(&data);}
void bad_sink(short data_array[]){short data=data_array[2];{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){short data;short data_array[5];data=0;data=100-1;data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(short * data_ptr){short data=*data_ptr;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){short data;data=0;data=100-1;goodG2B_sink(&data);}
void bad_sink(short data_array[]){short data=data_array[2];{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){short data;short data_array[5];data=0;data=100-1;data_array[2]=data;goodG2B_sink(data_array);}
int bad_source(int data){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}return data;}void goodG2B(){int data;data=-1;data=goodG2B_source(data);{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
extern int CWE195_Signed_To_Unsigned_Conversion__fgets_memmove_68_bad_data;extern int CWE195_Signed_To_Unsigned_Conversion__fgets_memmove_68_goodG2B_data;void bad_sink(){int data=CWE195_Signed_To_Unsigned_Conversion__fgets_memmove_68_bad_data;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){int data;data=-1;data=100-1;goodG2B_data=data;goodG2B_sink();}
void bad_sink(int data){{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memmove(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){int data;void(*func_ptr)(int)=goodG2B_sink;data=-1;data=100-1;func_ptr(data);}
int bad_source(int data){fscanf(stdin,"%d",&data);return data;}void goodG2B(){int data;data=-1;data=goodG2B_source(data);{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){strncpy(dest,src,data);dest[data]='\0';}printLine(dest);}}
typedef struct _CWE195_Signed_To_Unsigned_Conversion__rand_malloc_67_struct_type{int a;} CWE195_Signed_To_Unsigned_Conversion__rand_malloc_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=100-1;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(int * data_ptr){int data=*data_ptr;{char src[100];char dest[100]="";memset(src,'A',100-1);src[100-1]='\0';if(data < 100){memcpy(dest,src,data);dest[data]='\0';}printLine(dest);}}void goodG2B(){int data;data=-1;data=100-1;goodG2B_sink(&data);}
typedef struct _CWE197_Numeric_Truncation_Error__int_fgets_to_char_67_struct_type{int a;} CWE197_Numeric_Truncation_Error__int_fgets_to_char_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=CHAR_MAX-5;my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE197_Numeric_Truncation_Error__int_large_to_char_67_struct_type{int a;} CWE197_Numeric_Truncation_Error__int_large_to_char_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=CHAR_MAX-5;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(void * void_data_ptr){short * data_ptr=(short *)void_data_ptr;short data=(*data_ptr);{char c=(char)data;printHexCharLine(c);}}void goodG2B(){short data;data=-1;data=CHAR_MAX-5;goodG2B_sink(&data);}
typedef struct _CWE23_Relative_Path_Traversal__char_Environment_open_67_struct_type{char * a;} CWE23_Relative_Path_Traversal__char_Environment_open_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * data){{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");func_ptr(data);}
char * bad_source(char * data){{size_t data_len=strlen(data);if(FILENAME_MAX-data_len > 1){fgets(data+data_len,(int)(FILENAME_MAX-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}return data;}void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;data=goodG2B_source(data);{FILE *file=NULL;file=FOPEN(data,"wb+");if(file!=NULL) fclose(file);}}
extern char * CWE23_Relative_Path_Traversal__char_fromConsole_open_68_bad_data;extern char * CWE23_Relative_Path_Traversal__char_fromConsole_open_68_goodG2B_data;void bad_sink(){char * data=CWE23_Relative_Path_Traversal__char_fromConsole_open_68_bad_data;{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}void goodG2B(){char * data;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");goodG2B_data=data;goodG2B_sink();}
typedef struct _CWE23_Relative_Path_Traversal__char_fromFile_fopen_67_struct_type{char * a;} CWE23_Relative_Path_Traversal__char_fromFile_fopen_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;strcat(data,"file.txt");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");goodG2B_sink(&data);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[FILENAME_MAX]=BASEPATH;data=data_buf;wcscat(data,L"file.txt");data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);printIntLine(100/data);}void goodG2B(){int data;data=-1;data=7;goodG2B_sink(&data);}
typedef struct _CWE369_Divide_By_Zero__int_fgets_divide_67_struct_type{int a;} CWE369_Divide_By_Zero__int_fgets_divide_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=7;my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE36_Absolute_Path_Traversal__char_Environment_open_67_struct_type{char * a;} CWE36_Absolute_Path_Traversal__char_Environment_open_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[FILENAME_MAX]="";data=data_buf;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * data){{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[FILENAME_MAX]="";data=data_buf;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");func_ptr(data);}
void bad_sink(char * data_array[]){char * data=data_array[2];{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}void goodG2B(){char * data;char * data_array[5];char data_buf[FILENAME_MAX]="";data=data_buf;strcpy(data,"c:\\temp\\file.txt");strcpy(data,"/tmp/file.txt");data_array[2]=data;goodG2B_sink(data_array);}
char * bad_source(char * data){{size_t data_len=strlen(data);FILE * pFile;if(FILENAME_MAX-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(FILENAME_MAX-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){char * data;char data_buf[FILENAME_MAX]="";data=data_buf;data=goodG2B_source(data);{HANDLE hFile;hFile=CreateFileA(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data){{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");goodG2B_sink(data);}
void bad_sink(wchar_t * data){{FILE *file=NULL;file=FOPEN(data,L"wb+");if(file!=NULL) fclose(file);}}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");func_ptr(data);}
extern wchar_t * CWE36_Absolute_Path_Traversal__wchar_t_fromConsole_open_68_bad_data;extern wchar_t * CWE36_Absolute_Path_Traversal__wchar_t_fromConsole_open_68_goodG2B_data;void bad_sink(){wchar_t * data=CWE36_Absolute_Path_Traversal__wchar_t_fromConsole_open_68_bad_data;{int fd;fd=OPEN(data,O_RDWR|O_CREAT,S_IREAD|S_IWRITE);if(fd!=-1){CLOSE(fd);}}}void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");goodG2B_data=data;goodG2B_sink();}
void bad_sink(wchar_t * data){{HANDLE hFile;hFile=CreateFileW(data,(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);if(hFile!=INVALID_HANDLE_VALUE){CloseHandle(hFile);}}}void goodG2B(){wchar_t * data;wchar_t data_buf[FILENAME_MAX]=L"";data=data_buf;wcscpy(data,L"c:\\temp\\file.txt");wcscpy(data,L"/tmp/file.txt");goodG2B_sink(data);}
void bad_sink(int count){{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}void goodG2B(){int count;count=-1;count=20;goodG2B_sink(count);}
typedef struct _CWE400_Resource_Exhaustion__fgets_fwrite_67_struct_type{int a;} CWE400_Resource_Exhaustion__fgets_fwrite_67_struct_type;void goodG2B(){int count;struct_type my_struct;count=-1;count=20;my_struct.a=count;goodG2B_sink(my_struct);}
extern int CWE400_Resource_Exhaustion__fscanf_for_loop_68_bad_data;extern int CWE400_Resource_Exhaustion__fscanf_for_loop_68_goodG2B_data;extern int CWE400_Resource_Exhaustion__fscanf_for_loop_68_goodB2G_data;void bad_sink(){int count=CWE400_Resource_Exhaustion__fscanf_for_loop_68_bad_data;{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}void goodG2B(){int count;count=-1;count=20;goodG2B_data=count;goodG2B_sink();}
void bad_sink(int * count_ptr){int count=*count_ptr;{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}void goodG2B(){int count;count=-1;count=20;goodG2B_sink(&count);}
void bad_sink(void * void_count_ptr){int * count_ptr=(int *)void_count_ptr;int count=(*count_ptr);{size_t i=0;for(i=0; i <(size_t)count; i++){printLine("Hello");}}}void goodB2G(){int count;count=-1;count=RAND32();goodB2G_sink(&count);}
void bad_sink(char * data){;}void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;data=NULL;data=(char *)calloc(100,sizeof(char));strcpy(data,"A String");printLine(data);func_ptr(data);}
void bad_sink(char * data){;}void goodG2B(){char * data;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}goodG2B_sink(data);}
void bad_sink(char * data){;}void goodB2G(){char * data;void(*func_ptr)(char *)=goodB2G_sink;data=NULL;data=NULL;data=(char *)realloc(data,100*sizeof(char));strcpy(data,"A String");printLine(data);func_ptr(data);}
void bad_sink(int * data){;}void goodG2B(){int * data;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}goodG2B_sink(data);}
void bad_sink(int * data){;}void goodB2G(){int * data;data=NULL;data=(int *)calloc(100,sizeof(int));data[0]=5;printIntLine(data[0]);goodB2G_sink(data);}
void bad_sink(int * * data_ptr){int * data=*data_ptr;;}void goodG2B(){int * data;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}goodG2B_sink(&data);}
void bad_sink(int * * data_ptr){int * data=*data_ptr;;}void goodB2G(){int * data;data=NULL;data=(int *)calloc(100,sizeof(int));data[0]=5;printIntLine(data[0]);goodB2G_sink(&data);}
void bad_sink(int * data){;}void goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}func_ptr(data);}
void bad_sink(int * data){;}void goodG2B(){int * data;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}goodG2B_sink(data);}
int * bad_source(int * data){data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);return data;}void goodG2B(){int * data;data=NULL;data=goodG2B_source(data);;}
void bad_sink(int * * data_ptr){int * data=*data_ptr;;}void goodG2B(){int * data;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}goodG2B_sink(&data);}
extern int * CWE401_Memory_Leak__int_malloc_68_bad_data;extern int * CWE401_Memory_Leak__int_malloc_68_goodG2B_data;extern int * CWE401_Memory_Leak__int_malloc_68_goodB2G_data;void bad_sink(){int * data=CWE401_Memory_Leak__int_malloc_68_bad_data;;}void goodB2G(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));data[0]=5;printIntLine(data[0]);goodB2G_data=data;goodB2G_sink();}
int * bad_source(int * data){data=NULL;data=(int *)realloc(data,100*sizeof(int));data[0]=5;printIntLine(data[0]);return data;}void goodB2G(){int * data;data=NULL;data=goodB2G_source(data);free(data);}
typedef struct _CWE401_Memory_Leak__long_long_calloc_67_struct_type{long long * a;} CWE401_Memory_Leak__long_long_calloc_67_struct_type;void goodG2B(){long long * data;struct_type my_struct;data=NULL;{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(long long * data_array[]){long long * data=data_array[2];;}void goodG2B(){long long * data;long long * data_array[5];data=NULL;{long long data_goodbuf[100];data=data_goodbuf;data[0]=5L;printLongLongLine(data[0]);}data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(char * data){;}void goodG2B(){char * data;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"a string");printLine(data);}goodG2B_sink(data);}
void bad_sink(char * data){;}void goodB2G(){char * data;data=NULL;{char mystring[]="mystring";data=strdup(mystring);printLine(data);}goodB2G_sink(data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;;}void goodB2G(){wchar_t * data;data=NULL;{wchar_t mystring[]=L"mystring";data=wcsdup(mystring);printWLine(data);}goodB2G_sink(&data);}
extern wchar_t * CWE401_Memory_Leak__strdup_wchar_t_68_bad_data;extern wchar_t * CWE401_Memory_Leak__strdup_wchar_t_68_goodG2B_data;extern wchar_t * CWE401_Memory_Leak__strdup_wchar_t_68_goodB2G_data;void bad_sink(){wchar_t * data=CWE401_Memory_Leak__strdup_wchar_t_68_bad_data;;}void goodG2B(){wchar_t * data;data=NULL;{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"a string");printWLine(data);}goodG2B_data=data;goodG2B_sink();}
void bad_sink(struct _twoints * data){;}void goodG2B(){struct _twoints * data;data=NULL;{struct _twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);}goodG2B_sink(data);}
void bad_sink(struct _twoints * data){;}void goodB2G(){struct _twoints * data;void(*func_ptr)(struct _twoints *)=goodB2G_sink;data=NULL;data=(struct _twoints *)calloc(100,sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);func_ptr(data);}
struct _twoints * bad_source(struct _twoints * data){data=(struct _twoints *)malloc(100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);return data;}void goodB2G(){struct _twoints * data;data=NULL;data=goodB2G_source(data);free(data);}
void bad_sink(void * void_data_ptr){struct _twoints * * data_ptr=(struct _twoints * *)void_data_ptr;struct _twoints * data=(*data_ptr);;}void goodB2G(){struct _twoints * data;data=NULL;data=NULL;data=(struct _twoints *)realloc(data,100*sizeof(struct _twoints));data[0].a=0;data[0].b=0;printStructLine((twoints *)&data[0]);goodB2G_sink(&data);}
typedef struct _CWE401_Memory_Leak__twoints_calloc_67_struct_type{twoints * a;} CWE401_Memory_Leak__twoints_calloc_67_struct_type;void goodB2G(){twoints * data;struct_type my_struct;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));data[0].a=0;data[0].b=0;printStructLine(&data[0]);my_struct.a=data;goodB2G_sink(my_struct);}
typedef struct _CWE401_Memory_Leak__twoints_malloc_67_struct_type{twoints * a;} CWE401_Memory_Leak__twoints_malloc_67_struct_type;void goodG2B(){twoints * data;struct_type my_struct;data=NULL;{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data){;}void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)calloc(100,sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);goodB2G_sink(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);;}void goodB2G(){wchar_t * data;data=NULL;data=(wchar_t *)calloc(100,sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);goodB2G_sink(&data);}
void bad_sink(wchar_t * data){;}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;{wchar_t data_goodbuf[100];data=data_goodbuf;wcscpy(data,L"A String");printWLine(data);}func_ptr(data);}
void bad_sink(wchar_t * data){;}void goodB2G(){wchar_t * data;data=NULL;data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));wcscpy(data,L"A String");printWLine(data);goodB2G_sink(data);}
void bad_sink(void * void_data_ptr){FILE * * data_ptr=(FILE * *)void_data_ptr;FILE * data=(*data_ptr);if(data!=NULL){CLOSE((int)data);}}void goodB2G(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);goodB2G_sink(&data);}
void bad_sink(int data){if(data!=-1){CloseHandle((HANDLE)data);}}void goodB2G(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);goodB2G_sink(data);}
void bad_sink(HANDLE * data_ptr){HANDLE data=*data_ptr;if(data!=INVALID_HANDLE_VALUE){CLOSE((int)data);}}void goodB2G(){HANDLE data;data=INVALID_HANDLE_VALUE;data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);goodB2G_sink(&data);}
HANDLE bad_source(HANDLE data){data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);return data;}void goodB2G(){HANDLE data;data=INVALID_HANDLE_VALUE;data=goodB2G_source(data);if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}
void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);free(data);}void goodG2B(){int * data;data=NULL;data=(int *)malloc(100*sizeof(int));goodG2B_sink(&data);}
twoints * bad_source(twoints * data){data=(twoints *)malloc(100*sizeof(twoints));free(data);return data;}void goodG2B(){twoints * data;data=NULL;data=goodG2B_source(data);free(data);}
typedef struct _CWE415_Double_Free__malloc_free_struct_67_struct_type{twoints * a;} CWE415_Double_Free__malloc_free_struct_67_struct_type;void goodG2B(){twoints * data;struct_type my_struct;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);printLine(data);}void goodG2B(){char * data;data=NULL;data=(char *)malloc(100*sizeof(char));memset(data,'A',100-1);data[100-1]='\0';goodG2B_sink(&data);}
void bad_sink(long long * * data_ptr){long long * data=*data_ptr;printLongLongLine(data[0]);}void goodB2G(){long long * data;data=NULL;data=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data[i]=5L;}}free(data);goodB2G_sink(&data);}
void bad_sink(twoints * data){printStructLine(&data[0]);}void goodG2B(){twoints * data;void(*func_ptr)(twoints *)=goodG2B_sink;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}func_ptr(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,GOOD_OS_COMMAND);goodG2B_sink(&data);}
typedef struct _CWE427_Uncontrolled_Search_Path_Element__char_fromConsole_67_struct_type{char * a;} CWE427_Uncontrolled_Search_Path_Element__char_fromConsole_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[250]="PATH=";data=data_buf;strcat(data,NEW_PATH);my_struct.a=data;goodG2B_sink(my_struct);}
typedef struct _CWE427_Uncontrolled_Search_Path_Element__wchar_t_fromFile_67_struct_type{wchar_t * a;} CWE427_Uncontrolled_Search_Path_Element__wchar_t_fromFile_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[250]=L"PATH=";data=data_buf;wcscat(data,NEW_PATH);my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;printLine(data);}void goodB2G(){char * data;; goodB2G_sink(&data);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);printIntLine(data);}void goodB2G(){int data;; goodB2G_sink(&data);}
void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);printIntLine(*data);}void goodG2B(){int * data;data=(int *)malloc(sizeof(int));*data=5;goodG2B_sink(&data);}
void bad_sink(long long * data_ptr){long long data=*data_ptr;printLongLongLine(data);}void goodB2G(){long long data;; goodB2G_sink(&data);}
void bad_sink(void * void_data_ptr){twoints * data_ptr=(twoints *)void_data_ptr;twoints data=(*data_ptr);printIntLine(data.a);printIntLine(data.b);}void goodG2B(){twoints data;data.a=1;data.b=2;goodG2B_sink(&data);}
void bad_sink(twoints * * data_ptr){twoints * data=*data_ptr;{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}void goodG2B(){twoints * data;twoints data_uninit_array[10];data=data_uninit_array;{int i;for(i=0; i<10; i++){data[i].a=i;data[i].b=i;}}goodG2B_sink(&data);}
void bad_sink(twoints * * data_ptr){twoints * data=*data_ptr;{int i;for(i=0; i<10; i++){printIntLine(data[i].a);printIntLine(data[i].b);}}}void goodB2G(){twoints * data;twoints data_uninit_array[10];data=data_uninit_array;; goodB2G_sink(&data);}
void bad_sink(char data){{char char_array[4];char_array[0]='x';char_array[1]=data;char_array[2]='z';char_array[3]='\0';printLine(char_array);}}void goodG2B(){char data;data=' ';data='a';goodG2B_sink(data);}
void bad_sink(double * * data_ptr){double * data=*data_ptr;printDoubleLine(*data);free(data);}void goodG2B(){double * data;data=NULL;data=(double *)malloc(sizeof(*data));*data=1.7E300;goodG2B_sink(&data);}
twoints * bad_source(twoints * data){data=NULL;return data;}void goodG2B(){twoints * data;data=NULL;data=goodG2B_source(data);printStructLine(data);}
typedef struct _CWE476_NULL_Pointer_Dereference__struct_67_struct_type{twoints * a;} CWE476_NULL_Pointer_Dereference__struct_67_struct_type;void goodG2B(){twoints * data;struct_type my_struct;data=NULL;{twoints tmp;tmp.a=0;tmp.b=0;data=&tmp;}my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * data_array[]){char * data=data_array[2];printLine(data);free(data);}void goodG2B(){char * data;char * data_array[5];data=NULL; {char * data_buf=(char *)malloc(100*sizeof(char));memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}data_array[2]=data;goodG2B_sink(data_array);}
int * bad_source(int * data){{int * data_buf=(int *)ALLOCA(100*sizeof(int));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}return data;}void goodG2B(){int * data;data=NULL; data=goodG2B_source(data);printIntLine(data[0]);free(data);}
extern long long * CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__free_long_long_alloca_68_bad_data;extern long long * CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__free_long_long_alloca_68_goodG2B_data;void bad_sink(){long long * data=CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__free_long_long_alloca_68_bad_data;printLongLongLine(data[0]);free(data);}void goodG2B(){long long * data;data=NULL; {long long * data_buf=(long long *)malloc(100*sizeof(long long));{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}goodG2B_data=data;goodG2B_sink();}
void bad_sink(wchar_t * data){printWLine(data);free(data);}void goodG2B(){wchar_t * data;data=NULL; {wchar_t * data_buf=(wchar_t *)malloc(100*sizeof(wchar_t));wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}goodG2B_sink(data);}
void bad_sink(char * data){{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"15");goodG2B_sink(data);}
char * bad_source(char * data){{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);{int i,n,v;if(sscanf(data,"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcpy(data,"15");goodG2B_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{int i,n,v;if(swscanf(data,L"%d",&n)==1){v=0;for(i=0; i < n; i++){v++;}printIntLine(v);}}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscpy(data,L"15");goodG2B_sink(&data);}
void bad_sink(int data){assert(data > ASSERT_VALUE);}void goodG2B(){int data;data=-1;data=ASSERT_VALUE+1;goodG2B_sink(data);}
int bad_source(int data){fscanf(stdin,"%d",&data);return data;}void goodG2B(){int data;data=-1;data=goodG2B_source(data);assert(data > ASSERT_VALUE);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; strcat(data,src);printLine(data);}}void goodG2B(){char * data;char data_buf[100];data=data_buf;data[0]='\0'; goodG2B_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{size_t src_len;wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; src_len=wcslen(src);wcsncat(data,src,src_len);printWLine(data);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100];data=data_buf;data[0]=L'\0'; goodG2B_sink(&data);}
void bad_sink(FILE * data){fclose(data);}void goodG2B(){FILE * data;void(*func_ptr)(FILE *)=goodG2B_sink;data=NULL; data=fopen("GoodSource_fopen.txt","w+");func_ptr(data);}
extern FILE * CWE675_Duplicate_Operations_on_Resource__fopen_68_bad_data;extern FILE * CWE675_Duplicate_Operations_on_Resource__fopen_68_goodG2B_data;extern FILE * CWE675_Duplicate_Operations_on_Resource__fopen_68_goodB2G_data;void bad_sink(){FILE * data=CWE675_Duplicate_Operations_on_Resource__fopen_68_bad_data;fclose(data);}void goodB2G(){FILE * data;data=NULL; data=fopen("BadSource_fopen.txt","w+");fclose(data);goodB2G_data=data;goodB2G_sink();}
void bad_sink(FILE * data){fclose(data);}void goodG2B(){FILE * data;void(*func_ptr)(FILE *)=goodG2B_sink;data=NULL; data=fopen("GoodSource_fopen.txt","w+");func_ptr(data);}
void bad_sink(FILE * data_array[]){FILE * data=data_array[2];fclose(data);}void goodB2G(){FILE * data;FILE * data_array[5];data=NULL; data=freopen("BadSource_freopen.txt","w+",stdin);fclose(data);data_array[2]=data;goodB2G_sink(data_array);}
int bad_source(int data){data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);CLOSE(data);return data;}void goodG2B(){int data;data=-1; data=goodG2B_source(data);CLOSE(data);}
typedef struct _CWE675_Duplicate_Operations_on_Resource__open_67_struct_type{int a;} CWE675_Duplicate_Operations_on_Resource__open_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1; data=OPEN("GoodSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(HANDLE data){CloseHandle(data);}void goodG2B(){HANDLE data;data=INVALID_HANDLE_VALUE; data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);goodG2B_sink(data);}
extern HANDLE CWE675_Duplicate_Operations_on_Resource__w32CreateFile_68_bad_data;extern HANDLE CWE675_Duplicate_Operations_on_Resource__w32CreateFile_68_goodG2B_data;extern HANDLE CWE675_Duplicate_Operations_on_Resource__w32CreateFile_68_goodB2G_data;void bad_sink(){HANDLE data=CWE675_Duplicate_Operations_on_Resource__w32CreateFile_68_bad_data;CloseHandle(data);}void goodG2B(){HANDLE data;data=INVALID_HANDLE_VALUE; data=CreateFile("GoodSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);goodG2B_data=data;goodG2B_sink();}
void bad_sink(int * data_ptr){int data=*data_ptr;{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}void goodG2B(){int data;data=-1;data=20;goodG2B_sink(&data);}
void bad_sink(int data_array[]){int data=data_array[2];{size_t i;int *b;b=(int*)malloc(data * sizeof(int));for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);free(b);}}void goodG2B(){int data;int data_array[5];data=-1;data=20;data_array[2]=data;goodG2B_sink(data_array);}
typedef struct _CWE680_Integer_Overflow_To_Buffer_Overflow__malloc_rand_67_struct_type{int a;} CWE680_Integer_Overflow_To_Buffer_Overflow__malloc_rand_67_struct_type;void goodG2B(){int data;struct_type my_struct;data=-1;data=20;my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(int * data_array[]){int * data=data_array[2];data[0]=5;printIntLine(data[0]);free(data);}void goodB2G(){int * data;int * data_array[5];data=NULL; data=(int *)calloc(100,sizeof(int));data_array[2]=data;goodB2G_sink(data_array);}
void bad_sink(long long * data_array[]){long long * data=data_array[2];data[0]=5L;printLongLongLine(data[0]);free(data);}void goodB2G(){long long * data;long long * data_array[5];data=NULL; data=(long long *)calloc(100,sizeof(long long));data_array[2]=data;goodB2G_sink(data_array);}
extern twoints * CWE690_NULL_Deref_from_Return__struct_malloc_68_bad_data_for_bad_sink;extern twoints * CWE690_NULL_Deref_from_Return__struct_malloc_68_bad_data_for_good_sink;void bad_sink(){twoints * data=CWE690_NULL_Deref_from_Return__struct_malloc_68_bad_data_for_bad_sink;data[0].a=1;data[0].b=1;printStructLine(&data[0]);free(data);}void goodB2G(){twoints * data;data=NULL; data=(twoints *)malloc(100);bad_data_for_good_sink=data;goodB2G_sink();}
void bad_sink(FILE * data_array[]){FILE * data=data_array[2];fclose(data);}void goodB2G(){FILE * data;FILE * data_array[5];data=NULL;data=WFOPEN(L"file.txt",L"w+");data_array[2]=data;goodB2G_sink(data_array);}
void bad_sink(char * data_array[]){char * data=data_array[2];for(; *data!='\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}void goodB2G(){char * data;char * data_array[5];data=(char *)malloc(100*sizeof(char));data[0]='\0';{size_t data_len=strlen(data);char * environment=GETENV(ENV_VARIABLE);if(environment!=NULL){strncat(data+data_len,environment,100-data_len-1);}}data_array[2]=data;goodB2G_sink(data_array);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;for(; *data!='\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}void goodB2G(){char * data;data=(char *)malloc(100*sizeof(char));data[0]='\0';strcpy(data,BAD_SRC_FIXED);goodB2G_sink(&data);}
typedef struct _CWE761_Free_Pointer_Not_At_Start_Of_Buffer__char_fromFile_67_struct_type{char * a;} CWE761_Free_Pointer_Not_At_Start_Of_Buffer__char_fromFile_67_struct_type;void goodB2G(){char * data;struct_type my_struct;data=(char *)malloc(100*sizeof(char));data[0]='\0';{size_t data_len=strlen(data);FILE * pFile;if(100-data_len > 1){pFile=FOPEN("C:\\temp\\file.txt","r");if(pFile!=NULL){fgets(data+data_len,(int)(100-data_len),pFile);fclose(pFile);}}}my_struct.a=data;goodB2G_sink(my_struct);}
void bad_sink(wchar_t * data){for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}void goodB2G(){wchar_t * data;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}goodB2G_sink(data);}
void bad_sink(wchar_t * data){for(; *data!=L'\0'; data++){if(*data==SEARCH_CHAR){printLine("We have a match!");break;}}free(data);}void goodB2G(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodB2G_sink;data=(wchar_t *)malloc(100*sizeof(wchar_t));data[0]=L'\0';{size_t data_len=wcslen(data);if(100-data_len > 1){fgetws(data+data_len,(int)(100-data_len),stdin);data_len=wcslen(data);if(data_len > 0){data[data_len-1]=L'\0';}}}func_ptr(data);}
void bad_sink(void * void_data_ptr){FILE * * data_ptr=(FILE * *)void_data_ptr;FILE * data=(*data_ptr);;}void goodB2G(){FILE * data;data=NULL;data=freopen("BadSource_freopen.txt","w+",stdin);goodB2G_sink(&data);}
void bad_sink(int * data_ptr){int data=*data_ptr;;}void goodB2G(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);goodB2G_sink(&data);}
extern int CWE772_Missing_Release_of_Resource_after_Effective_Lifetime__open_no_close_68_bad_data_for_bad_sink;extern int CWE772_Missing_Release_of_Resource_after_Effective_Lifetime__open_no_close_68_bad_data_for_good_sink;void bad_sink(){int data=CWE772_Missing_Release_of_Resource_after_Effective_Lifetime__open_no_close_68_bad_data_for_bad_sink;;}void goodB2G(){int data;data=-1;data=OPEN("BadSource_open.txt",O_RDWR|O_CREAT,S_IREAD|S_IWRITE);bad_data_for_good_sink=data;goodB2G_sink();}
HANDLE bad_source(HANDLE data){data=CreateFile("BadSource_w32CreateFile.txt",(GENERIC_WRITE|GENERIC_READ),0,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);return data;}void goodB2G(){HANDLE data;data=INVALID_HANDLE_VALUE;data=goodB2G_source(data);if(data!=INVALID_HANDLE_VALUE){CloseHandle(data);}}
int bad_source(int data){{char input_buf[CHAR_ARRAY_SIZE]="";fgets(input_buf,CHAR_ARRAY_SIZE,stdin);data=atoi(input_buf);}return data;}void goodG2B(){int data;data=-1;data=goodG2B_source(data);{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}
void bad_sink(int data_array[]){int data=data_array[2];{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}void goodG2B(){int data;int data_array[5];data=-1;data=20;data_array[2]=data;goodG2B_sink(data_array);}
extern int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad_data;extern int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodG2B_data;extern int CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_goodB2G_data;void bad_sink(){int data=CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_68_bad_data;{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}void goodG2B(){int data;data=-1;data=20;goodG2B_data=data;goodG2B_sink();}
int bad_source(int data){data=10000;return data;}void goodB2G(){int data;data=-1;data=goodB2G_source(data);{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than the length of the source string or too large");}}}
typedef struct _CWE789_Uncontrolled_Mem_Alloc__malloc_char_fixed_67_struct_type{int a;} CWE789_Uncontrolled_Mem_Alloc__malloc_char_fixed_67_struct_type;void goodB2G(){int data;struct_type my_struct;data=-1;data=10000;my_struct.a=data;goodB2G_sink(my_struct);}
void bad_sink(int * data_ptr){int data=*data_ptr;{char * char_string;if(data > 0){char_string=(char *)malloc(data*sizeof(char));strcpy(char_string,HELLO_STRING);printLine(char_string);free(char_string);}else{printLine("Input is less than 0");}}}void goodB2G(){int data;data=-1;fscanf(stdin,"%d",&data);goodB2G_sink(&data);}
void bad_sink(void * void_data_ptr){int * data_ptr=(int *)void_data_ptr;int data=(*data_ptr);{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=(wchar_t *)malloc(data*sizeof(wchar_t));wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);free(wchar_t_string);}else{printLine("Input is less than 0");}}}void goodG2B(){int data;data=-1;data=20;goodG2B_sink(&data);}
void bad_sink(int data){{wchar_t * wchar_t_string;if(data > 0){wchar_t_string=(wchar_t *)malloc(data*sizeof(wchar_t));wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);free(wchar_t_string);}else{printLine("Input is less than 0");}}}void goodG2B(){int data;data=-1;data=20;goodG2B_sink(data);}
typedef struct _CWE78_OS_Command_Injection__char_Environment_execvp_67_struct_type{char * a;} CWE78_OS_Command_Injection__char_Environment_execvp_67_struct_type;void goodG2B(){char * data;struct_type my_struct;char data_buf[100]="";data=data_buf;strcat(data,"*.*");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;_spawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(&data);}
void bad_sink(char * data){{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_spawnvp(_P_WAIT,COMMAND_INT,args);}}void goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;char data_buf[100]="";data=data_buf;strcat(data,"*.*");func_ptr(data);}
void bad_sink(char * data){{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(data);}
char * bad_source(char * data){{size_t data_len=strlen(data);if(100-data_len > 1){fgets(data+data_len,(int)(100-data_len),stdin);data_len=strlen(data);if(data_len > 0){data[data_len-1]='\0';}}}return data;}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;data=goodG2B_source(data);{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);_spawnl(_P_WAIT,COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(&data);}
void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);_spawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(&data);}
void bad_sink(char * * data_ptr){char * data=*data_ptr;{char *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}void goodG2B(){char * data;char data_buf[100]="";data=data_buf;strcat(data,"*.*");goodG2B_sink(&data);}
void bad_sink(char * data){{FILE *pipe;pipe=POPEN(data,"wb");if(pipe!=NULL) PCLOSE(pipe);}}void goodG2B(){char * data;char data_buf[100]=FULL_COMMAND;data=data_buf;strcat(data,"*.*");goodG2B_sink(data);}
void bad_sink(wchar_t * data){EXECLP(COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");func_ptr(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;wcscat(data,L"*.*");goodG2B_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;_wsystem(data);}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;wcscat(data,L"*.*");goodG2B_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(&data);}
void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};_wspawnvp(_P_WAIT,COMMAND_INT,args);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(&data);}
void bad_sink(wchar_t * data){{wchar_t *args[]={COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL};EXECV(COMMAND_INT_PATH,args);}}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(data);}
void bad_sink(wchar_t * data){_wspawnlp(_P_WAIT,COMMAND_INT,COMMAND_INT,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(data);}
void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);EXECL(COMMAND_INT_PATH,COMMAND_INT_PATH,COMMAND_ARG1,COMMAND_ARG2,COMMAND_ARG3,NULL);}void goodG2B(){wchar_t * data;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");goodG2B_sink(&data);}
typedef struct _CWE78_OS_Command_Injection__wchar_t_fromFile_execv_67_struct_type{wchar_t * a;} CWE78_OS_Command_Injection__wchar_t_fromFile_execv_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");my_struct.a=data;goodG2B_sink(my_struct);}
void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];{FILE *pipe;pipe=POPEN(data,L"wb");if(pipe!=NULL) PCLOSE(pipe);}}void goodG2B(){wchar_t * data;wchar_t * data_array[5];wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;wcscat(data,L"*.*");data_array[2]=data;goodG2B_sink(data_array);}
void bad_sink(wchar_t * data){_wsystem(data);}void goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;wchar_t data_buf[100]=FULL_COMMAND;data=data_buf;wcscat(data,L"*.*");func_ptr(data);}
typedef struct _CWE78_OS_Command_Injection__wchar_t_fromFile_w32spawnlp_67_struct_type{wchar_t * a;} CWE78_OS_Command_Injection__wchar_t_fromFile_w32spawnlp_67_struct_type;void goodG2B(){wchar_t * data;struct_type my_struct;wchar_t data_buf[100]=L"";data=data_buf;wcscat(data,L"*.*");my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_char_snprintf_61{char * bad_source(char * data){data=new char[50];data[0]='\0'; return data;}char * goodG2B_source(char * data){data=new char[100];data[0]='\0'; return data;}} // close namespacevoid goodG2B(){char * data;data=NULL;data=goodG2B_source(data);{char src[100];memset(src,'C',100-1); src[100-1]='\0'; _snprintf(data,100,"%s",src);printLine(data);delete [] data;}}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_int_memcpy_65{void bad_sink(int * data){{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}void goodG2B_sink(int * data){{int src[100]={0}; memcpy(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}} // close namespacevoid goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;data=new int[100];func_ptr(data);}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_int_memmove_65{void bad_sink(int * data){{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}void goodG2B_sink(int * data){{int src[100]={0}; memmove(data,src,100*sizeof(int));printIntLine(data[0]);delete [] data;}}} // close namespacevoid goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;data=new int[100];func_ptr(data);}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_wchar_t_cpy_61{wchar_t * bad_source(wchar_t * data){data=new wchar_t[50];data[0]=L'\0'; return data;}wchar_t * goodG2B_source(wchar_t * data){data=new wchar_t[100];data[0]=L'\0'; return data;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=goodG2B_source(data);{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; wcscpy(data,src);printWLine(data);delete [] data;}}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_wchar_t_memcpy_61{wchar_t * bad_source(wchar_t * data){data=new wchar_t[50];data[0]=L'\0'; return data;}wchar_t * goodG2B_source(wchar_t * data){data=new wchar_t[100];data[0]=L'\0'; return data;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=goodG2B_source(data);{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memcpy(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_wchar_t_memmove_65{void bad_sink(wchar_t * data){{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}void goodG2B_sink(wchar_t * data){{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; memmove(data,src,100*sizeof(wchar_t));data[100-1]=L'\0'; printWLine(data);delete [] data;}}} // close namespacevoid goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=new wchar_t[100];data[0]=L'\0'; func_ptr(data);}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_dest_wchar_t_snprintf_51{void bad_sink(wchar_t * data){{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);delete [] data;}}void goodG2B_sink(wchar_t * data){{wchar_t src[100];wmemset(src,L'C',100-1); src[100-1]=L'\0'; _snwprintf(data,100,L"%s",src);printWLine(data);delete [] data;}}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];data[0]=L'\0'; goodG2B_sink(data);}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_loop_62{void bad_source(char * &data){memset(data,'A',100-1); data[100-1]='\0';}void goodG2B_source(char * &data){memset(data,'A',50-1); data[50-1]='\0';}} // close namespacevoid goodG2B(){char * data;data=new char[100];goodG2B_source(data);{char dest[50]="";size_t i,data_len;data_len=strlen(data);for(i=0; i < data_len; i++){dest[i]=data[i];}dest[50-1]='\0'; printLine(data);delete [] data;}}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_src_char_memcpy_61{char * bad_source(char * data){memset(data,'A',100-1); data[100-1]='\0'; return data;}char * goodG2B_source(char * data){memset(data,'A',50-1); data[50-1]='\0'; return data;}} // close namespacevoid goodG2B(){char * data;data=new char[100];data=goodG2B_source(data);{char dest[50]="";memcpy(dest,data,strlen(data)*sizeof(char));dest[50-1]='\0'; printLine(data);delete [] data;}}
namespace CWE122_Heap_Based_Buffer_Overflow__cpp_src_wchar_t_cat_64{void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);delete [] data;}}void goodG2B_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);{wchar_t dest[50]=L"";wcscat(dest,data);printWLine(data);delete [] data;}}} // close namespacevoid goodG2B(){wchar_t * data;data=new wchar_t[100];wmemset(data,L'A',50-1); data[50-1]=L'\0'; goodG2B_sink(&data);}
namespace CWE124_Buffer_Underwrite__new_char_memcpy_63{void bad_sink(char * * data_ptr){char * data=*data_ptr;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}void goodG2B_sink(char * * data_ptr){char * data=*data_ptr;{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}} // close namespacevoid goodG2B(){char * data;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}goodG2B_sink(&data);}
namespace CWE124_Buffer_Underwrite__new_char_memcpy_65{void bad_sink(char * data){{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}void goodG2B_sink(char * data){{char src[100];memset(src,'C',100-1); src[100-1]='\0'; memcpy(data,src,100*sizeof(char));data[100-1]='\0';printLine(data);}}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;{char * data_buf=new char[100];memset(data_buf,'A',100-1);data_buf[100-1]='\0';data=data_buf;}func_ptr(data);}
namespace CWE127_Buffer_Underread__new_wchar_t_memcpy_62{void bad_source(wchar_t * &data){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf-8;}}void goodG2B_source(wchar_t * &data){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1);data_buf[100-1]=L'\0';data=data_buf;}}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);{wchar_t dest[100];wmemset(dest,L'C',100-1); dest[100-1]=L'\0'; memcpy(dest,data,100*sizeof(wchar_t));dest[100-1]=L'\0';printWLine(dest);}}
namespace CWE401_Memory_Leak__new_array_char_63{void bad_sink(char * * data_ptr){char * data=*data_ptr;;}void goodG2B_sink(char * * data_ptr){char * data=*data_ptr;;}void goodB2G_sink(char * * data_ptr){char * data=*data_ptr;delete[] data;}} // close namespacevoid goodG2B(){char * data;data=NULL;{char data_goodbuf[100];data=data_goodbuf;strcpy(data,"A String");printLine(data);}goodG2B_sink(&data);}
namespace CWE401_Memory_Leak__new_array_int_64{void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);;}void goodG2B_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);;}void goodB2G_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete[] data;}} // close namespacevoid goodB2G(){int * data;data=NULL;data=new int[100];data[0]=5;printIntLine(data[0]);goodB2G_sink(&data);}
namespace CWE401_Memory_Leak__new_array_int_68{extern int * bad_data;extern int * goodG2B_data;extern int * goodB2G_data;void bad_sink(){int * data=bad_data;;}void goodG2B_sink(){int * data=goodG2B_data;;}void goodB2G_sink(){int * data=goodB2G_data;delete[] data;}} // close namespacevoid goodG2B(){int * data;data=NULL;{int data_goodbuf[100];data=data_goodbuf;data[0]=5;printIntLine(data[0]);}goodG2B_data=data;goodG2B_sink();}
namespace CWE401_Memory_Leak__new_array_long_long_66{void bad_sink(long long * data_array[]){long long * data=data_array[2];;}void goodG2B_sink(long long * data_array[]){long long * data=data_array[2];;}void goodB2G_sink(long long * data_array[]){long long * data=data_array[2];delete[] data;}} // close namespacevoid goodB2G(){long long * data;long long * data_array[5];data=NULL;data=new long long[100];data[0]=5L;printLongLongLine(data[0]);data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE401_Memory_Leak__new_array_twoints_63{void bad_sink(twoints * * data_ptr){twoints * data=*data_ptr;;}void goodG2B_sink(twoints * * data_ptr){twoints * data=*data_ptr;;}void goodB2G_sink(twoints * * data_ptr){twoints * data=*data_ptr;delete[] data;}} // close namespacevoid goodB2G(){twoints * data;data=NULL;data=new twoints[100];data[0].a=0;data[0].b=0;printStructLine(&data[0]);goodB2G_sink(&data);}
namespace CWE401_Memory_Leak__new_array_twoints_68{extern twoints * bad_data;extern twoints * goodG2B_data;extern twoints * goodB2G_data;void bad_sink(){twoints * data=bad_data;;}void goodG2B_sink(){twoints * data=goodG2B_data;;}void goodB2G_sink(){twoints * data=goodB2G_data;delete[] data;}} // close namespacevoid goodG2B(){twoints * data;data=NULL;{twoints data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printStructLine(&data[0]);}goodG2B_data=data;goodG2B_sink();}
namespace CWE401_Memory_Leak__new_array_twointsclass_51{void bad_sink(twointsclass * data){;}void goodG2B_sink(twointsclass * data){;}void goodB2G_sink(twointsclass * data){delete[] data;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;{twointsclass data_goodbuf[100];data=data_goodbuf;data[0].a=0;data[0].b=0;printIntLine(data[0].a);printIntLine(data[0].b);}goodG2B_sink(data);}
namespace CWE401_Memory_Leak__new_char_65{void bad_sink(char * data){;}void goodG2B_sink(char * data){;}void goodB2G_sink(char * data){delete data;}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;char data_good;data=&data_good;*data='A';printHexCharLine(*data);func_ptr(data);}
namespace CWE401_Memory_Leak__new_char_68{extern char * bad_data;extern char * goodG2B_data;extern char * goodB2G_data;void bad_sink(){char * data=bad_data;;}void goodG2B_sink(){char * data=goodG2B_data;;}void goodB2G_sink(){char * data=goodB2G_data;delete data;}} // close namespacevoid goodB2G(){char * data;data=NULL;data=new char;*data='A';printHexCharLine(*data);goodB2G_data=data;goodB2G_sink();}
namespace CWE401_Memory_Leak__new_int_63{void bad_sink(int * * data_ptr){int * data=*data_ptr;;}void goodG2B_sink(int * * data_ptr){int * data=*data_ptr;;}void goodB2G_sink(int * * data_ptr){int * data=*data_ptr;delete data;}} // close namespacevoid goodG2B(){int * data;data=NULL;int data_good;data=&data_good;*data=5;printIntLine(*data);goodG2B_sink(&data);}
namespace CWE401_Memory_Leak__new_long_long_61{long long * bad_source(long long * data){data=new long long;*data=5L;printLongLongLine(*data);return data;}long long * goodG2B_source(long long * data){long long data_good;data=&data_good;*data=5L;printLongLongLine(*data);return data;}long long * goodB2G_source(long long * data){data=new long long;*data=5L;printLongLongLine(*data);return data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=goodG2B_source(data);;}
namespace CWE401_Memory_Leak__new_long_long_65{void bad_sink(long long * data){;}void goodG2B_sink(long long * data){;}void goodB2G_sink(long long * data){delete data;}} // close namespacevoid goodB2G(){long long * data;void(*func_ptr)(long long *)=goodB2G_sink;data=NULL;data=new long long;*data=5L;printLongLongLine(*data);func_ptr(data);}
namespace CWE401_Memory_Leak__new_struct_twoints_65{void bad_sink(struct _twoints * data){;}void goodG2B_sink(struct _twoints * data){;}void goodB2G_sink(struct _twoints * data){delete data;}} // close namespacevoid goodB2G(){struct _twoints * data;void(*func_ptr)(struct _twoints *)=goodB2G_sink;data=NULL;data=new struct _twoints;data->a=0;data->b=0;printStructLine((twoints *)data);func_ptr(data);}
namespace CWE401_Memory_Leak__new_struct_twoints_67{typedef struct _struct_type{struct _twoints * a;} struct_type;void bad_sink(struct_type my_struct){struct _twoints * data=my_struct.a;;}void goodG2B_sink(struct_type my_struct){struct _twoints * data=my_struct.a;;}void goodB2G_sink(struct_type my_struct){struct _twoints * data=my_struct.a;delete data;}} // close namespacevoid goodB2G(){struct _twoints * data;struct_type my_struct;data=NULL;data=new struct _twoints;data->a=0;data->b=0;printStructLine((twoints *)data);my_struct.a=data;goodB2G_sink(my_struct);}
namespace CWE401_Memory_Leak__new_twointsclass_51{void bad_sink(twointsclass * data){;}void goodG2B_sink(twointsclass * data){;}void goodB2G_sink(twointsclass * data){delete data;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;twointsclass data_good;data=&data_good;data->a=0;data->b=0;printIntLine(data->a);printIntLine(data->b);goodG2B_sink(data);}
namespace CWE401_Memory_Leak__new_wchar_t_51{void bad_sink(wchar_t * data){;}void goodG2B_sink(wchar_t * data){;}void goodB2G_sink(wchar_t * data){delete data;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;wchar_t data_good;data=&data_good;*data=L'A';printHexCharLine((char)*data);goodG2B_sink(data);}
namespace CWE415_Double_Free__new_delete_array_char_51{void bad_sink(char * data){delete [] data;}void goodG2B_sink(char * data){delete [] data;}void goodB2G_sink(char * data){;}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink(data);}
namespace CWE415_Double_Free__new_delete_array_char_64{void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);;}} // close namespacevoid goodB2G(){char * data;data=NULL;data=new char[100];delete [] data;goodB2G_sink(&data);}
namespace CWE415_Double_Free__new_delete_array_class_64{void bad_sink(void * void_data_ptr){twointsclass * * data_ptr=(twointsclass * *)void_data_ptr;twointsclass * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){twointsclass * * data_ptr=(twointsclass * *)void_data_ptr;twointsclass * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){twointsclass * * data_ptr=(twointsclass * *)void_data_ptr;twointsclass * data=(*data_ptr);;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];goodG2B_sink(&data);}
namespace CWE415_Double_Free__new_delete_array_class_66{void bad_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete [] data;}void goodG2B_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete [] data;}void goodB2G_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];;}} // close namespacevoid goodB2G(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=new twointsclass[100];delete [] data;data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE415_Double_Free__new_delete_array_int_61{int * bad_source(int * data){data=new int[100];delete [] data;return data;}int * goodG2B_source(int * data){data=new int[100];return data;}int * goodB2G_source(int * data){data=new int[100];delete [] data;return data;}} // close namespacevoid goodB2G(){int * data;data=NULL;data=goodB2G_source(data);;}
namespace CWE415_Double_Free__new_delete_array_long_long_62{void bad_source(long long * &data){data=new long long[100];delete [] data;}void goodG2B_source(long long * &data){data=new long long[100];}void goodB2G_source(long long * &data){data=new long long[100];delete [] data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;goodG2B_source(data);delete [] data;}
namespace CWE415_Double_Free__new_delete_array_struct_51{void bad_sink(twoints * data){delete [] data;}void goodG2B_sink(twoints * data){delete [] data;}void goodB2G_sink(twoints * data){;}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_sink(data);}
namespace CWE415_Double_Free__new_delete_array_struct_65{void bad_sink(twoints * data){delete [] data;}void goodG2B_sink(twoints * data){delete [] data;}void goodB2G_sink(twoints * data){;}} // close namespacevoid goodB2G(){twoints * data;void(*func_ptr)(twoints *)=goodB2G_sink;data=NULL;data=new twoints[100];delete [] data;func_ptr(data);}
namespace CWE415_Double_Free__new_delete_array_struct_67{typedef struct _struct_type{twoints * a;} struct_type;void bad_sink(struct_type my_struct){twoints * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){twoints * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){twoints * data=my_struct.a;;}} // close namespacevoid goodG2B(){twoints * data;struct_type my_struct;data=NULL;data=new twoints[100];my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE415_Double_Free__new_delete_class_66{void bad_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodG2B_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodB2G_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];;}} // close namespacevoid goodB2G(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=new twointsclass;delete data;data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE415_Double_Free__new_delete_class_68{extern twointsclass * bad_data;extern twointsclass * goodG2B_data;extern twointsclass * goodB2G_data;void bad_sink(){twointsclass * data=bad_data;delete data;}void goodG2B_sink(){twointsclass * data=goodG2B_data;delete data;}void goodB2G_sink(){twointsclass * data=goodB2G_data;;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=new twointsclass;goodG2B_data=data;goodG2B_sink();}
namespace CWE415_Double_Free__new_delete_int_61{int * bad_source(int * data){data=new int;delete data;return data;}int * goodG2B_source(int * data){data=new int;return data;}int * goodB2G_source(int * data){data=new int;delete data;return data;}} // close namespacevoid goodG2B(){int * data;data=NULL;data=goodG2B_source(data);delete data;}
namespace CWE415_Double_Free__new_delete_int_61{int * bad_source(int * data){data=new int;delete data;return data;}int * goodG2B_source(int * data){data=new int;return data;}int * goodB2G_source(int * data){data=new int;delete data;return data;}} // close namespacevoid goodB2G(){int * data;data=NULL;data=goodB2G_source(data);;}
namespace CWE415_Double_Free__new_delete_long_long_68{extern long long * bad_data;extern long long * goodG2B_data;extern long long * goodB2G_data;void bad_sink(){long long * data=bad_data;delete data;}void goodG2B_sink(){long long * data=goodG2B_data;delete data;}void goodB2G_sink(){long long * data=goodB2G_data;;}} // close namespacevoid goodB2G(){long long * data;data=NULL;data=new long long;delete data;goodB2G_data=data;goodB2G_sink();}
namespace CWE415_Double_Free__new_delete_wchar_t_51{void bad_sink(wchar_t * data){delete data;}void goodG2B_sink(wchar_t * data){delete data;}void goodB2G_sink(wchar_t * data){;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t;goodG2B_sink(data);}
namespace CWE415_Double_Free__new_delete_wchar_t_67{typedef struct _struct_type{wchar_t * a;} struct_type;void bad_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete data;}void goodG2B_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete data;}void goodB2G_sink(struct_type my_struct){wchar_t * data=my_struct.a;;}} // close namespacevoid goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t;my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE416_Use_After_Free__new_delete_array_char_65{void bad_sink(char * data){printLine(data);}void goodG2B_sink(char * data){printLine(data);}void goodB2G_sink(char * data){;}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=new char[100];memset(data,'A',100-1);data[100-1]='\0';func_ptr(data);}
namespace CWE416_Use_After_Free__new_delete_array_class_51{void bad_sink(twointsclass * data){printIntLine(data[0].a);}void goodG2B_sink(twointsclass * data){printIntLine(data[0].a);}void goodB2G_sink(twointsclass * data){;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}goodG2B_sink(data);}
namespace CWE416_Use_After_Free__new_delete_array_class_63{void bad_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;printIntLine(data[0].a);}void goodG2B_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;printIntLine(data[0].a);}void goodB2G_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;;}} // close namespacevoid goodB2G(){twointsclass * data;data=NULL;data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;goodB2G_sink(&data);}
namespace CWE416_Use_After_Free__new_delete_array_class_68{extern twointsclass * bad_data;extern twointsclass * goodG2B_data;extern twointsclass * goodB2G_data;void bad_sink(){twointsclass * data=bad_data;printIntLine(data[0].a);}void goodG2B_sink(){twointsclass * data=goodG2B_data;printIntLine(data[0].a);}void goodB2G_sink(){twointsclass * data=goodB2G_data;;}} // close namespacevoid goodB2G(){twointsclass * data;data=NULL;data=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}delete [] data;goodB2G_data=data;goodB2G_sink();}
namespace CWE416_Use_After_Free__new_delete_array_int_66{void bad_sink(int * data_array[]){int * data=data_array[2];printIntLine(data[0]);}void goodG2B_sink(int * data_array[]){int * data=data_array[2];printIntLine(data[0]);}void goodB2G_sink(int * data_array[]){int * data=data_array[2];;}} // close namespacevoid goodG2B(){int * data;int * data_array[5];data=NULL;data=new int[100];{size_t i;for(i=0; i < 100; i++){data[i]=5;}}data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE416_Use_After_Free__new_delete_array_struct_51{void bad_sink(twoints * data){printStructLine(&data[0]);}void goodG2B_sink(twoints * data){printStructLine(&data[0]);}void goodB2G_sink(twoints * data){;}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints[100];{size_t i;for(i=0; i < 100; i++){data[i].a=1;data[i].b=2;}}goodG2B_sink(data);}
namespace CWE416_Use_After_Free__new_delete_array_wchar_t_51{void bad_sink(wchar_t * data){printWLine(data);}void goodG2B_sink(wchar_t * data){printWLine(data);}void goodB2G_sink(wchar_t * data){;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];wmemset(data,L'A',100-1);data[100-1]=L'\0';goodG2B_sink(data);}
namespace CWE416_Use_After_Free__new_delete_class_62{void bad_source(twointsclass * &data){data=new twointsclass;data->a=1;data->b=2;delete data;}void goodG2B_source(twointsclass * &data){data=new twointsclass;data->a=1;data->b=2;}void goodB2G_source(twointsclass * &data){data=new twointsclass;data->a=1;data->b=2;delete data;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;goodG2B_source(data);printIntLine(data->a);}
namespace CWE416_Use_After_Free__new_delete_long_long_61{long long * bad_source(long long * data){data=new long long;*data=5L;delete data;return data;}long long * goodG2B_source(long long * data){data=new long long;*data=5L;return data;}long long * goodB2G_source(long long * data){data=new long long;*data=5L;delete data;return data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=goodG2B_source(data);printLongLongLine(*data);}
namespace CWE416_Use_After_Free__new_delete_long_long_61{long long * bad_source(long long * data){data=new long long;*data=5L;delete data;return data;}long long * goodG2B_source(long long * data){data=new long long;*data=5L;return data;}long long * goodB2G_source(long long * data){data=new long long;*data=5L;delete data;return data;}} // close namespacevoid goodB2G(){long long * data;data=NULL;data=goodB2G_source(data);;}
namespace CWE416_Use_After_Free__new_delete_long_long_66{void bad_sink(long long * data_array[]){long long * data=data_array[2];printLongLongLine(*data);}void goodG2B_sink(long long * data_array[]){long long * data=data_array[2];printLongLongLine(*data);}void goodB2G_sink(long long * data_array[]){long long * data=data_array[2];;}} // close namespacevoid goodG2B(){long long * data;long long * data_array[5];data=NULL;data=new long long;*data=5L;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE416_Use_After_Free__new_delete_struct_67{typedef struct _struct_type{twoints * a;} struct_type;void bad_sink(struct_type my_struct){twoints * data=my_struct.a;printStructLine(data);}void goodG2B_sink(struct_type my_struct){twoints * data=my_struct.a;printStructLine(data);}void goodB2G_sink(struct_type my_struct){twoints * data=my_struct.a;;}} // close namespacevoid goodG2B(){twoints * data;struct_type my_struct;data=NULL;data=new twoints;data->a=1;data->b=2;my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_char_alloca_66{void bad_sink(char * data_array[]){char * data=data_array[2];printLine(data);delete [] data;}void goodG2B_sink(char * data_array[]){char * data=data_array[2];printLine(data);delete [] data;}} // close namespacevoid goodG2B(){char * data;char * data_array[5];data=NULL; {char * data_buf=new char[100];memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_char_static_67{typedef struct _struct_type{char * a;} struct_type;void bad_sink(struct_type my_struct){char * data=my_struct.a;printLine(data);delete [] data;}void goodG2B_sink(struct_type my_struct){char * data=my_struct.a;printLine(data);delete [] data;}} // close namespacevoid goodG2B(){char * data;struct_type my_struct;data=NULL; {char * data_buf=new char[100];memset(data_buf,'A',100-1); data_buf[100-1]='\0'; data=data_buf;}my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_class_declare_61{twointsclass * bad_source(twointsclass * data){{twointsclass data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}return data;}twointsclass * goodG2B_source(twointsclass * data){{twointsclass * data_buf=new twointsclass[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}return data;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL; data=goodG2B_source(data);printIntLine(data[0].a);delete [] data;}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_int_declare_66{void bad_sink(int * data_array[]){int * data=data_array[2];printIntLine(data[0]);delete [] data;}void goodG2B_sink(int * data_array[]){int * data=data_array[2];printIntLine(data[0]);delete [] data;}} // close namespacevoid goodG2B(){int * data;int * data_array[5];data=NULL; {int * data_buf=new int[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5;}}data=data_buf;}data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_long_long_declare_61{long long * bad_source(long long * data){{long long data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}return data;}long long * goodG2B_source(long long * data){{long long * data_buf=new long long[100];{size_t i;for(i=0; i < 100; i++){data_buf[i]=5L;}}data=data_buf;}return data;}} // close namespacevoid goodG2B(){long long * data;data=NULL; data=goodG2B_source(data);printLongLongLine(data[0]);delete [] data;}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_struct_static_62{void bad_source(twoints * &data){{static twoints data_buf[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}void goodG2B_source(twoints * &data){{twoints * data_buf=new twoints[100];{size_t i;for(i=0; i < 100; i++){data_buf[i].a=1;data_buf[i].b=1;}}data=data_buf;}}} // close namespacevoid goodG2B(){twoints * data;data=NULL; goodG2B_source(data);printStructLine(&data[0]);delete [] data;}
namespace CWE590_Free_Of_Invalid_Pointer_Not_On_The_Heap__delete_array_wchar_t_static_61{wchar_t * bad_source(wchar_t * data){{static wchar_t data_buf[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}return data;}wchar_t * goodG2B_source(wchar_t * data){{wchar_t * data_buf=new wchar_t[100];wmemset(data_buf,L'A',100-1); data_buf[100-1]=L'\0'; data=data_buf;}return data;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL; data=goodG2B_source(data);printWLine(data);delete [] data;}
namespace CWE680_Integer_Overflow_To_Buffer_Overflow__new_fixed_66{void bad_sink(int data_array[]){int data=data_array[2];{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}void goodG2B_sink(int data_array[]){int data=data_array[2];{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}} // close namespacevoid goodG2B(){int data;int data_array[5];data=-1;data=20;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE680_Integer_Overflow_To_Buffer_Overflow__new_fscanf_66{void bad_sink(int data_array[]){int data=data_array[2];{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}void goodG2B_sink(int data_array[]){int data=data_array[2];{size_t a,i;int *b;a=data * sizeof(int); b=(int*)new char[a];for(i=0; i <(size_t)data; i++){b[i]=0;}printIntLine(b[0]);delete [] b;}}} // close namespacevoid goodG2B(){int data;int data_array[5];data=-1;data=20;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_char_calloc_64{void bad_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){char * * data_ptr=(char * *)void_data_ptr;char * data=(*data_ptr);free(data);}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_char_calloc_65{void bad_sink(char * data){delete [] data;}void goodG2B_sink(char * data){delete [] data;}void goodB2G_sink(char * data){free(data);}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=new char[100];func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_char_calloc_66{void bad_sink(char * data_array[]){char * data=data_array[2];delete [] data;}void goodG2B_sink(char * data_array[]){char * data=data_array[2];delete [] data;}void goodB2G_sink(char * data_array[]){char * data=data_array[2];free(data);}} // close namespacevoid goodB2G(){char * data;char * data_array[5];data=NULL;data=(char *)calloc(100,sizeof(char));data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_char_malloc_63{void bad_sink(char * * data_ptr){char * data=*data_ptr;delete [] data;}void goodG2B_sink(char * * data_ptr){char * data=*data_ptr;delete [] data;}void goodB2G_sink(char * * data_ptr){char * data=*data_ptr;free(data);}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_char_malloc_68{extern char * bad_data;extern char * goodG2B_data;extern char * goodB2G_data;void bad_sink(){char * data=bad_data;delete [] data;}void goodG2B_sink(){char * data=goodG2B_data;delete [] data;}void goodB2G_sink(){char * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_class_calloc_62{void bad_source(twointsclass * &data){data=(twointsclass *)calloc(100,sizeof(twointsclass));}void goodG2B_source(twointsclass * &data){data=new twointsclass[100];}void goodB2G_source(twointsclass * &data){data=(twointsclass *)calloc(100,sizeof(twointsclass));}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;goodG2B_source(data);delete [] data;}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_class_calloc_67{typedef struct _struct_type{twointsclass * a;} struct_type;void bad_sink(struct_type my_struct){twointsclass * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){twointsclass * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){twointsclass * data=my_struct.a;free(data);}} // close namespacevoid goodB2G(){twointsclass * data;struct_type my_struct;data=NULL;data=(twointsclass *)calloc(100,sizeof(twointsclass));my_struct.a=data;goodB2G_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_class_malloc_63{void bad_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;delete [] data;}void goodG2B_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;delete [] data;}void goodB2G_sink(twointsclass * * data_ptr){twointsclass * data=*data_ptr;free(data);}} // close namespacevoid goodB2G(){twointsclass * data;data=NULL;data=(twointsclass *)malloc(100*sizeof(twointsclass));goodB2G_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_class_malloc_68{extern twointsclass * bad_data;extern twointsclass * goodG2B_data;extern twointsclass * goodB2G_data;void bad_sink(){twointsclass * data=bad_data;delete [] data;}void goodG2B_sink(){twointsclass * data=goodG2B_data;delete [] data;}void goodB2G_sink(){twointsclass * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=new twointsclass[100];goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_int_calloc_65{void bad_sink(int * data){delete [] data;}void goodG2B_sink(int * data){delete [] data;}void goodB2G_sink(int * data){free(data);}} // close namespacevoid goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;data=new int[100];func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_int_malloc_64{void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);free(data);}} // close namespacevoid goodG2B(){int * data;data=NULL;data=new int[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_int_malloc_67{typedef struct _struct_type{int * a;} struct_type;void bad_sink(struct_type my_struct){int * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){int * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){int * data=my_struct.a;free(data);}} // close namespacevoid goodB2G(){int * data;struct_type my_struct;data=NULL;data=(int *)malloc(100*sizeof(int));my_struct.a=data;goodB2G_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_int_realloc_64{void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);free(data);}} // close namespacevoid goodG2B(){int * data;data=NULL;data=new int[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_long_long_calloc_66{void bad_sink(long long * data_array[]){long long * data=data_array[2];delete [] data;}void goodG2B_sink(long long * data_array[]){long long * data=data_array[2];delete [] data;}void goodB2G_sink(long long * data_array[]){long long * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){long long * data;long long * data_array[5];data=NULL;data=new long long[100];data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_long_long_calloc_67{typedef struct _struct_type{long long * a;} struct_type;void bad_sink(struct_type my_struct){long long * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){long long * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){long long * data=my_struct.a;free(data);}} // close namespacevoid goodG2B(){long long * data;struct_type my_struct;data=NULL;data=new long long[100];my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_long_long_malloc_51{void bad_sink(long long * data){delete [] data;}void goodG2B_sink(long long * data){delete [] data;}void goodB2G_sink(long long * data){free(data);}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_sink(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_struct_calloc_65{void bad_sink(twoints * data){delete [] data;}void goodG2B_sink(twoints * data){delete [] data;}void goodB2G_sink(twoints * data){free(data);}} // close namespacevoid goodG2B(){twoints * data;void(*func_ptr)(twoints *)=goodG2B_sink;data=NULL;data=new twoints[100];func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_struct_calloc_68{extern twoints * bad_data;extern twoints * goodG2B_data;extern twoints * goodB2G_data;void bad_sink(){twoints * data=bad_data;delete [] data;}void goodG2B_sink(){twoints * data=goodG2B_data;delete [] data;}void goodB2G_sink(){twoints * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_struct_calloc_68{extern twoints * bad_data;extern twoints * goodG2B_data;extern twoints * goodB2G_data;void bad_sink(){twoints * data=bad_data;delete [] data;}void goodG2B_sink(){twoints * data=goodG2B_data;delete [] data;}void goodB2G_sink(){twoints * data=goodB2G_data;free(data);}} // close namespacevoid goodB2G(){twoints * data;data=NULL;data=(twoints *)calloc(100,sizeof(twoints));goodB2G_data=data;goodB2G_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_struct_realloc_62{void bad_source(twoints * &data){data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));}void goodG2B_source(twoints * &data){data=new twoints[100];}void goodB2G_source(twoints * &data){data=NULL;data=(twoints *)realloc(data,100*sizeof(twoints));}} // close namespacevoid goodG2B(){twoints * data;data=NULL;goodG2B_source(data);delete [] data;}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_wchar_t_realloc_66{void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete [] data;}void goodG2B_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete [] data;}void goodB2G_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=new wchar_t[100];data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_array_wchar_t_realloc_67{typedef struct _struct_type{wchar_t * a;} struct_type;void bad_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){wchar_t * data=my_struct.a;free(data);}} // close namespacevoid goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t[100];my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_char_calloc_62{void bad_source(char * &data){data=(char *)calloc(100,sizeof(char));}void goodG2B_source(char * &data){data=new char;}void goodB2G_source(char * &data){data=(char *)calloc(100,sizeof(char));}} // close namespacevoid goodG2B(){char * data;data=NULL;goodG2B_source(data);delete data;}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_char_malloc_65{void bad_sink(char * data){delete data;}void goodG2B_sink(char * data){delete data;}void goodB2G_sink(char * data){free(data);}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=new char;func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_char_realloc_65{void bad_sink(char * data){delete data;}void goodG2B_sink(char * data){delete data;}void goodB2G_sink(char * data){free(data);}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=new char;func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_char_realloc_68{extern char * bad_data;extern char * goodG2B_data;extern char * goodB2G_data;void bad_sink(){char * data=bad_data;delete data;}void goodG2B_sink(){char * data=goodG2B_data;delete data;}void goodB2G_sink(){char * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char;goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_class_calloc_66{void bad_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodG2B_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodB2G_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];free(data);}} // close namespacevoid goodB2G(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=(twointsclass *)calloc(100,sizeof(twointsclass));data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_class_calloc_68{extern twointsclass * bad_data;extern twointsclass * goodG2B_data;extern twointsclass * goodB2G_data;void bad_sink(){twointsclass * data=bad_data;delete data;}void goodG2B_sink(){twointsclass * data=goodG2B_data;delete data;}void goodB2G_sink(){twointsclass * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=new twointsclass;goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_class_malloc_66{void bad_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodG2B_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];delete data;}void goodB2G_sink(twointsclass * data_array[]){twointsclass * data=data_array[2];free(data);}} // close namespacevoid goodB2G(){twointsclass * data;twointsclass * data_array[5];data=NULL;data=(twointsclass *)malloc(100*sizeof(twointsclass));data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_int_calloc_66{void bad_sink(int * data_array[]){int * data=data_array[2];delete data;}void goodG2B_sink(int * data_array[]){int * data=data_array[2];delete data;}void goodB2G_sink(int * data_array[]){int * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){int * data;int * data_array[5];data=NULL;data=new int;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_int_realloc_65{void bad_sink(int * data){delete data;}void goodG2B_sink(int * data){delete data;}void goodB2G_sink(int * data){free(data);}} // close namespacevoid goodG2B(){int * data;void(*func_ptr)(int *)=goodG2B_sink;data=NULL;data=new int;func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_int_realloc_66{void bad_sink(int * data_array[]){int * data=data_array[2];delete data;}void goodG2B_sink(int * data_array[]){int * data=data_array[2];delete data;}void goodB2G_sink(int * data_array[]){int * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){int * data;int * data_array[5];data=NULL;data=new int;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_int_realloc_67{typedef struct _struct_type{int * a;} struct_type;void bad_sink(struct_type my_struct){int * data=my_struct.a;delete data;}void goodG2B_sink(struct_type my_struct){int * data=my_struct.a;delete data;}void goodB2G_sink(struct_type my_struct){int * data=my_struct.a;free(data);}} // close namespacevoid goodG2B(){int * data;struct_type my_struct;data=NULL;data=new int;my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_long_long_malloc_51{void bad_sink(long long * data){delete data;}void goodG2B_sink(long long * data){delete data;}void goodB2G_sink(long long * data){free(data);}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_long_long_realloc_51{void bad_sink(long long * data){delete data;}void goodG2B_sink(long long * data){delete data;}void goodB2G_sink(long long * data){free(data);}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=new long long;goodG2B_sink(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_long_long_realloc_62{void bad_source(long long * &data){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}void goodG2B_source(long long * &data){data=new long long;}void goodB2G_source(long long * &data){data=NULL;data=(long long *)realloc(data,100*sizeof(long long));}} // close namespacevoid goodG2B(){long long * data;data=NULL;goodG2B_source(data);delete data;}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_long_long_realloc_68{extern long long * bad_data;extern long long * goodG2B_data;extern long long * goodB2G_data;void bad_sink(){long long * data=bad_data;delete data;}void goodG2B_sink(){long long * data=goodG2B_data;delete data;}void goodB2G_sink(){long long * data=goodB2G_data;free(data);}} // close namespacevoid goodB2G(){long long * data;data=NULL;data=NULL;data=(long long *)realloc(data,100*sizeof(long long));goodB2G_data=data;goodB2G_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_struct_calloc_62{void bad_source(twoints * &data){data=(twoints *)calloc(100,sizeof(twoints));}void goodG2B_source(twoints * &data){data=new twoints;}void goodB2G_source(twoints * &data){data=(twoints *)calloc(100,sizeof(twoints));}} // close namespacevoid goodB2G(){twoints * data;data=NULL;goodB2G_source(data);free(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_struct_calloc_66{void bad_sink(twoints * data_array[]){twoints * data=data_array[2];delete data;}void goodG2B_sink(twoints * data_array[]){twoints * data=data_array[2];delete data;}void goodB2G_sink(twoints * data_array[]){twoints * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){twoints * data;twoints * data_array[5];data=NULL;data=new twoints;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_struct_malloc_63{void bad_sink(twoints * * data_ptr){twoints * data=*data_ptr;delete data;}void goodG2B_sink(twoints * * data_ptr){twoints * data=*data_ptr;delete data;}void goodB2G_sink(twoints * * data_ptr){twoints * data=*data_ptr;free(data);}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints;goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_struct_realloc_64{void bad_sink(void * void_data_ptr){twoints * * data_ptr=(twoints * *)void_data_ptr;twoints * data=(*data_ptr);delete data;}void goodG2B_sink(void * void_data_ptr){twoints * * data_ptr=(twoints * *)void_data_ptr;twoints * data=(*data_ptr);delete data;}void goodB2G_sink(void * void_data_ptr){twoints * * data_ptr=(twoints * *)void_data_ptr;twoints * data=(*data_ptr);free(data);}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints;goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_calloc_64{void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete data;}void goodG2B_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete data;}void goodB2G_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);free(data);}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t;goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_calloc_65{void bad_sink(wchar_t * data){delete data;}void goodG2B_sink(wchar_t * data){delete data;}void goodB2G_sink(wchar_t * data){free(data);}} // close namespacevoid goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=new wchar_t;func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_malloc_68{extern wchar_t * bad_data;extern wchar_t * goodG2B_data;extern wchar_t * goodB2G_data;void bad_sink(){wchar_t * data=bad_data;delete data;}void goodG2B_sink(){wchar_t * data=goodG2B_data;delete data;}void goodB2G_sink(){wchar_t * data=goodB2G_data;free(data);}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t;goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_realloc_66{void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete data;}void goodG2B_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete data;}void goodB2G_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];free(data);}} // close namespacevoid goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=new wchar_t;data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_realloc_66{void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete data;}void goodG2B_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete data;}void goodB2G_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];free(data);}} // close namespacevoid goodB2G(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=NULL;data=(wchar_t *)realloc(data,100*sizeof(wchar_t));data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__delete_wchar_t_realloc_67{typedef struct _struct_type{wchar_t * a;} struct_type;void bad_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete data;}void goodG2B_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete data;}void goodB2G_sink(struct_type my_struct){wchar_t * data=my_struct.a;free(data);}} // close namespacevoid goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=new wchar_t;my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_class_61{twointsclass * bad_source(twointsclass * data){data=new twointsclass[100];return data;}twointsclass * goodG2B_source(twointsclass * data){data=new twointsclass;return data;}twointsclass * goodB2G_source(twointsclass * data){data=new twointsclass[100];return data;}} // close namespacevoid goodG2B(){twointsclass * data;data=NULL;data=goodG2B_source(data);delete data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_int_61{int * bad_source(int * data){data=new int[100];return data;}int * goodG2B_source(int * data){data=new int;return data;}int * goodB2G_source(int * data){data=new int[100];return data;}} // close namespacevoid goodG2B(){int * data;data=NULL;data=goodG2B_source(data);delete data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_int_64{void bad_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete data;}void goodG2B_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete data;}void goodB2G_sink(void * void_data_ptr){int * * data_ptr=(int * *)void_data_ptr;int * data=(*data_ptr);delete [] data;}} // close namespacevoid goodB2G(){int * data;data=NULL;data=new int[100];goodB2G_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_long_long_62{void bad_source(long long * &data){data=new long long[100];}void goodG2B_source(long long * &data){data=new long long;}void goodB2G_source(long long * &data){data=new long long[100];}} // close namespacevoid goodB2G(){long long * data;data=NULL;goodB2G_source(data);delete [] data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_long_long_66{void bad_sink(long long * data_array[]){long long * data=data_array[2];delete data;}void goodG2B_sink(long long * data_array[]){long long * data=data_array[2];delete data;}void goodB2G_sink(long long * data_array[]){long long * data=data_array[2];delete [] data;}} // close namespacevoid goodB2G(){long long * data;long long * data_array[5];data=NULL;data=new long long[100];data_array[2]=data;goodB2G_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_delete_wchar_t_64{void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete data;}void goodG2B_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete data;}void goodB2G_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete [] data;}} // close namespacevoid goodB2G(){wchar_t * data;data=NULL;data=new wchar_t[100];goodB2G_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_long_long_61{long long * bad_source(long long * data){data=new long long[100];return data;}long long * goodG2B_source(long long * data){data=(long long *)malloc(100*sizeof(long long));return data;}long long * goodB2G_source(long long * data){data=new long long[100];return data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=goodG2B_source(data);free(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_long_long_67{typedef struct _struct_type{long long * a;} struct_type;void bad_sink(struct_type my_struct){long long * data=my_struct.a;free(data);}void goodG2B_sink(struct_type my_struct){long long * data=my_struct.a;free(data);}void goodB2G_sink(struct_type my_struct){long long * data=my_struct.a;delete [] data;}} // close namespacevoid goodB2G(){long long * data;struct_type my_struct;data=NULL;data=new long long[100];my_struct.a=data;goodB2G_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_struct_65{void bad_sink(twoints * data){free(data);}void goodG2B_sink(twoints * data){free(data);}void goodB2G_sink(twoints * data){delete [] data;}} // close namespacevoid goodG2B(){twoints * data;void(*func_ptr)(twoints *)=goodG2B_sink;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_struct_67{typedef struct _struct_type{twoints * a;} struct_type;void bad_sink(struct_type my_struct){twoints * data=my_struct.a;free(data);}void goodG2B_sink(struct_type my_struct){twoints * data=my_struct.a;free(data);}void goodB2G_sink(struct_type my_struct){twoints * data=my_struct.a;delete [] data;}} // close namespacevoid goodB2G(){twoints * data;struct_type my_struct;data=NULL;data=new twoints[100];my_struct.a=data;goodB2G_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_wchar_t_65{void bad_sink(wchar_t * data){free(data);}void goodG2B_sink(wchar_t * data){free(data);}void goodB2G_sink(wchar_t * data){delete [] data;}} // close namespacevoid goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_array_free_wchar_t_66{void bad_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];free(data);}void goodG2B_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];free(data);}void goodB2G_sink(wchar_t * data_array[]){wchar_t * data=data_array[2];delete [] data;}} // close namespacevoid goodG2B(){wchar_t * data;wchar_t * data_array[5];data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_char_51{void bad_sink(char * data){delete [] data;}void goodG2B_sink(char * data){delete [] data;}void goodB2G_sink(char * data){delete data;}} // close namespacevoid goodG2B(){char * data;data=NULL;data=new char[100];goodG2B_sink(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_char_62{void bad_source(char * &data){data=new char;}void goodG2B_source(char * &data){data=new char[100];}void goodB2G_source(char * &data){data=new char;}} // close namespacevoid goodG2B(){char * data;data=NULL;goodG2B_source(data);delete [] data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_int_51{void bad_sink(int * data){delete [] data;}void goodG2B_sink(int * data){delete [] data;}void goodB2G_sink(int * data){delete data;}} // close namespacevoid goodB2G(){int * data;data=NULL;data=new int;goodB2G_sink(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_int_61{int * bad_source(int * data){data=new int;return data;}int * goodG2B_source(int * data){data=new int[100];return data;}int * goodB2G_source(int * data){data=new int;return data;}} // close namespacevoid goodG2B(){int * data;data=NULL;data=goodG2B_source(data);delete [] data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_long_long_64{void bad_sink(void * void_data_ptr){long long * * data_ptr=(long long * *)void_data_ptr;long long * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){long long * * data_ptr=(long long * *)void_data_ptr;long long * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){long long * * data_ptr=(long long * *)void_data_ptr;long long * data=(*data_ptr);delete data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=new long long[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_long_long_67{typedef struct _struct_type{long long * a;} struct_type;void bad_sink(struct_type my_struct){long long * data=my_struct.a;delete [] data;}void goodG2B_sink(struct_type my_struct){long long * data=my_struct.a;delete [] data;}void goodB2G_sink(struct_type my_struct){long long * data=my_struct.a;delete data;}} // close namespacevoid goodG2B(){long long * data;struct_type my_struct;data=NULL;data=new long long[100];my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_struct_68{extern twoints * bad_data;extern twoints * goodG2B_data;extern twoints * goodB2G_data;void bad_sink(){twoints * data=bad_data;delete [] data;}void goodG2B_sink(){twoints * data=goodG2B_data;delete [] data;}void goodB2G_sink(){twoints * data=goodB2G_data;delete data;}} // close namespacevoid goodG2B(){twoints * data;data=NULL;data=new twoints[100];goodG2B_data=data;goodG2B_sink();}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_wchar_t_64{void bad_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete [] data;}void goodG2B_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete [] data;}void goodB2G_sink(void * void_data_ptr){wchar_t * * data_ptr=(wchar_t * *)void_data_ptr;wchar_t * data=(*data_ptr);delete data;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t[100];goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_delete_array_wchar_t_65{void bad_sink(wchar_t * data){delete [] data;}void goodG2B_sink(wchar_t * data){delete [] data;}void goodB2G_sink(wchar_t * data){delete data;}} // close namespacevoid goodG2B(){wchar_t * data;void(*func_ptr)(wchar_t *)=goodG2B_sink;data=NULL;data=new wchar_t[100];func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_char_65{void bad_sink(char * data){free(data);}void goodG2B_sink(char * data){free(data);}void goodB2G_sink(char * data){delete data;}} // close namespacevoid goodG2B(){char * data;void(*func_ptr)(char *)=goodG2B_sink;data=NULL;data=(char *)malloc(100*sizeof(char));func_ptr(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_int_61{int * bad_source(int * data){data=new int;return data;}int * goodG2B_source(int * data){data=(int *)malloc(100*sizeof(int));return data;}int * goodB2G_source(int * data){data=new int;return data;}} // close namespacevoid goodG2B(){int * data;data=NULL;data=goodG2B_source(data);free(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_long_long_63{void bad_sink(long long * * data_ptr){long long * data=*data_ptr;free(data);}void goodG2B_sink(long long * * data_ptr){long long * data=*data_ptr;free(data);}void goodB2G_sink(long long * * data_ptr){long long * data=*data_ptr;delete data;}} // close namespacevoid goodG2B(){long long * data;data=NULL;data=(long long *)malloc(100*sizeof(long long));goodG2B_sink(&data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_struct_66{void bad_sink(twoints * data_array[]){twoints * data=data_array[2];free(data);}void goodG2B_sink(twoints * data_array[]){twoints * data=data_array[2];free(data);}void goodB2G_sink(twoints * data_array[]){twoints * data=data_array[2];delete data;}} // close namespacevoid goodG2B(){twoints * data;twoints * data_array[5];data=NULL;data=(twoints *)malloc(100*sizeof(twoints));data_array[2]=data;goodG2B_sink(data_array);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_struct_67{typedef struct _struct_type{twoints * a;} struct_type;void bad_sink(struct_type my_struct){twoints * data=my_struct.a;free(data);}void goodG2B_sink(struct_type my_struct){twoints * data=my_struct.a;free(data);}void goodB2G_sink(struct_type my_struct){twoints * data=my_struct.a;delete data;}} // close namespacevoid goodG2B(){twoints * data;struct_type my_struct;data=NULL;data=(twoints *)malloc(100*sizeof(twoints));my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_wchar_t_61{wchar_t * bad_source(wchar_t * data){data=new wchar_t;return data;}wchar_t * goodG2B_source(wchar_t * data){data=(wchar_t *)malloc(100*sizeof(wchar_t));return data;}wchar_t * goodB2G_source(wchar_t * data){data=new wchar_t;return data;}} // close namespacevoid goodB2G(){wchar_t * data;data=NULL;data=goodB2G_source(data);delete data;}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_wchar_t_62{void bad_source(wchar_t * &data){data=new wchar_t;}void goodG2B_source(wchar_t * &data){data=(wchar_t *)malloc(100*sizeof(wchar_t));}void goodB2G_source(wchar_t * &data){data=new wchar_t;}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;goodG2B_source(data);free(data);}
namespace CWE762_Mismatched_Memory_Management_Routines__new_free_wchar_t_67{typedef struct _struct_type{wchar_t * a;} struct_type;void bad_sink(struct_type my_struct){wchar_t * data=my_struct.a;free(data);}void goodG2B_sink(struct_type my_struct){wchar_t * data=my_struct.a;free(data);}void goodB2G_sink(struct_type my_struct){wchar_t * data=my_struct.a;delete data;}} // close namespacevoid goodG2B(){wchar_t * data;struct_type my_struct;data=NULL;data=(wchar_t *)malloc(100*sizeof(wchar_t));my_struct.a=data;goodG2B_sink(my_struct);}
namespace CWE762_Mismatched_Memory_Management_Routines__strdup_delete_wchar_t_63{void bad_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;delete data;}void goodG2B_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;delete data;}void goodB2G_sink(wchar_t * * data_ptr){wchar_t * data=*data_ptr;free(data);}} // close namespacevoid goodG2B(){wchar_t * data;data=NULL;data=new wchar_t;goodG2B_sink(&data);}
namespace CWE789_Uncontrolled_Mem_Alloc__new_char_fscanf_61{int bad_source(int data){fscanf(stdin,"%d",&data);return data;}int goodG2B_source(int data){data=20;return data;}int goodB2G_source(int data){fscanf(stdin,"%d",&data);return data;}} // close namespacevoid goodB2G(){int data;data=-1;data=goodB2G_source(data);{char * char_string;if((size_t)data > strlen(HELLO_STRING)&&data < 100){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than the length of the source string or too large");}}}
namespace CWE789_Uncontrolled_Mem_Alloc__new_char_rand_61{int bad_source(int data){data=RAND32();return data;}int goodG2B_source(int data){data=20;return data;}int goodB2G_source(int data){data=RAND32();return data;}} // close namespacevoid goodG2B(){int data;data=-1;data=goodG2B_source(data);{char * char_string;if(data > 0){char_string=new char[data];strcpy(char_string,HELLO_STRING);printLine(char_string);delete [] char_string;}else{printLine("Input is less than 0");}}}
namespace CWE789_Uncontrolled_Mem_Alloc__new_wchar_t_fixed_62{void bad_source(int &data){data=10000;}void goodG2B_source(int &data){data=20;}void goodB2G_source(int &data){data=10000;}} // close namespacevoid goodB2G(){int data;data=-1;goodB2G_source(data);{wchar_t * wchar_t_string;if((size_t)data > wcslen(HELLO_STRING)&&data < 100){wchar_t_string=new wchar_t[data];wcscpy(wchar_t_string,HELLO_STRING);printWLine(wchar_t_string);delete [] wchar_t_string;}else{printLine("Input is less than the length of the source string or too large");}}}
